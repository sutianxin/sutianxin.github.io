<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在线教育项目总结（三）-EasyExcel的使用</title>
      <link href="posts/765379126.html"/>
      <url>posts/765379126.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、介绍和入门使用"><a href="#一、介绍和入门使用" class="headerlink" title="一、介绍和入门使用"></a>一、介绍和入门使用</h1><h2 id="1-1、Excel的应用场景"><a href="#1-1、Excel的应用场景" class="headerlink" title="1.1、Excel的应用场景"></a>1.1、Excel的应用场景</h2><blockquote><p>数据导入：<strong>减轻录入工作量</strong></p></blockquote><blockquote><p>数据导出：<strong>统计信息归档</strong></p></blockquote><blockquote><p>数据传输：<strong>异构系统之间数据传输</strong></p></blockquote><h2 id="1-2、EasyExcel"><a href="#1-2、EasyExcel" class="headerlink" title="1.2、EasyExcel"></a>1.2、EasyExcel</h2><blockquote><p><strong>Github地址：</strong><a href="https://github.com/alibaba/easyexcel">EasyExcel</a></p><p><strong>官方网站：</strong><a href="https://www.yuque.com/easyexcel/doc/easyexcel">EasyExcel</a></p></blockquote><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><blockquote><p>EasyExcel是一个基于Java的简单、省内存的读写Excel的开源项目。在尽可能节约内存的情况下支持读写百M的Excel。</p></blockquote><h3 id="2、特点"><a href="#2、特点" class="headerlink" title="2、特点"></a>2、特点</h3><ul><li>Java领域解析、生成Excel比较有名的框架有Apache poi、jxl等。但他们都存在一个严重的问题就是非常的耗内存。如果你的系统并发量不大的话可能还行，但是一旦并发上来后一定会OOM或者JVM频繁的full gc。</li><li>EasyExcel是阿里巴巴开源的一个excel处理框架，<strong>以使用简单、节省内存著称</strong>。EasyExcel能大大减少占用内存的主要原因是在解析Excel时没有将文件数据一次性全部加载到内存中，而是从磁盘上一行行读取数据，逐个解析。</li><li>EasyExcel采用一行一行的解析模式，并将一行的解析结果以观察者的模式通知处理（AnalysisEventListener）。</li></ul><h2 id="1-3、入门使用"><a href="#1-3、入门使用" class="headerlink" title="1.3、入门使用"></a>1.3、入门使用</h2><h3 id="1、创建项目并引入依赖"><a href="#1、创建项目并引入依赖" class="headerlink" title="1、创建项目并引入依赖"></a>1、创建项目并引入依赖</h3><blockquote><p>创建一个测试用<strong>Maven</strong>项目，并导入以下依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xmlbeans<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xmlbeans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、最简单的写"><a href="#2、最简单的写" class="headerlink" title="2、最简单的写"></a>2、最简单的写</h3><blockquote><p>创建实体类</p></blockquote><ul><li>使用@ExcelProperty注解可以指定excel列名，即name对应excel中的”姓名”列，birthday属性对应excel中的生日列…</li><li>使用Lombok插件简化开发</li><li>可以使用@ExcelIgnore字段来让EasyExcel忽略该属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelEmpData</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;生日&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;薪资&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 使用<span class="doctag">@ExcelIgnore</span>注解来使EasyExcel忽略这个属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试用例，在test包下创建一个TestWriteExcelData测试类，用于测试EasyExcel的写功能</p></blockquote><ul><li>07版本的Excel和03版本的写入方式有所不同</li><li>03版本的Excel写入最多一次可写65536行</li></ul><blockquote><p>编写一个静态方法，这个方法用于生成测试数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;ExcelEmpData&gt; <span class="title">getEmpData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;ExcelEmpData&gt; excelEmpDataList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ExcelEmpData data = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">65535</span>; i++) &#123;</span><br><span class="line">        data = <span class="keyword">new</span> ExcelEmpData();</span><br><span class="line">        data.setName(<span class="string">&quot;芜湖&quot;</span> + i);</span><br><span class="line">        <span class="comment">//password属性的值不会被写入Excel中</span></span><br><span class="line">        data.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        data.setSalary(<span class="number">43.96</span>);</span><br><span class="line">        data.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">        excelEmpDataList.add(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> excelEmpDataList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在测试类中编写一个testWrite07方法，用于对.xlsx文件进行数据写入</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrite07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 指定数据写入到哪个excel文件</span></span><br><span class="line">    String fileName = <span class="string">&quot;F:/testExcel/01-simpleWrite-07.xlsx&quot;</span>;</span><br><span class="line">    <span class="comment">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span></span><br><span class="line">    EasyExcel.write(fileName, ExcelEmpData.class).sheet(<span class="string">&quot;模板&quot;</span>).doWrite(getEmpData());</span><br><span class="line">    System.out.println(<span class="string">&quot;excel写入成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210209235417.png" alt="image-20210209235416173"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210209235558.png" alt="image-20210209235558290"></p><blockquote><p>在测试类中编写一个testWrite03方法，用于对.xls文件进行数据写入</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleWrite03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String fileName = <span class="string">&quot;F:/testExcel/02-simpleWrite-03.xls&quot;</span>;</span><br><span class="line">    <span class="comment">// 如果这里想使用03 则 传入excelType参数即可</span></span><br><span class="line">    EasyExcel.write(fileName, ExcelEmpData.class).excelType(ExcelTypeEnum.XLS).sheet(<span class="string">&quot;模板&quot;</span>).doWrite(getEmpData());</span><br><span class="line">    System.out.println(<span class="string">&quot;excel写入成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210209235836.png" alt="image-20210209235835844"></p><blockquote><p>向.xls文件写入数据时，一次最多写入65536行</p></blockquote><ul><li>将getData()函数中的循环次数提高到65537</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrongWrite03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String fileName = <span class="string">&quot;F:/testExcel/03-simpleWrite-03.xls&quot;</span>;</span><br><span class="line">    <span class="comment">// 如果这里想使用03 则 传入excelType参数即可</span></span><br><span class="line">    EasyExcel.write(fileName, ExcelEmpData.class).excelType(ExcelTypeEnum.XLS).sheet(<span class="string">&quot;模板&quot;</span>).doWrite(getEmpData());</span><br><span class="line">    System.out.println(<span class="string">&quot;excel写入成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210000144.png" alt="image-20210210000144286"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210000202.png" alt="image-20210210000202523"></p><h3 id="3、指定easyExcel的写入列"><a href="#3、指定easyExcel的写入列" class="headerlink" title="3、指定easyExcel的写入列"></a>3、指定easyExcel的写入列</h3><blockquote><p>为实体类中的字段配置index属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelEmpData</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;,index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;生日&quot;,index = 3)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;薪资&quot;,index = 5)</span></span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 使用<span class="doctag">@ExcelIgnore</span>注解来使EasyExcel忽略这个属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>重新执行测试方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrite07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 指定数据写入到哪个excel文件</span></span><br><span class="line">    String fileName = <span class="string">&quot;F:/testExcel/04-simpleWrite-07.xlsx&quot;</span>;</span><br><span class="line">    <span class="comment">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span></span><br><span class="line">    EasyExcel.write(fileName, ExcelEmpData.class).sheet(<span class="string">&quot;模板&quot;</span>).doWrite(getEmpData());</span><br><span class="line">    System.out.println(<span class="string">&quot;excel写入成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210000729.png" alt="image-20210210000729446"></p><h3 id="4、指定属性的格式化"><a href="#4、指定属性的格式化" class="headerlink" title="4、指定属性的格式化"></a>4、指定属性的格式化</h3><blockquote><p>根据实体类属性的类型为属性添加不同的格式化注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelEmpData</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DateTimeFormat(&quot;yyyy年MM月dd日HH时mm分ss秒&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;生日&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NumberFormat(&quot;#.##%&quot;)</span><span class="comment">//百分比表示，保留两位小数</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;薪资&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 使用<span class="doctag">@ExcelIgnore</span>注解来使EasyExcel忽略这个属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>重新执行方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrite07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 指定数据写入到哪个excel文件</span></span><br><span class="line">    String fileName = <span class="string">&quot;F:/testExcel/05-simpleWrite-07.xlsx&quot;</span>;</span><br><span class="line">    <span class="comment">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span></span><br><span class="line">    EasyExcel.write(fileName, ExcelEmpData.class).sheet(<span class="string">&quot;模板&quot;</span>).doWrite(getEmpData());</span><br><span class="line">    System.out.println(<span class="string">&quot;excel写入成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210001029.png" alt="image-20210210001029235"></p><h3 id="5、xlsx和xls的区别"><a href="#5、xlsx和xls的区别" class="headerlink" title="5、xlsx和xls的区别"></a>5、xlsx和xls的区别</h3><blockquote><p>存储相同数量的数据，用xlsx占用的空间较小</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210001155.png" alt="image-20210210001155925"></p><blockquote><p>xls一次性最多写入65536条数据</p></blockquote><h2 id="1-4、使用EasyExcel读取文件"><a href="#1-4、使用EasyExcel读取文件" class="headerlink" title="1.4、使用EasyExcel读取文件"></a>1.4、使用EasyExcel读取文件</h2><blockquote><p>参考地址：<a href="https://www.yuque.com/easyexcel/doc/read">https://www.yuque.com/easyexcel/doc/read</a></p></blockquote><h3 id="1、创建监听器"><a href="#1、创建监听器" class="headerlink" title="1、创建监听器"></a>1、创建监听器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelEmpDataListener</span> <span class="keyword">extends</span> <span class="title">AnalysisEventListener</span>&lt;<span class="title">ExcelEmpData</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BATCH_COUNT = <span class="number">5</span>;</span><br><span class="line">    List&lt;ExcelEmpData&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个每一条数据解析都会来调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     *            one row value. Is is same as &#123;<span class="doctag">@link</span> AnalysisContext#readRowHolder()&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(ExcelEmpData data, AnalysisContext context)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, data);</span><br><span class="line">        list.add(data);</span><br><span class="line">        <span class="comment">// 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM</span></span><br><span class="line">        <span class="keyword">if</span> (list.size() &gt;= BATCH_COUNT) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;存数据库&quot;</span>);</span><br><span class="line">            <span class="comment">// 存储完成清理 list</span></span><br><span class="line">            list.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有数据解析完成了 都会来调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;所有数据解析完成！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h3><blockquote><p>创建testRead.xlsx文件，添加测试数据</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210002105.png" alt="image-20210210002105220"></p><blockquote><p>创建测试方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最简单的读</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleRead07</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String fileName = <span class="string">&quot;F:/testExcel/testRead.xlsx&quot;</span>;</span><br><span class="line">    <span class="comment">// 这里默认读取第一个sheet</span></span><br><span class="line">    EasyExcel.read(fileName, ExcelEmpData.class, <span class="keyword">new</span> ExcelEmpDataListener()).sheet().doRead();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleRead03</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String fileName = <span class="string">&quot;F:/testExcel/testRead.xls&quot;</span>;</span><br><span class="line">    <span class="comment">// 这里默认读取第一个sheet</span></span><br><span class="line">    EasyExcel.read(fileName, ExcelEmpData.class, <span class="keyword">new</span> ExcelEmpDataListener()).excelType(ExcelTypeEnum.XLS).sheet().doRead();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210002620.png" alt="image-20210210002619823"></p><h1 id="二、在线教育项目整合EasyExcel"><a href="#二、在线教育项目整合EasyExcel" class="headerlink" title="二、在线教育项目整合EasyExcel"></a>二、在线教育项目整合EasyExcel</h1><blockquote><p>在在线教育项目的课程分类管理中，我们需要接收管理员从前端传过来的课程分类excel，在解析后将excel中的数据存入课程分类表</p></blockquote><h2 id="2-1、添加依赖"><a href="#2-1、添加依赖" class="headerlink" title="2.1、添加依赖"></a>2.1、添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xmlbeans<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xmlbeans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2、创建与Excel对应的实体类"><a href="#2-2、创建与Excel对应的实体类" class="headerlink" title="2.2、创建与Excel对应的实体类"></a>2.2、创建与Excel对应的实体类</h2><blockquote><p>excel模板文件格式如下：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210003102.png" alt="image-20210210003102353"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelSubjectData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;一级分类&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String levelOneTitle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;二级分类&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String levelTwoTitle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3、实现Excel导入"><a href="#2-3、实现Excel导入" class="headerlink" title="2.3、实现Excel导入"></a>2.3、实现Excel导入</h2><h3 id="1、创建监听器-1"><a href="#1、创建监听器-1" class="headerlink" title="1、创建监听器"></a>1、创建监听器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">//全参</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">//无参</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelSubjectDataListener</span> <span class="keyword">extends</span> <span class="title">AnalysisEventListener</span>&lt;<span class="title">ExcelSubjectData</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 假设这个是一个DAO，当然有业务逻辑这个也可以是一个service。当然如果不用存储这个对象没用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> SubjectMapper subjectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *遍历每一行的记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(ExcelSubjectData data, AnalysisContext context)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;解析到一条记录: &#123;&#125;&quot;</span>, data);</span><br><span class="line">        <span class="comment">//处理读取出来的数据</span></span><br><span class="line">        String levelOneTitle = data.getLevelOneTitle();<span class="comment">//一级标题</span></span><br><span class="line">        String levelTwoTitle = data.getLevelTwoTitle();<span class="comment">//二级标题</span></span><br><span class="line">        log.info(<span class="string">&quot;levelOneTitle: &#123;&#125;&quot;</span>, levelOneTitle);</span><br><span class="line">        log.info(<span class="string">&quot;levelTwoTitle: &#123;&#125;&quot;</span>, levelTwoTitle);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 组装数据：Subject</span></span><br><span class="line">        <span class="comment">// 存入数据库：subjectMapper.insert()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有数据解析完成了 都会来调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;所有数据解析完成！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、监听器中添加辅助方法"><a href="#2、监听器中添加辅助方法" class="headerlink" title="2、监听器中添加辅助方法"></a>2、监听器中添加辅助方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类名称查询这个一级分类是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Subject <span class="title">getByTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">    QueryWrapper&lt;Subject&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;title&quot;</span>, title);</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;parent_id&quot;</span>, <span class="string">&quot;0&quot;</span>);<span class="comment">//一级分类</span></span><br><span class="line">    <span class="keyword">return</span> subjectMappter.selectOne(queryWrapper);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类名称和父id查询这个二级分类是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Subject <span class="title">getSubByTitle</span><span class="params">(String title, String parentId)</span> </span>&#123;</span><br><span class="line">    QueryWrapper&lt;Subject&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;title&quot;</span>, title);</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;parent_id&quot;</span>, parentId);</span><br><span class="line">    <span class="keyword">return</span> subjectMappter.selectOne(queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、完善invoke方法"><a href="#3、完善invoke方法" class="headerlink" title="3、完善invoke方法"></a>3、完善invoke方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个每一条数据解析都会来调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(ExcelSubjectData data, AnalysisContext context)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, data);</span><br><span class="line">    <span class="comment">//处理读取进来的数据</span></span><br><span class="line">    String titleLevelOne = data.getLevelOneTitle();</span><br><span class="line">    String titleLevelTwo = data.getLevelTwoTitle();</span><br><span class="line">    <span class="comment">//判断一级分类是否重复</span></span><br><span class="line">    Subject subjectLevelOne = <span class="keyword">this</span>.getByTitle(titleLevelOne);</span><br><span class="line">    String parentId = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(subjectLevelOne == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//将一级分类存入数据库</span></span><br><span class="line">        Subject subject = <span class="keyword">new</span> Subject();</span><br><span class="line">        subject.setParentId(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        subject.setTitle(titleLevelOne);<span class="comment">//一级分类名称</span></span><br><span class="line">        subjectMappter.insert(subject);</span><br><span class="line">        parentId = subject.getId();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        parentId = subjectLevelOne.getId();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断二级分类是否重复</span></span><br><span class="line">    Subject subjectLevelTwo = <span class="keyword">this</span>.getSubByTitle(titleLevelTwo, parentId);</span><br><span class="line">    <span class="keyword">if</span>(subjectLevelTwo == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//将二级分类存入数据库</span></span><br><span class="line">        Subject subject = <span class="keyword">new</span> Subject();</span><br><span class="line">        subject.setTitle(titleLevelTwo);</span><br><span class="line">        subject.setParentId(parentId);</span><br><span class="line">        subjectMappter.insert(subject);<span class="comment">//添加</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、SubjectService"><a href="#4、SubjectService" class="headerlink" title="4、SubjectService"></a><strong>4、SubjectService</strong></h3><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">batchImport</span><span class="params">(InputStream inputStream)</span></span>;</span><br></pre></td></tr></table></figure><p>实现：获取Excel记录并逐条导入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchImport</span><span class="params">(InputStream inputStream)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里 需要指定读用哪个class去读，然后读取第一个sheet 文件流会自动关闭</span></span><br><span class="line">    EasyExcel.read(inputStream, ExcelSubjectData.class, <span class="keyword">new</span> ExcelSubjectDataListener(baseMapper))</span><br><span class="line">        .excelType(ExcelTypeEnum.XLS).sheet().doRead();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、Controller"><a href="#5、Controller" class="headerlink" title="5、Controller"></a>5、Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;课程分类管理&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/edu/subject&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SubjectService subjectService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;import&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;Excel批量导入课程分类&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">batchImport</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@ApiParam(value = &quot;Excel文件&quot;,required = true)</span></span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用service层的批量导入方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subjectService.batchImport(file.getInputStream());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//打印日志</span></span><br><span class="line">            log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">            <span class="comment">//抛出一个Excel导入失败异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GrainException(ResultCodeEnum.EXCEL_DATA_IMPORT_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.ok().message(<span class="string">&quot;批量导入成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;nested&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;嵌套分类数据列表&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">nestedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回分类VO列表</span></span><br><span class="line">        List&lt;SubjectVo&gt; subjectVoList = subjectService.nestedList();</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">&quot;items&quot;</span>,subjectVoList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、使用swagger进行测试"><a href="#6、使用swagger进行测试" class="headerlink" title="6、使用swagger进行测试"></a>6、使用swagger进行测试</h3><blockquote><p>删除数据库中的所有课程分类</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210003822.png" alt="image-20210210003821966"></p><blockquote><p>打开swagger，选择文件进行上传</p></blockquote><ul><li>swagger页面</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210004001.png" alt="image-20210210004001328"></p><ul><li>要上传的文件</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210003944.png" alt="image-20210210003944206"></p><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210004050.png" alt="image-20210210004050124"></p><ul><li>数据库</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210004116.png" alt="image-20210210004116897"></p>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端学习 </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> EasyExcel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线教育项目总结（二）-用户认证</title>
      <link href="posts/650479038.html"/>
      <url>posts/650479038.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、有状态登录和无状态登录"><a href="#一、有状态登录和无状态登录" class="headerlink" title="一、有状态登录和无状态登录"></a>一、有状态登录和无状态登录</h1><h2 id="1-1-什么是有状态？"><a href="#1-1-什么是有状态？" class="headerlink" title="1.1.什么是有状态？"></a>1.1.什么是有状态？</h2><blockquote><p>有状态服务，即服务端需要记录每次会话的客户端信息，从而识别客户端身份，根据用户身份进行请求的处理，典型的设计如tomcat中的session。</p><p>例如登录：用户登录后，我们把登录者的信息保存在服务端session中，并且给用户一个cookie值，记录对应的session。然后下次请求，用户携带cookie值来，我们就能识别到对应session，从而找到用户的信息。</p></blockquote><p>缺点：</p><ul><li>服务端保存大量数据，增加服务端压力</li><li>服务端保存用户状态，无法进行水平扩展</li><li>客户端请求依赖服务端，多次请求必须访问同一台服务器</li></ul><h2 id="1-2、什么是无状态？"><a href="#1-2、什么是无状态？" class="headerlink" title="1.2、什么是无状态？"></a>1.2、什么是无状态？</h2><blockquote><p>服务器不保存用户的登录信息！</p><p>微服务集群中的每个服务，对外提供的都是Rest风格的接口。而Rest风格的一个最重要的规范就是：服务的无状态性，即：</p><ul><li><strong>服务端不保存任何客户端请求者信息</strong></li><li>客户端的每次请求必须具备自描述信息（jwt），通过这些信息识别客户端身份</li></ul></blockquote><p><strong>优点：</strong></p><ul><li>无状态： token是无状态，session是有状态的</li><li>基于标准化：你的API可以采用标准化的 JSON Web Token (JWT)</li><li>客户端请求不依赖服务端的信息，任何多次请求不需要必须访问到同一台服务</li><li>服务端的集群和状态对客户端透明</li><li>服务端可以任意的迁移和伸缩</li><li>减小服务端存储压力</li></ul><p><strong>缺点：</strong></p><ul><li>占用带宽</li><li>无法在服务器端销毁</li></ul><h1 id="二、常见登录方式"><a href="#二、常见登录方式" class="headerlink" title="二、常见登录方式"></a>二、常见登录方式</h1><h2 id="2-1、单一服务器模式"><a href="#2-1、单一服务器模式" class="headerlink" title="2.1、单一服务器模式"></a>2.1、单一服务器模式</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205210527.png" alt="image-20210205210527360"></p><p><strong>一般过程如下：</strong></p><ol><li>用户向服务器发送用户名和密码。</li><li>验证服务器后，相关数据（如用户名，用户角色等）将保存在当前会话（session）中。</li><li>服务器向用户返回session_id，session信息都会写入到用户的Cookie。</li><li>用户的每个后续请求都将通过在Cookie中取出session_id传给服务器。</li><li>服务器收到session_id并对比之前保存的数据，确认用户的身份。</li></ol><p><strong>缺点：</strong></p><ul><li>单点性能压力，无法扩展。</li><li>分布式架构中，需要session共享方案，session共享方案存在性能瓶颈。</li></ul><h2 id="2-2、单点登录（Single-Sign-On）"><a href="#2-2、单点登录（Single-Sign-On）" class="headerlink" title="2.2、单点登录（Single  Sign  On）"></a>2.2、单点登录（Single  Sign  On）</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205210648.png" alt="image-20210205210648124"></p><p>分布式，SSO(single sign on)模式：单点登录英文全称Single Sign On，简称就是SSO。它的解释是：在多个应用系统中，只需要登录一次，就可以访问其他相互信任的应用系统。</p><ul><li>如图所示，图中有3个系统，分别是业务A、业务B、和SSO。</li><li>业务A、业务B没有登录模块。</li><li>而SSO只有登录模块，没有其他的业务模块。</li></ul><p><strong>一般过程如下：</strong></p><ol><li>当业务A、业务B需要登录时，将跳到SSO系统。</li><li>SSO从用户信息数据库中获取用户信息并校验用户信息，SSO系统完成登录。</li><li>然后将用户信息存入缓存（例如redis）。</li><li>当用户访问业务A或业务B，需要判断用户是否登录时，将跳转到SSO系统中进行用户身份验证，SSO判断缓存中是否存在用户身份信息。</li><li>这样，只要其中一个系统完成登录，其他的应用系统也就随之登录了。这就是单点登录（SSO）的定义。</li></ol><p><strong>优点 ：</strong>  </p><p>用户身份信息独立管理，更好的分布式管理。可以自己扩展安全策略</p><p><strong>缺点：</strong></p><p>认证服务器访问压力较大。</p><h2 id="2-3、Token模式"><a href="#2-3、Token模式" class="headerlink" title="2.3、Token模式"></a>2.3、Token模式</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205210734.png" alt="image-20210205210734269"></p><p><strong>优点：</strong></p><ul><li>无状态： token是无状态，session是有状态的</li><li>基于标准化：你的API可以采用标准化的 JSON Web Token (JWT)</li></ul><p><strong>缺点：</strong></p><ul><li>占用带宽</li><li>无法在服务器端销毁</li></ul><blockquote><p>无状态登录的流程：</p></blockquote><ul><li>当客户端第一次请求服务时，服务端对用户进行信息认证（登录）</li><li>认证通过，将用户信息进行加密形成token，返回给客户端，作为登录凭证</li><li>以后每次请求，客户端都携带认证的token</li><li>服务的对token进行解密，判断是否有效。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205211358.png" alt="image-20210205211358667"></p><p>整个登录过程中，最关键的点是什么？</p><p><strong>token的安全性</strong></p><h1 id="三、JWT"><a href="#三、JWT" class="headerlink" title="三、JWT"></a>三、JWT</h1><h2 id="3-1、什么是JWT令牌"><a href="#3-1、什么是JWT令牌" class="headerlink" title="3.1、什么是JWT令牌"></a>3.1、什么是JWT令牌</h2><blockquote><p>JWT是JSON Web Token的缩写，即JSON Web令牌，是一种自包含令牌。 </p></blockquote><h3 id="1、使用场景"><a href="#1、使用场景" class="headerlink" title="1、使用场景"></a>1、使用场景</h3><ul><li>一种情况是webapi，类似阿里云播放凭证的功能。</li><li>另一种情况是多web服务器下实现无状态分布式身份验证。</li></ul><h3 id="2、交互流程"><a href="#2、交互流程" class="headerlink" title="2、交互流程"></a>2、交互流程</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205211838.png" alt="image-20210205211838506"></p><p>步骤翻译：</p><ul><li>1、用户登录</li><li>2、服务的认证，通过后根据secret生成token</li><li>3、将生成的token返回给浏览器</li><li>4、用户每次请求携带token</li><li>5、服务端利用公钥解读jwt签名，判断签名有效后，从Payload中获取用户信息</li><li>6、处理请求，返回响应结果</li></ul><p>因为JWT签发的token中已经包含了用户的身份信息，并且每次请求都会携带，这样服务的就无需保存用户信息，甚至无需去数据库查询，完全符合了Rest的无状态规范。</p><h3 id="3、作用"><a href="#3、作用" class="headerlink" title="3、作用"></a>3、作用</h3><blockquote><p>JWT 最重要的作用就是对 token信息的防伪作用</p></blockquote><h3 id="4、原理"><a href="#4、原理" class="headerlink" title="4、原理"></a>4、原理</h3><ul><li>一个JWT由三个部分组成：JWT头、有效载荷、签名哈希</li><li>最后由这三者组合进行base64编码得到JWT</li></ul><h2 id="3-2、JWT令牌的组成"><a href="#3-2、JWT令牌的组成" class="headerlink" title="3.2、JWT令牌的组成"></a>3.2、JWT令牌的组成</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205212928.png" alt="image-20210205212928770"></p><p><strong>JWT头</strong></p><p>JWT头部分是一个描述JWT元数据的JSON对象，通常如下所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，alg属性表示签名使用的算法，默认为HMAC SHA256（写为HS256）；typ属性表示令牌的类型，JWT令牌统一写为JWT。最后，使用Base64 URL算法将上述JSON对象转换为字符串保存。</p><p><strong>有效载荷</strong></p><p>有效载荷部分，是JWT的主体内容部分，也是一个JSON对象，包含需要传递的数据。 JWT指定七个默认字段供选择。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iss: jwt签发者</span><br><span class="line">sub: 主题</span><br><span class="line">aud: 接收jwt的一方</span><br><span class="line">exp: jwt的过期时间，这个过期时间必须要大于签发时间</span><br><span class="line">nbf: 定义在什么时间之前，该jwt都是不可用的.</span><br><span class="line">iat: jwt的签发时间</span><br><span class="line">jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</span><br></pre></td></tr></table></figure><p>除以上默认字段外，我们还可以自定义私有字段，如下例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Helen&quot;,</span><br><span class="line">  &quot;admin&quot;: true,</span><br><span class="line">  &quot;avatar&quot;: &quot;helen.jpg&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，默认情况下JWT是未加密的，任何人都可以解读其内容，因此不要构建隐私信息字段，存放保密信息，以防止信息泄露。</p><p>JSON对象也使用Base64 URL算法转换为字符串保存。</p><p><strong>签名哈希</strong></p><p>签名哈希部分是对上面两部分数据签名，通过指定的算法生成哈希，以确保数据不会被篡改。</p><p>首先，需要指定一个密码（secret）。该密码仅仅为保存在服务器中，并且不能向用户公开。然后，使用标头中指定的签名算法（默认情况下为HMAC SHA256）根据以下公式生成签名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(claims), secret)</span><br></pre></td></tr></table></figure><p>在计算出签名哈希后，JWT头，有效载荷和签名哈希的三个部分组合成一个字符串，每个部分用”.”分隔，就构成整个JWT对象。</p><p><strong>Base64URL算法</strong></p><p>如前所述，JWT头和有效载荷序列化的算法都用到了Base64URL。该算法和常见Base64算法类似，稍有差别。</p><p>作为令牌的JWT可以放在URL中（例如api.example/?token=xxx）。 Base64中用的三个字符是”+”，”/“和”=”，由于在URL中有特殊含义，因此Base64URL中对他们做了替换：”=”去掉，”+”用”-“替换，”/“用”_”替换，这就是Base64URL算法。</p><p><strong>注意：</strong>base64编码，并不是加密，只是把明文信息变成了不可见的字符串。但是其实只要用一些工具就可以把base64编码解成明文，所以不要在JWT中放入涉及私密的信息。</p><h2 id="3-3、JWT的用法"><a href="#3-3、JWT的用法" class="headerlink" title="3.3、JWT的用法"></a>3.3、JWT的用法</h2><blockquote><p>客户端接收服务器返回的JWT，将其存储在Cookie或localStorage中。</p><p>此后，客户端将在与服务器交互中都会带JWT。如果将它存储在Cookie中，就可以自动发送，但是不会跨域，因此一般是将它放入HTTP请求的Header Authorization字段中。</p><p>当跨域时，也可以将JWT放置于POST请求的数据主体中。</p></blockquote><h2 id="3-4、问题和趋势"><a href="#3-4、问题和趋势" class="headerlink" title="3.4、问题和趋势"></a>3.4、问题和趋势</h2><p>1、JWT默认不加密，但可以加密。生成原始令牌后，可以使用该令牌再次对其进行加密。</p><p>2、当JWT未加密时，一些私密数据无法通过JWT传输。</p><p>3、JWT不仅可用于认证，还可用于信息交换。善用JWT有助于减少服务器请求数据库的次数。</p><p>4、JWT的最大缺点是服务器不保存会话状态，所以在使用期间不可能取消令牌或更改令牌的权限。也就是说，一旦JWT签发，在有效期内将会一直有效。</p><p>5、JWT本身包含认证信息，因此一旦信息泄露，任何人都可以获得令牌的所有权限。为了减少盗用，JWT的有效期不宜设置太长。对于某些重要操作，用户在使用时应该每次都进行身份验证。</p><p>6、为了减少盗用和窃取，JWT不建议使用HTTP协议来传输代码，而是使用加密的HTTPS协议进行传输。</p><h1 id="四、用户身份认证"><a href="#四、用户身份认证" class="headerlink" title="四、用户身份认证"></a>四、用户身份认证</h1><h2 id="4-1、引入依赖"><a href="#4-1、引入依赖" class="headerlink" title="4.1、引入依赖"></a>4.1、引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2、引入工具类和用户有效载荷类"><a href="#4-2、引入工具类和用户有效载荷类" class="headerlink" title="4.2、引入工具类和用户有效载荷类"></a>4.2、引入工具类和用户有效载荷类</h2><blockquote><p>JwtUtils.java，用于根据<strong>用户信息</strong>生成<strong>token</strong>、判断token是否有效的工具类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String APP_SECRET = <span class="string">&quot;ukc8BDbRigUDaY6pZFfWus2jZWLPHO&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Key <span class="title">getKeyInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = DatatypeConverter.parseBase64Binary(APP_SECRET);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SecretKeySpec(bytes,signatureAlgorithm.getJcaName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJwtToken</span><span class="params">(JwtInfo jwtInfo, <span class="keyword">int</span> expire)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String JwtToken = Jwts.builder()</span><br><span class="line">                .setHeaderParam(<span class="string">&quot;typ&quot;</span>, <span class="string">&quot;JWT&quot;</span>)</span><br><span class="line">                .setHeaderParam(<span class="string">&quot;alg&quot;</span>, <span class="string">&quot;HS256&quot;</span>)</span><br><span class="line">                .setSubject(<span class="string">&quot;guli-user&quot;</span>)<span class="comment">//主题</span></span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> Date())<span class="comment">//颁发时间</span></span><br><span class="line">                .setExpiration(DateTime.now().plusSeconds(expire).toDate())<span class="comment">//过期时间</span></span><br><span class="line">                .claim(<span class="string">&quot;id&quot;</span>, jwtInfo.getId())<span class="comment">//用户id</span></span><br><span class="line">                .claim(<span class="string">&quot;nickname&quot;</span>, jwtInfo.getNickname())<span class="comment">//用户昵称</span></span><br><span class="line">                .claim(<span class="string">&quot;avatar&quot;</span>, jwtInfo.getAvatar())<span class="comment">//用户头像</span></span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, getKeyInstance())</span><br><span class="line">                .compact();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JwtToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断token是否存在与有效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwtToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkJwtTToken</span><span class="params">(String jwtToken)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(jwtToken)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Jwts.parser().setSigningKey(getKeyInstance()).parseClaimsJws(jwtToken);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断token是否存在与有效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkJwtTToken</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String jwtToken = request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isEmpty(jwtToken)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Jwts.parser().setSigningKey(getKeyInstance()).parseClaimsJws(jwtToken);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据token获取会员id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JwtInfo <span class="title">getMemberIdByJwtToken</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String jwtToken = request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(jwtToken)) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Jws&lt;Claims&gt; claimsJws = Jwts.parser().setSigningKey(getKeyInstance()).parseClaimsJws(jwtToken);</span><br><span class="line">        Claims claims = claimsJws.getBody();</span><br><span class="line">        JwtInfo jwtInfo = <span class="keyword">new</span> JwtInfo(claims.get(<span class="string">&quot;id&quot;</span>).toString(), claims.get(<span class="string">&quot;nickname&quot;</span>).toString(), claims.get(<span class="string">&quot;avatar&quot;</span>).toString());</span><br><span class="line">        <span class="keyword">return</span> jwtInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>JwtInfo，存放用户的有效信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">    <span class="comment">//权限、角色等</span></span><br><span class="line">    <span class="comment">//不要存敏感信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3、定义LoginVo"><a href="#4-3、定义LoginVo" class="headerlink" title="4.3、定义LoginVo"></a>4.3、定义LoginVo</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4、定义控制层接口"><a href="#4-4、定义控制层接口" class="headerlink" title="4.4、定义控制层接口"></a>4.4、定义控制层接口</h2><blockquote><p>该接口接收Service层生成的Token，然后将token返回至前端</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;会员登录&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;login&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginVo loginVo)</span> </span>&#123;</span><br><span class="line">    String token = memberService.login(loginVo);</span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5、定义Service层"><a href="#4-5、定义Service层" class="headerlink" title="4.5、定义Service层"></a>4.5、定义Service层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(LoginVo loginVo)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String mobile = loginVo.getMobile();</span><br><span class="line">    String password = loginVo.getPassword();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//校验参数</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(mobile)</span><br><span class="line">        || !FormUtils.isMobile(mobile)</span><br><span class="line">        || StringUtils.isEmpty(password)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> GuliException(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//校验手机号</span></span><br><span class="line">    QueryWrapper&lt;Member&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;mobile&quot;</span>, mobile);</span><br><span class="line">    Member member = baseMapper.selectOne(queryWrapper);</span><br><span class="line">    <span class="keyword">if</span>(member == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> GuliException(ResultCodeEnum.LOGIN_MOBLE_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//校验密码</span></span><br><span class="line">    <span class="keyword">if</span>(!MD5.encrypt(password).equals(member.getPassword()))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> GuliException(ResultCodeEnum.LOGIN_PASSWORD_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检验用户是否被禁用</span></span><br><span class="line">    <span class="keyword">if</span>(member.getDisabled())&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> GuliException(ResultCodeEnum.LOGIN_DISABLED_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    JwtInfo jwtInfo = <span class="keyword">new</span> JwtInfo();</span><br><span class="line">    jwtInfo.setId(member.getId());</span><br><span class="line">    jwtInfo.setNickname(member.getNickname());</span><br><span class="line">    jwtInfo.setAvatar(member.getAvatar());</span><br><span class="line">    String jwtToken = JwtUtils.getJwtToken(jwtInfo, <span class="number">1800</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jwtToken;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-6、测试"><a href="#4-6、测试" class="headerlink" title="4.6、测试"></a>4.6、测试</h2><blockquote><p>往数据库中插入一条测试数据，mobile为13711111111，密码为123</p></blockquote><blockquote><p>打开swagger，进行测试</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205215334.png" alt="image-20210205215334387"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205215350.png" alt="image-20210205215350880"></p><blockquote><p>当mobile和密码均输入无误时，后端会返回一个token</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205215435.png" alt="image-20210205215435940"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205215449.png" alt="image-20210205215449715"></p>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端学习 </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法学习（三）-二叉排序树详解</title>
      <link href="posts/3310991137.html"/>
      <url>posts/3310991137.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><blockquote><p><strong>二叉排序树</strong>亦称<strong>二叉查找树</strong>，是树形数据结构的一种，在一般情况下，二叉排序树的查找效率要<strong>高于</strong>普通链表，它要么是一棵空树，要么具有以下性质：</p><ul><li>若它的左子树不为空，则<strong>左子树上所有结点的值均小于它的根结点的值</strong>；</li><li>若它的右子树不为空，则<strong>右子树上所有结点的值均大于它的根结点的值</strong>；</li><li><strong>它的左、右子树分别为二叉排序树</strong>。</li><li>下面是一棵标准的二叉排序树</li></ul></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205180351.png" alt="image-20210205180344323"></p><h1 id="二、二叉排序树的生成与节点插入"><a href="#二、二叉排序树的生成与节点插入" class="headerlink" title="二、二叉排序树的生成与节点插入"></a>二、二叉排序树的生成与节点插入</h1><h2 id="2-1、生成"><a href="#2-1、生成" class="headerlink" title="2.1、生成"></a>2.1、生成</h2><h3 id="1、创建Node类和Tree类"><a href="#1、创建Node类和Tree类" class="headerlink" title="1、创建Node类和Tree类"></a>1、创建Node类和Tree类</h3><blockquote><p>创建一个<strong>Node</strong>类作为二叉排序树的<strong>节点类</strong>，这里省略getter、setter和toString方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 节点的值</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="comment">// 当前节点的左子节点</span></span><br><span class="line">    Node left;</span><br><span class="line">    <span class="comment">// 当前节点的右子节点</span></span><br><span class="line">    Node right;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><blockquote><p>创建一个<strong>Tree</strong>类，这个类包含一个Node类型的root属性。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tree</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当前树的根节点</span></span><br><span class="line">    Node root;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h3 id="2、生成思路"><a href="#2、生成思路" class="headerlink" title="2、生成思路"></a>2、生成思路</h3><blockquote><p>既可以在创建二叉树对象时直接使用有参构造函数传入根节点对象，也可以在添加节点时才插入root节点</p><p>注：当一棵树root节点为空时，第一个插入该树的节点就是根节点。</p></blockquote><h2 id="2、节点插入"><a href="#2、节点插入" class="headerlink" title="2、节点插入"></a>2、节点插入</h2><h3 id="1、思路"><a href="#1、思路" class="headerlink" title="1、思路"></a>1、思路</h3><blockquote><p>在Tree类中添加一个addNode方法，<strong>如果当前树的根节点为空，那么将要添加到二叉排序树的节点设置为根节点</strong>，否则就<strong>调用root节点对象的add方法</strong>，在root对象的add方法中：</p><ul><li>  如果传入要添加的节点node为空，那么直接返回，不做添加。</li><li>如果传入要添加的节点node的数值小于当前节点的数值，那么进行判断，如果当前节点的左子树为空，那么直接让当前节点的左子树为要添加的节点node。否则向左进行递归添加，判断待添加节点node的数据与当前左子节点数据的关系，重复以上操作。</li><li>如果传入要添加的节点node的数值大于等于当前节点的数值，这种情况需要尽量避免，这个时候进行判断，如果当前节点右子树为空，那么令当前节点右子树等于要添加的节点node。否则向右进行递归添加，判断待添加节点node的数据与当前右子节点数据的关系，重复以上操作。</li></ul></blockquote><h3 id="2、插入节点–Tree"><a href="#2、插入节点–Tree" class="headerlink" title="2、插入节点–Tree"></a>2、插入节点–Tree</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(Node node)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.root == <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.root = node; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="keyword">this</span>.root.add(node); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、节点的比较与插入–Node"><a href="#3、节点的比较与插入–Node" class="headerlink" title="3、节点的比较与插入–Node"></a>3、节点的比较与插入–Node</h3><blockquote><p><strong>比较节点树的静态方法</strong>如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(Node node1,Node node2)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> node1.data &gt; node2.data; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>Node类中插入节点的方法如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Node node)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(node == <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(compare(<span class="keyword">this</span>,node)) &#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.left == <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="keyword">this</span>.left = node; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">this</span>.left.add(node); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.right == <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="keyword">this</span>.right = node; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">this</span>.right.add(node); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、二叉树的前中后序遍历"><a href="#三、二叉树的前中后序遍历" class="headerlink" title="三、二叉树的前中后序遍历"></a>三、二叉树的前中后序遍历</h1><blockquote><p>前序遍历的顺序：<strong>根节点–左子节点–右子节点</strong></p><p>中序遍历的顺序：<strong>左子节点–根节点–右子节点</strong></p><p>后序遍历的顺序：<strong>左子节点–右子节点–根节点</strong></p></blockquote><h2 id="3-1、递归实现"><a href="#3-1、递归实现" class="headerlink" title="3.1、递归实现"></a>3.1、递归实现</h2><h3 id="1、前序遍历"><a href="#1、前序遍历" class="headerlink" title="1、前序遍历"></a>1、前序遍历</h3><blockquote><p>先输出当前节点，然后判断当前节点的左子树是否为空，如果不为空，就向左递归进行前序遍历。然后判断当前节点的右子树是否为空，若不为空，向右递归进行前序遍历。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Tree类 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.root != <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.root.preOrder(); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;二叉树为空，无法遍历！&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//Node类 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="keyword">this</span>); </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.getLeft() != <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.getLeft().preOrder(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.getRight() != <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.getRight().preOrder(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、中序遍历"><a href="#2、中序遍历" class="headerlink" title="2、中序遍历"></a>2、中序遍历</h3><blockquote><p>先判断当前节点左子树是否为空，若不为空，向左递归进行中序遍历，然后输出当前节点；最后判断当前节点的右子树是否为空，若不为空，向右递归进行中序遍历。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Tree类 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infixOrder</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.root != <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.root.infixOrder(); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;二叉树为空，无法遍历！&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//Node类 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infixOrder</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.getLeft() != <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.getLeft().infixOrder(); </span><br><span class="line">    &#125; </span><br><span class="line">    System.out.println(<span class="keyword">this</span>); </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.getRight() != <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.getRight().infixOrder(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、后序遍历"><a href="#3、后序遍历" class="headerlink" title="3、后序遍历"></a>3、后序遍历</h3><blockquote><p>先判断当前节点左子树是否为空，若不为空，向左递归进行后序遍历；然后判断当前节点的右子树是否为空，若不为空，向右递归进行后序遍历。最后输出当前节点。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Tree类 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.root != <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.root.postOrder(); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;二叉树为空，无法遍历！&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//Node类 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.getLeft() != <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.getLeft().postOrder(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.getRight() != <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.getRight().postOrder(); </span><br><span class="line">    &#125; </span><br><span class="line">    System.out.println(<span class="keyword">this</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2、非递归实现"><a href="#3-2、非递归实现" class="headerlink" title="3.2、非递归实现"></a>3.2、非递归实现</h2><blockquote><p>我们需要使用到<strong>栈</strong>这一数据结构来解决问题</p></blockquote><h3 id="1、前序遍历-1"><a href="#1、前序遍历-1" class="headerlink" title="1、前序遍历"></a>1、前序遍历</h3><blockquote><p>如果当前节点不为空，先输出当前节点信息，然后将该节点压入栈，并将指针移动到当前节点的左子节点，此时如果该左子树为空，就退出循环，此时如果栈不为空，就弹出栈顶数据，将指针移动到当前结点右子树，循环，直到栈空或者当前节点为空。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(Node node)</span> </span>&#123; </span><br><span class="line">    Stack&lt;Node&gt; nodeStack = <span class="keyword">new</span> Stack&lt;&gt;(); </span><br><span class="line">    <span class="keyword">while</span>(node != <span class="keyword">null</span> || !nodeStack.empty()) &#123; </span><br><span class="line">        <span class="keyword">while</span>(node != <span class="keyword">null</span>) &#123; </span><br><span class="line">            System.out.println(node); </span><br><span class="line">            nodeStack.push(node); </span><br><span class="line">            node = node.getLeft(); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span>(!nodeStack.empty()) &#123; </span><br><span class="line">            node = nodeStack.pop(); </span><br><span class="line">            node = node.getRight(); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、中序遍历-1"><a href="#2、中序遍历-1" class="headerlink" title="2、中序遍历"></a>2、中序遍历</h3><blockquote><p>如果当前节点不为空，将当前节点压入栈中，然后将指针指向当前节点左子树，直到左子树为空，此时栈不为空，将栈顶元素弹出并输出后，将指针移动到当前结点右子树，循环，直到栈空或者当前节点为空。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">midOrder</span><span class="params">(Node node)</span> </span>&#123; </span><br><span class="line">    Stack&lt;Node&gt; nodeStack = <span class="keyword">new</span> Stack&lt;&gt;(); </span><br><span class="line">    <span class="keyword">while</span>(node != <span class="keyword">null</span> || !nodeStack.empty()) &#123; </span><br><span class="line">        <span class="keyword">while</span>(node != <span class="keyword">null</span>) &#123; </span><br><span class="line">            nodeStack.push(node); </span><br><span class="line">            node = node.getLeft(); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span>(!nodeStack.empty()) &#123; </span><br><span class="line">            node = nodeStack.pop(); </span><br><span class="line">            System.out.println(node); </span><br><span class="line">            node = node.getRight(); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、后序遍历-1"><a href="#3、后序遍历-1" class="headerlink" title="3、后序遍历"></a>3、后序遍历</h3><blockquote><p>需要利用到一个辅助栈用于输出结果，由于栈具有先进后出的特点，而后序遍历的顺序是左右根，所以压入栈顺序为根、右、左。最后使用辅助栈输出</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(Node node)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(node == <span class="keyword">null</span>) &#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;要遍历的二叉树为空！&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;(); </span><br><span class="line">    <span class="comment">//辅助栈 </span></span><br><span class="line">    Stack&lt;Node&gt; assistStack = <span class="keyword">new</span> Stack&lt;&gt;(); </span><br><span class="line">    <span class="keyword">while</span>(node != <span class="keyword">null</span> || !stack.isEmpty()) &#123; </span><br><span class="line">        <span class="keyword">while</span>(node != <span class="keyword">null</span>) &#123; </span><br><span class="line">            stack.push(node); </span><br><span class="line">            assistStack.push(node); </span><br><span class="line">            node = node.getRight(); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span>(!stack.isEmpty()) &#123; </span><br><span class="line">            node = stack.pop(); </span><br><span class="line">            node = node.getLeft(); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">while</span>(!assistStack.isEmpty()) &#123; </span><br><span class="line">        System.out.println(assistStack.pop()); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、二叉排序树节点的删除"><a href="#四、二叉排序树节点的删除" class="headerlink" title="四、二叉排序树节点的删除"></a>四、二叉排序树节点的删除</h1><blockquote><p>二叉排序树中的节点可以分为以下三种：</p><ul><li>叶子节点</li><li>有一棵子树的节点</li><li>有两棵子树的节点</li></ul><p>我们需要判断待删除节点为什么类型，然后根据节点类型进行删除操作。</p></blockquote><h2 id="4-1、编写用于搜索待删除节点和待删除节点父节点的方法"><a href="#4-1、编写用于搜索待删除节点和待删除节点父节点的方法" class="headerlink" title="4.1、编写用于搜索待删除节点和待删除节点父节点的方法"></a>4.1、编写用于搜索待删除节点和待删除节点父节点的方法</h2><h3 id="1、搜索待删除节点的方法"><a href="#1、搜索待删除节点的方法" class="headerlink" title="1、搜索待删除节点的方法"></a>1、搜索待删除节点的方法</h3><blockquote><p>搜索待删除节点，首先判断当前二叉排序树是否为空，若为空，直接返回，否则调用当前二叉排序树根节点的search方法</p><ul><li><p>如果当前传入的数据data的值刚好等于当前节点的data值，那么当前节点就是待删除节点，直接返回即可</p></li><li><p> 如果当前传入的数据data的值小于当前节点的值且当前节点的左子树为空，证明当前二叉排序树中没有要删除的节点；如果当前传入数据data值小于当前节点值且当前节点左子树不为空，那么调用当前节点左子树的search方法，向左递归查询。</p></li><li><p>同理，如果当前传入的数据data值大于当前节点值且当前节点右子树为空，证明当前二叉排序树没有要删除节点，此刻只能返回null；如果当前传入数据data值大于当前节点且当前节点右子树不为空，那么调用当前右子树的search方法，向右递归查询。</p></li></ul><p>代码如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * 根据节点的data数据搜索Node节点 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data 目标节点的data值 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果找到符合条件的node节点，那么返回该node节点 </span></span><br><span class="line"><span class="comment"> *         否则返回null </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">search</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(data == <span class="keyword">this</span>.data) &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(data &lt; <span class="keyword">this</span>.data) &#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.left == <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.left.search(data); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.right == <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.right.search(data); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、搜索待删除节点父节点的方法"><a href="#2、搜索待删除节点父节点的方法" class="headerlink" title="2、搜索待删除节点父节点的方法"></a>2、搜索待删除节点父节点的方法</h3><blockquote><p>搜索待删除节点的父节点的方法，同理先判断当前二叉排序树的根节点是否为空，若为空，返回null，否则调用当前二叉排序树的根节点的搜索待删除节点父节点（searchParent）的方法。</p><ul><li><p>如果当前节点的左子树不为空且当前节点左子树的data值等于用户传入的要检索的data值或者当前节点右子树不为空且当前节点右子树的data值等于用户传入的要检索的data值，那么证明当前节点就是待检索节点，返回当前节点。</p></li><li><p>如果传入的data值小于当前节点值且当前左子树不为空，那么调用当前左子节点的searchParent的方法。</p></li><li><p>同理，如果传入data值大于等于当前节点的data值且当前节点右子树不为空，那么调用当前节点右子节点的searchParent方法。</p></li><li><p>如果程序走到此处，证明没有找到待删除数据的父节点，此时返回null。</p></li></ul><p>代码如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * 查找要删除节点的父节点 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data 要删除的节点的数据 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 待删除节点的父节点 </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">searchParent</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>((<span class="keyword">this</span>.left != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.left.data == data) || (<span class="keyword">this</span>.right != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.right.data == data)) &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">//如果要查找的值小于当前节点值，且当前节点左子节点不为空 </span></span><br><span class="line">        <span class="comment">//递归向左 </span></span><br><span class="line">        <span class="keyword">if</span>(data &lt; <span class="keyword">this</span>.data &amp;&amp; <span class="keyword">this</span>.left != <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.left.searchParent(data); </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(data &gt;= <span class="keyword">this</span>.data &amp;&amp; <span class="keyword">this</span>.right != <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.right.searchParent(data); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2、删除叶子节点"><a href="#4-2、删除叶子节点" class="headerlink" title="4.2、删除叶子节点"></a>4.2、删除叶子节点</h2><blockquote><p>对于叶子节点，我们需要先找到待删除节点target和待删除节点的父节点parent，然后判断待删除叶子节点是其父节点的左子树还是右子树，如果为左子树，那么令parent.left = null，否则让parent.right = null。</p></blockquote><ul><li>二叉排序树中判断待删除节点是否为叶子节点的静态方法与Node类中判断传入节点为当前左子树/右子树的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * 判断node节点是否为叶子节点 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isLeaf</span><span class="params">(Node node)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * 判断传入节点是否为当前节点左子节点的方法 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLeft</span><span class="params">(Node target)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.left != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.left.data == target.data; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * 判断传入节点是否为当前节点右子节点的方法 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRight</span><span class="params">(Node target)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.right != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.right.data == target.data; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3、删除有一棵子树的节点"><a href="#4-3、删除有一棵子树的节点" class="headerlink" title="4.3、删除有一棵子树的节点"></a>4.3、删除有一棵子树的节点</h2><blockquote><p>对于有一棵子树的节点的删除，我们需要找到待删除节点和待删除节点的父节点，然后判断两个条件：1（待删除节点是其父节点的左子树还是右子树）、2（待删除节点有左子树还是右子树）</p><ul><li><p>如果待删除节点有左子树且为其父节点的左子树：此时让待删除节点的父节点的左子树等于待删除节点的左子树，即parent.left = target.left。</p></li><li><p> 如果待删除节点有左子树且为其父节点的右子树：此时根据二叉排序树的性质，待删除节点的左子树的数据要全部大于（等于）其父节点的数据，所以令待删除节点父节点的右子树等于待删除节点的左子树，即parent.right = target.left。</p></li><li><p>如果待删除节点有右子树且为其父节点的左子树：此时让parent.left = target.right</p></li><li><p>如果待删除节点有右子树且为其父节点的右子树，此时让parent.right = target.right</p></li></ul></blockquote><ul><li>Node类中判断传入节点是否为当前节点左/右子树的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * 判断传入节点是否为当前节点左子节点的方法 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLeft</span><span class="params">(Node target)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.left != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.left.data == target.data; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * 判断传入节点是否为当前节点右子节点的方法 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRight</span><span class="params">(Node target)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.right != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.right.data == target.data; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4、删除有两棵树的节点"><a href="#4-4、删除有两棵树的节点" class="headerlink" title="4.4、删除有两棵树的节点"></a>4.4、删除有两棵树的节点</h2><blockquote><p>对于有两棵子树的节点的删除：需要先取到待删除节点的右子树的最小节点的值，然后将数值最小的节点删除，最后将前面取到的最小节点的值赋值给待删除节点。</p></blockquote><ul><li>获取待删除节点右子树中最小节点的值并删除最小节点的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * 1 返回以node为根节点的二叉排序树的最小节点的值 </span></span><br><span class="line"><span class="comment"> * 2 删除以node为根节点的二叉排序树的最小节点 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 传入的节点（二叉排序树的根节点） </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回的以Node为根节点的二叉排序树的根节点的值 </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delTreeMin</span><span class="params">(Node node)</span> </span>&#123; </span><br><span class="line">    Node target = node; </span><br><span class="line">    <span class="comment">//循环的查找左节点，就能找到最小值 </span></span><br><span class="line">    <span class="keyword">while</span>(target.left != <span class="keyword">null</span>) &#123; </span><br><span class="line">        target = target.left; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//此时循环结束后，target指向最小节点 </span></span><br><span class="line">    <span class="comment">//删除最小节点 </span></span><br><span class="line">    delNode(target.data); </span><br><span class="line">    <span class="keyword">return</span> target.data; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>判断当前节点是否有两棵子树的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * 判断传入节点是否有左右子树的方法 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasTwoSon</span><span class="params">(Node node)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> node.left != <span class="keyword">null</span> &amp;&amp; node.right != <span class="keyword">null</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5、二叉排序树中根据节点数据删除节点的方法"><a href="#4-5、二叉排序树中根据节点数据删除节点的方法" class="headerlink" title="4.5、二叉排序树中根据节点数据删除节点的方法"></a>4.5、二叉排序树中根据节点数据删除节点的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * 根据data删除节点 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data 要删除的节点的data </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delNode</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">//1 先找到要删除的节点target </span></span><br><span class="line">        Node target = search(data); </span><br><span class="line">        <span class="comment">//1.1 如果要删除的节点不存在，直接返回 </span></span><br><span class="line">        <span class="keyword">if</span>(target == <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//1.2 如果当前树只有一个节点，且为待删除节点，那么直接置空 </span></span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123; </span><br><span class="line">            root = <span class="keyword">null</span>; </span><br><span class="line">            <span class="keyword">return</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//2 去找到target的父节点 </span></span><br><span class="line">        Node parent = searchParent(data); </span><br><span class="line">        <span class="comment">//2.1 如果要删除的节点是叶子节点 </span></span><br><span class="line">        <span class="keyword">if</span>(isLeaf(target)) &#123; </span><br><span class="line">            <span class="comment">//a 判断target是父节点的左子节点还是有子节点 </span></span><br><span class="line">            <span class="keyword">if</span>(parent.isLeft(target)) &#123; </span><br><span class="line">                <span class="comment">//如果是左子节点 </span></span><br><span class="line">                parent.left = <span class="keyword">null</span>; </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(parent.isRight(target)) &#123; </span><br><span class="line">                <span class="comment">//如果是右子节点 </span></span><br><span class="line">                parent.right = <span class="keyword">null</span>; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(hasTwoSon(target)) &#123; </span><br><span class="line">            <span class="comment">//2.2 如果要删除的节点有左右子树 </span></span><br><span class="line">            <span class="comment">//删除右子树最小节点，同时将最小节点的值取出来 </span></span><br><span class="line">            <span class="keyword">int</span> minData = delTreeMin(target.right); </span><br><span class="line">            target.data = minData; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">//2.3 删除只有一棵子树的节点 </span></span><br><span class="line">            <span class="comment">//如果待删除节点有左子节点 </span></span><br><span class="line">            <span class="keyword">if</span>(target.left != <span class="keyword">null</span>) &#123; </span><br><span class="line">                <span class="comment">//如果target是parent的左子节点 </span></span><br><span class="line">                <span class="keyword">if</span>(parent.isLeft(target)) &#123; </span><br><span class="line">                    parent.left = target.left; </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                    <span class="comment">//说明target是parent的右子节点 </span></span><br><span class="line">                    parent.right = target.left; </span><br><span class="line">                &#125; </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                <span class="comment">//待删除节点有右子节点 </span></span><br><span class="line">                <span class="comment">//如果target是parent的左节点 </span></span><br><span class="line">                <span class="keyword">if</span>(parent.isLeft(target)) &#123; </span><br><span class="line">                    parent.left = target.right; </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                    parent.right = target.right; </span><br><span class="line">                &#125; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、使用递归获取二叉树深度"><a href="#五、使用递归获取二叉树深度" class="headerlink" title="五、使用递归获取二叉树深度"></a>五、使用递归获取二叉树深度</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * 递归获取二叉树深度的方法 </span></span><br><span class="line"><span class="comment"> * 如果根为空：返回0 </span></span><br><span class="line"><span class="comment"> * 否则分别递归深入左右节点，返回深度 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root 二叉树的根节点 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 二叉树深度 </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTreeDepth</span><span class="params">(Node root)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> root == <span class="keyword">null</span> ? <span class="number">0</span> : (<span class="number">1</span> + Math.max(getTreeDepth(root.left), getTreeDepth(root.right))); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、测试"><a href="#六、测试" class="headerlink" title="六、测试"></a>六、测试</h1><h2 id="6-1、测试二叉排序树的生成和插入"><a href="#6-1、测试二叉排序树的生成和插入" class="headerlink" title="6.1、测试二叉排序树的生成和插入"></a>6.1、测试二叉排序树的生成和插入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Tree tree = <span class="keyword">new</span> Tree(<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">19</span>,-<span class="number">1</span>,<span class="number">26</span>,<span class="number">100</span>,<span class="number">777</span>,-<span class="number">1012</span>,<span class="number">222</span>,<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> data = arr[i];</span><br><span class="line">    Node node = <span class="keyword">new</span> Node(data);</span><br><span class="line">    tree.addNode(node);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;tree:&quot;</span>);</span><br><span class="line">Tree.show(tree.root);</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205232121.png" alt="image-20210205232120723"></p><h2 id="6-2、测试二叉排序树的删除"><a href="#6-2、测试二叉排序树的删除" class="headerlink" title="6.2、测试二叉排序树的删除"></a>6.2、测试二叉排序树的删除</h2><h3 id="1、删除叶子节点"><a href="#1、删除叶子节点" class="headerlink" title="1、删除叶子节点"></a>1、删除叶子节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;---------------------------------删除叶子节点-1012，删除前：&quot;</span>); </span><br><span class="line">Tree.show(tree.root); </span><br><span class="line">tree.delNode(-<span class="number">1012</span>); </span><br><span class="line">System.out.println(<span class="string">&quot;---------------------------------删除叶子节点-1012，删除后：&quot;</span>); </span><br><span class="line">Tree.show(tree.root);</span><br></pre></td></tr></table></figure><blockquote><p>删除前：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205232357.png" alt="image-20210205232357649"></p><blockquote><p>删除后：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205232418.png" alt="image-20210205232417944"></p><h3 id="2、删除有一棵子树的节点"><a href="#2、删除有一棵子树的节点" class="headerlink" title="2、删除有一棵子树的节点"></a>2、删除有一棵子树的节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;---------------------------------删除有一棵树的节点-1，删除前：&quot;</span>); </span><br><span class="line">Tree.show(tree.root); </span><br><span class="line">tree.delNode(-<span class="number">1</span>); </span><br><span class="line">System.out.println(<span class="string">&quot;---------------------------------删除有一棵树的节点-1，删除后：&quot;</span>); </span><br><span class="line">Tree.show(tree.root);</span><br></pre></td></tr></table></figure><blockquote><p>删除前：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205232621.png" alt="image-20210205232621385"></p><blockquote><p>删除后：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205232636.png" alt="image-20210205232635923"></p><h3 id="3、删除有两棵子树的节点"><a href="#3、删除有两棵子树的节点" class="headerlink" title="3、删除有两棵子树的节点"></a>3、删除有两棵子树的节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;---------------------------------删除有两棵子树的节点7，删除前：&quot;</span>); </span><br><span class="line">Tree.show(tree.root); </span><br><span class="line">tree.delNode(<span class="number">7</span>); </span><br><span class="line">System.out.println(<span class="string">&quot;---------------------------------删除有两棵子树的节点7，删除后：&quot;</span>); </span><br><span class="line">Tree.show(tree.root);</span><br></pre></td></tr></table></figure><blockquote><p>删除前：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205232821.png" alt="image-20210205232820859"></p><blockquote><p>删除后：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205232835.png" alt="image-20210205232834775"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端学习 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习手册（三）--配置文件、持久化与存储验证码</title>
      <link href="posts/3873979871.html"/>
      <url>posts/3873979871.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="七、Redis-conf配置文件"><a href="#七、Redis-conf配置文件" class="headerlink" title="七、Redis.conf配置文件"></a>七、Redis.conf配置文件</h1><h2 id="7-1、网络"><a href="#7-1、网络" class="headerlink" title="7.1、网络"></a>7.1、网络</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span>  127.0.0.1  <span class="comment"># 绑定的ip </span></span><br><span class="line">protected-mode  yes  <span class="comment">#  保护模式，默认开启</span></span><br><span class="line">port  6379  <span class="comment">#  端口设置</span></span><br></pre></td></tr></table></figure><h2 id="7-2、快照"><a href="#7-2、快照" class="headerlink" title="7.2、快照"></a>7.2、快照</h2><h3 id="1、持久化"><a href="#1、持久化" class="headerlink" title="1、持久化"></a>1、持久化</h3><blockquote><p>在规定时间内执行了多少操作，就会持久到文件（.rdb、.aof）</p><p><strong>由于redis是内存数据库，如果没有持久化，那么数据断电即失</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果900s内至少有一个key进行了修改，我们就进行持久化操作</span></span><br><span class="line">save 900 1</span><br><span class="line"><span class="comment"># 如果300s内至少有10个key进行了修改，我们就进行持久化操作</span></span><br><span class="line">save 300 10</span><br><span class="line"><span class="comment"># 如果60s内至少有一万个key进行了修改，我们就进行持久化操作</span></span><br><span class="line">save 60 10000</span><br><span class="line"><span class="comment"># 之后我们可以设置自己的</span></span><br></pre></td></tr></table></figure><h3 id="2、限制Clients"><a href="#2、限制Clients" class="headerlink" title="2、限制Clients"></a>2、限制Clients</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">maxclients   10000  <span class="comment"># 最多有10000个客户端能连接上此redis</span></span><br><span class="line"></span><br><span class="line">maxmemory    &lt;bytes&gt;  <span class="comment"># redis设置最大内存容量</span></span><br></pre></td></tr></table></figure><h3 id="3、内存达到上限的处理策略"><a href="#3、内存达到上限的处理策略" class="headerlink" title="3、内存达到上限的处理策略"></a>3、内存达到上限的处理策略</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory-policy   noeviction   <span class="comment"># 内存到达上限后的处理策略，默认不删除数据，直接报错</span></span><br></pre></td></tr></table></figure><blockquote><p>有六种策略：</p><p>1   volatile-lru:从已设置过期时间的内存数据集中挑选最近最少使用的数据 淘汰；</p><p>2    volatile-ttl: 从已设置过期时间的内存数据集中挑选即将过期的数据 淘汰；</p><p>3    volatile-random:从已设置过期时间的内存数据集中任意挑选数据 淘汰；</p><p>4    allkeys-lru:从内存数据集中挑选最近最少使用的数据 淘汰；</p><p>5     allkeys-random:从数据集中任意挑选数据 淘汰；</p><p>6     noenviction(驱逐)：禁止驱逐数据。</p></blockquote><h1 id="八、持久化"><a href="#八、持久化" class="headerlink" title="八、持久化"></a>八、持久化</h1><blockquote><p>Redis是一个内存数据库，如果不对Redis数据进行持久化操作，那么一旦服务器进程退出，服务器中的数据库状态也会消失。</p><p>Redis的持久化可分为RDB（Redis DataBase）和AOF（Append Only File）</p></blockquote><h2 id="8-1、RDB"><a href="#8-1、RDB" class="headerlink" title="8.1、RDB"></a>8.1、RDB</h2><h3 id="1、什么是RDB"><a href="#1、什么是RDB" class="headerlink" title="1、什么是RDB"></a>1、什么是RDB</h3><blockquote><p>在指定时间间隔将内存集的数据集快照写入磁盘，恢复时将快照文件直接读入内存。在进行写入的过程中，Redis会<strong>单独创建</strong>一个<strong>子进程</strong>，会先将数据写入一个临时文件中，待持久化过程结束后，再将这个临时文件替换上次持久化好的文件。整个过程中，<strong>主线程不进行任何IO操作</strong>，确保了极高的性能。</p><p>如果要进行大规模的数据恢复，且对于数据恢复完整性并不是特别敏感，则RDB方式要比AOF方式更加高效，Rdb的<strong>缺点</strong>是<strong>最后一次持久化后的数据可能丢失</strong>，Redis<strong>默认使用RDB进行持久化操作</strong>。</p></blockquote><h3 id="2、RDB保存的文件是dump-rdb"><a href="#2、RDB保存的文件是dump-rdb" class="headerlink" title="2、RDB保存的文件是dump.rdb"></a>2、RDB保存的文件是dump.rdb</h3><h3 id="3、优点："><a href="#3、优点：" class="headerlink" title="3、优点："></a>3、优点：</h3><ul><li>适合大规模数据恢复</li><li>对数据完整性要求不高</li></ul><h3 id="4、缺点："><a href="#4、缺点：" class="headerlink" title="4、缺点："></a>4、缺点：</h3><ul><li>需要一定的时间间隔进程操作，如果redis意外宕机，最后一次修改数据会消失</li><li>fork进程时会占用一定空间</li></ul><h3 id="5、触发机制"><a href="#5、触发机制" class="headerlink" title="5、触发机制"></a>5、触发机制</h3><ul><li>save的规则满足的条件下，会自动触发RDB规则</li><li>执行flashall命令，会触发RDB规则</li><li>退出redis，也会产生rdb文件</li><li>备份生成一个dump.rdb文件</li></ul><h3 id="6、如何恢复rdb文件"><a href="#6、如何恢复rdb文件" class="headerlink" title="6、如何恢复rdb文件"></a>6、如何恢复rdb文件</h3><blockquote><p>只需要将rdb文件放在redis启动目录下即可，redis启动时会检查并恢复dump.rdb中的数据</p></blockquote><h2 id="8-2、AOF"><a href="#8-2、AOF" class="headerlink" title="8.2、AOF"></a>8.2、AOF</h2><h3 id="1、什么是AOF"><a href="#1、什么是AOF" class="headerlink" title="1、什么是AOF?"></a>1、什么是AOF?</h3><blockquote><p>以日志的形式来记录每个写操作，将Redis执行过的所有指令<strong>（读操作不记录）</strong>记录下来，只许追加文件但不可以改写文件，redis启动之初会读取文件重新构建数据，换言之，redis重启的话就要根据日志文件的内容将写指令<strong>从头到尾</strong>执行一次以<strong>完成数据的恢复工作</strong></p></blockquote><h3 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><h1 id="九、Redis实现手机验证码"><a href="#九、Redis实现手机验证码" class="headerlink" title="九、Redis实现手机验证码"></a>九、Redis实现手机验证码</h1><h2 id="9-1、实现原理"><a href="#9-1、实现原理" class="headerlink" title="9.1、实现原理"></a>9.1、实现原理</h2><ul><li>使用工具类生成4位或6位的数字验证码</li><li>校验手机号为合法后通过短信微服务发送验证码</li><li>将手机号作为key，验证码作为value存入redis中，并设置一个过期时间</li><li>用户进行登录/注册时通过key（手机号）到redis中取出验证码</li><li>进行验证码比对，若匹配则登录/注册通过，随机删除redis中的key-value</li></ul><h2 id="9-2、实现"><a href="#9-2、实现" class="headerlink" title="9.2、实现"></a>9.2、实现</h2><h3 id="1、校验手机号是否合法的工具类"><a href="#1、校验手机号是否合法的工具类" class="headerlink" title="1、校验手机号是否合法的工具类"></a>1、校验手机号是否合法的工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Pattern NUMBER_PATTERN = Pattern.compile(<span class="string">&quot;^[1][3,4,5,7,8,9][0-9]&#123;9&#125;$&quot;</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号验证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMobile</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证手机号的正则表达式</span></span><br><span class="line">        <span class="keyword">return</span> NUMBER_PATTERN.matcher(str).matches();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、生成验证码的工具类"><a href="#2、生成验证码的工具类" class="headerlink" title="2、生成验证码的工具类"></a>2、生成验证码的工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DecimalFormat fourdf = <span class="keyword">new</span> DecimalFormat(<span class="string">&quot;0000&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DecimalFormat sixdf = <span class="keyword">new</span> DecimalFormat(<span class="string">&quot;000000&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFourBitRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> fourdf.format(random.nextInt(<span class="number">10000</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSixBitRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sixdf.format(random.nextInt(<span class="number">1000000</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给定数组，抽取n个数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList <span class="title">getRandom</span><span class="params">(List list, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> HashMap&lt;Object, Object&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成随机数字并存入HashMap</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> number = random.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">hashMap.put(number, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从HashMap导入数组</span></span><br><span class="line">Object[] robjs = hashMap.values().toArray();</span><br><span class="line"></span><br><span class="line">ArrayList r = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组并打印数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">r.add(list.get((<span class="keyword">int</span>) robjs[i]));</span><br><span class="line">System.out.print(list.get((<span class="keyword">int</span>) robjs[i]) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、短信微服务Controller"><a href="#3、短信微服务Controller" class="headerlink" title="3、短信微服务Controller"></a>3、短信微服务Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;短信管理控制器&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/sms&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiSmsController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsService smsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 根据传入的手机号来生成并发送验证码</span></span><br><span class="line"><span class="comment">     * 并将验证码存入redis缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mobile 手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;send/&#123;mobile&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;一个用于生成验证码，并将验证码存入redis中的接口&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">getCode</span><span class="params">(<span class="meta">@PathVariable(&quot;mobile&quot;)</span> String mobile)</span> <span class="keyword">throws</span> ClientException </span>&#123;</span><br><span class="line">        <span class="comment">//0 校验手机号是否合法</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(mobile) || !FormUtils.isMobile(mobile)) &#123;</span><br><span class="line">            <span class="comment">//如果手机号为空或手机号不合法</span></span><br><span class="line">            log.error(<span class="string">&quot;手机号不合法！&quot;</span>);</span><br><span class="line">            <span class="comment">// new GrainException(ResultCodeEnum.LOGIN_MOBILE_ERROR);</span></span><br><span class="line">            <span class="keyword">return</span> R.error().message(<span class="string">&quot;手机号不正确！&quot;</span>).code(<span class="number">28001</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1 使用工具类生成生成验证码</span></span><br><span class="line">        String checkCode = RandomUtils.getSixBitRandom();</span><br><span class="line">        <span class="comment">//2 发送验证码</span></span><br><span class="line">        smsService.send(mobile,checkCode);</span><br><span class="line">        <span class="comment">//3 存储验证码到redis</span></span><br><span class="line">        <span class="comment">//使用redisTemplate，使用手机号作为键，保存时长为5分钟</span></span><br><span class="line">        redisTemplate.opsForValue().set(mobile,checkCode,<span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> R.ok().message(<span class="string">&quot;短信发送成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、短信微服务Service层"><a href="#4、短信微服务Service层" class="headerlink" title="4、短信微服务Service层"></a>4、短信微服务Service层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsServiceImpl</span> <span class="keyword">implements</span> <span class="title">SmsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsProperties smsProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String mobile, String checkCode)</span> <span class="keyword">throws</span> ClientException, ClientException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用短信发送SDK，创建client对象</span></span><br><span class="line">        DefaultProfile profile = DefaultProfile.getProfile(</span><br><span class="line">                smsProperties.getRegionId(),</span><br><span class="line">                smsProperties.getKeyId(),</span><br><span class="line">                smsProperties.getKeySecret());</span><br><span class="line">        IAcsClient client = <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装请求参数</span></span><br><span class="line">        CommonRequest request = <span class="keyword">new</span> CommonRequest();</span><br><span class="line">        request.setSysMethod(MethodType.POST);</span><br><span class="line">        request.setSysDomain(<span class="string">&quot;dysmsapi.aliyuncs.com&quot;</span>);</span><br><span class="line">        request.setSysVersion(<span class="string">&quot;2017-05-25&quot;</span>);</span><br><span class="line">        request.setSysAction(<span class="string">&quot;SendSms&quot;</span>);</span><br><span class="line">        request.putQueryParameter(<span class="string">&quot;RegionId&quot;</span>, smsProperties.getRegionId());</span><br><span class="line">        request.putQueryParameter(<span class="string">&quot;PhoneNumbers&quot;</span>, mobile);</span><br><span class="line">        request.putQueryParameter(<span class="string">&quot;SignName&quot;</span>, smsProperties.getSignName());</span><br><span class="line">        request.putQueryParameter(<span class="string">&quot;TemplateCode&quot;</span>, smsProperties.getTemplateCode());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        param.put(<span class="string">&quot;code&quot;</span>, checkCode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将包含验证码的集合转换为json字符串</span></span><br><span class="line">        Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">        request.putQueryParameter(<span class="string">&quot;TemplateParam&quot;</span>, gson.toJson(param));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送短信</span></span><br><span class="line">        CommonResponse response = client.getCommonResponse(request);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到json字符串格式的响应结果</span></span><br><span class="line">        String data = response.getData();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析json字符串格式的响应结果</span></span><br><span class="line">        HashMap&lt;String, String&gt; map = gson.fromJson(data, HashMap.class);</span><br><span class="line">        String code = map.get(<span class="string">&quot;Code&quot;</span>);</span><br><span class="line">        String message = map.get(<span class="string">&quot;Message&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置参考：短信服务-&gt;系统设置-&gt;国内消息设置</span></span><br><span class="line">        <span class="comment">//错误码参考：</span></span><br><span class="line">        <span class="comment">//https://help.aliyun.com/document_detail/101346.html?spm=a2c4g.11186623.6.613.3f6e2246sDg6Ry</span></span><br><span class="line">        <span class="comment">//控制所有短信流向限制（同一手机号：一分钟一条、一个小时五条、一天十条）</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;isv.BUSINESS_LIMIT_CONTROL&quot;</span>.equals(code)) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;短信发送过于频繁 &quot;</span> + <span class="string">&quot;【code】&quot;</span> + code + <span class="string">&quot;, 【message】&quot;</span> + message);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GrainException(ResultCodeEnum.SMS_SEND_ERROR_BUSINESS_LIMIT_CONTROL);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;OK&quot;</span>.equals(code)) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;短信发送失败 &quot;</span> + <span class="string">&quot; - code: &quot;</span> + code + <span class="string">&quot;, message: &quot;</span> + message);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GrainException(ResultCodeEnum.SMS_SEND_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、用户注册微服务Controller"><a href="#5、用户注册微服务Controller" class="headerlink" title="5、用户注册微服务Controller"></a>5、用户注册微服务Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;会员管理控制器&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/ucenter/member&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiMemberController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MemberService memberService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;会员注册&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;register&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">register</span><span class="params">(<span class="meta">@RequestBody</span> RegisterVo registerVo)</span> </span>&#123;</span><br><span class="line">        memberService.register(registerVo);</span><br><span class="line">        <span class="keyword">return</span> R.ok().message(<span class="string">&quot;注册成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、用户注册微服务Service"><a href="#6、用户注册微服务Service" class="headerlink" title="6、用户注册微服务Service"></a>6、用户注册微服务Service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">MemberMapper</span>, <span class="title">Member</span>&gt; <span class="keyword">implements</span> <span class="title">MemberService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MemberMapper memberMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(RegisterVo registerVo)</span> </span>&#123;</span><br><span class="line">        String nickname = registerVo.getNickname();</span><br><span class="line">        String mobile = registerVo.getMobile();</span><br><span class="line">        String code = registerVo.getCode();</span><br><span class="line">        String password = registerVo.getPassword();</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(mobile) || !FormUtils.isMobile(mobile)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GrainException(ResultCodeEnum.LOGIN_MOBILE_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(nickname) || StringUtils.isBlank(password) || StringUtils.isBlank(code)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GrainException(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//校验验证码</span></span><br><span class="line">        String checkCode = (String)redisTemplate.opsForValue().get(mobile);</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.equals(code,checkCode)) &#123;</span><br><span class="line">            <span class="comment">//如果用户输入验证码和redis中验证码不相等</span></span><br><span class="line">            <span class="comment">//校验失败</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GrainException(ResultCodeEnum.CODE_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断用户手机号是否注册</span></span><br><span class="line">        QueryWrapper&lt;Member&gt; memberQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        memberQueryWrapper.eq(<span class="string">&quot;mobile&quot;</span>,mobile);</span><br><span class="line">        Integer result = memberMapper.selectCount(memberQueryWrapper);</span><br><span class="line">        <span class="keyword">if</span>(result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GrainException(ResultCodeEnum.REGISTER_MOBLE_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册</span></span><br><span class="line">        Member member = <span class="keyword">new</span> Member();</span><br><span class="line">        member.setNickname(nickname);</span><br><span class="line">        member.setMobile(mobile);</span><br><span class="line">        <span class="comment">//密码需要加密</span></span><br><span class="line">        member.setPassword(MD5.encrypt(password));</span><br><span class="line">        member.setAvatar(<span class="string">&quot;http://tiebapic.baidu.com/forum/w%3D580/sign=21e19fd45010b912bfc1f6f6f3fcfcb5/c0d5d04b20a44623e5077d0d8f22720e0ef3d78e.jpg&quot;</span>);</span><br><span class="line">        member.setDisabled(<span class="keyword">false</span>);</span><br><span class="line">        memberMapper.insert(member);</span><br><span class="line">        <span class="comment">//将redis缓存中的验证码删除</span></span><br><span class="line">        redisTemplate.delete(mobile);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-3、测试"><a href="#9-3、测试" class="headerlink" title="9.3、测试"></a>9.3、测试</h2><blockquote><p>启动短信微服务和用户注册微服务，使用Swagger进行测试</p></blockquote><h3 id="1、使用短信微服务向指定手机号发送验证码"><a href="#1、使用短信微服务向指定手机号发送验证码" class="headerlink" title="1、使用短信微服务向指定手机号发送验证码"></a>1、使用短信微服务向指定手机号发送验证码</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204000422.png" alt="image-20210204000422442"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204000623.png" alt="image-20210204000623694"></p><h3 id="2、查看Redis缓存和短信"><a href="#2、查看Redis缓存和短信" class="headerlink" title="2、查看Redis缓存和短信"></a>2、查看Redis缓存和短信</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204000652.png" alt="image-20210204000652056"></p><blockquote><p>短信</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204001029.png" alt="image-20210204001029230"></p><h3 id="3、打开用户中心微服务进行测试"><a href="#3、打开用户中心微服务进行测试" class="headerlink" title="3、打开用户中心微服务进行测试"></a>3、打开用户中心微服务进行测试</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204000749.png" alt="image-20210204000749533"></p><h3 id="4、结果"><a href="#4、结果" class="headerlink" title="4、结果"></a>4、结果</h3><blockquote><p>swagger提示注册成功</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204000814.png" alt="image-20210204000813999"></p><blockquote><p>redis缓存中该键值对被删除</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204000908.png" alt="image-20210204000908928"></p><blockquote><p>数据库</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204000944.png" alt="image-20210204000944206"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端学习 </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习手册（二）--事务、Jedis和Spring Boot整合Redis</title>
      <link href="posts/2589988718.html"/>
      <url>posts/2589988718.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="四、事务"><a href="#四、事务" class="headerlink" title="四、事务"></a>四、事务</h1><h2 id="4-1、介绍"><a href="#4-1、介绍" class="headerlink" title="4.1、介绍"></a>4.1、介绍</h2><blockquote><p>Redis事务是一个单独的隔离过程：事务中的所有命令都会被序列化、按顺序地执行。事务在执行过程中不会被其他客户端发送来的命令请求所打断，redis事务的主要作用就是串联多个命令防止别的命令插队。</p></blockquote><h2 id="4-2、Redis事务的特性"><a href="#4-2、Redis事务的特性" class="headerlink" title="4.2、Redis事务的特性"></a>4.2、Redis事务的特性</h2><blockquote><p>单独的隔离操作：</p><ul><li>事务中的所有命令都会被序列化、按顺序地执行。事务在执行过程中不会被其他客户端发送来的命令请求所打断</li></ul></blockquote><blockquote><p>没有隔离级别的概念</p><ul><li>队列中的命令没有提交之前都不会实际的被执行。</li></ul></blockquote><blockquote><p>不保证原子性</p><ul><li>Redis同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</li></ul></blockquote><h2 id="4-3、使用"><a href="#4-3、使用" class="headerlink" title="4.3、使用"></a>4.3、使用</h2><ul><li>开启事务（multi）</li><li>命令入队</li><li>执行事务（exec）</li></ul><blockquote><p>正常执行事务</p></blockquote><ul><li>使用redis事务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi    <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1   <span class="comment"># QUEUED代表命令入队列</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k4 1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr k4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span>       <span class="comment"># exec代表执行事务</span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) <span class="string">&quot;v1&quot;</span></span><br><span class="line">4) OK</span><br><span class="line">5) OK</span><br><span class="line">6) (<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure><blockquote><p>放弃事务（discard）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby k3 50</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; decrby k3 26</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; DISCARD</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">(nil)         <span class="comment">#放弃事务后发现k3值为null</span></span><br></pre></td></tr></table></figure><blockquote><p>（报告错误）编译型异常（代码/命令有问题），<strong>事务中所有命令都不会被执行</strong></p></blockquote><blockquote><p>（执行错误）运行时异常（例如：1/0或空指针），如果事务队列中存在运行时异常，那么这条发生异常的命令不会被执行，其他命令继续执行（redis事务没有一致性），错误命令抛出异常</p></blockquote><blockquote><p>原子性：指事务的不可分割性，一个事务的所有操作要么不间断地全部被执行，要么一个也没有执行。</p></blockquote><h2 id="4-4、注意点"><a href="#4-4、注意点" class="headerlink" title="4.4、注意点"></a>4.4、注意点</h2><blockquote><p><strong>Redis单条命令是保证原子性的，但是Redis的事务是不保证原子性的！</strong></p></blockquote><h2 id="4-5、监控"><a href="#4-5、监控" class="headerlink" title="4.5、监控"></a>4.5、监控</h2><h3 id="1、悲观锁"><a href="#1、悲观锁" class="headerlink" title="1、悲观锁"></a>1、悲观锁</h3><ul><li>无论做什么都加锁（会影响性能）</li></ul><h3 id="2、乐观锁"><a href="#2、乐观锁" class="headerlink" title="2、乐观锁"></a>2、乐观锁</h3><ul><li>认为什么时候都不会出问题，所以不会上锁！更新数据时去判断以下期间有没有人修改过此数据。</li><li>mysql中：获取version，比较version</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203224610.png" alt="image-20210203224610835"></p><h3 id="3、使用watch来监控"><a href="#3、使用watch来监控" class="headerlink" title="3、使用watch来监控"></a>3、使用watch来监控</h3><blockquote><p>在执行multi之前，先执行watch key1 [key2]，可以监视一个或多个key，如果在事务执行之前这个（或这些）key被其他命令所改动，那么事务将被<strong>打断</strong></p></blockquote><ul><li>正常执行成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money       <span class="comment">#使用watch监视money对象</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby out 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 80</span><br><span class="line">2) (<span class="built_in">integer</span>) 20</span><br></pre></td></tr></table></figure><h1 id="五、Jedis"><a href="#五、Jedis" class="headerlink" title="五、Jedis"></a>五、Jedis</h1><blockquote><p>JRedis是Redis官方推荐的java连接开发工具，使用java操作redis的中间件，类似JDBCDriver</p></blockquote><h2 id="5-1、常用API"><a href="#5-1、常用API" class="headerlink" title="5.1、常用API"></a>5.1、常用API</h2><h3 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入Jedis的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、编码测试"><a href="#2、编码测试" class="headerlink" title="2、编码测试"></a>2、编码测试</h3><blockquote><p>使用Jedis连接Redis</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1 new 一个Jedis对象，构造参数填入地址和端口号</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//jedis 的函数就是我们之前学习的所有命令</span></span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203225023.png" alt="image-20210203225023793"></p><h3 id="3、操作命令"><a href="#3、操作命令" class="headerlink" title="3、操作命令"></a>3、操作命令</h3><blockquote><p>Jedis的方法和上面的命令几乎一样，这里列出Redis-key的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;清空指定数据库中的数据：&quot;</span> + jedis.flushDB());</span><br><span class="line">System.out.println(<span class="string">&quot;清空所有数据：&quot;</span> + jedis.flushAll());</span><br><span class="line">System.out.println(<span class="string">&quot;新增&lt;&#x27;username&#x27;,&#x27;wuhu&#x27;&gt;的键值对：&quot;</span> + jedis.set(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;wuhu&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;新增&lt;&#x27;password&#x27;,&#x27;qifei&#x27;&gt;的键值对：&quot;</span> + jedis.set(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;qifei&quot;</span>));</span><br><span class="line">System.out.print(<span class="string">&quot;系统中所有的键如下：&quot;</span>);</span><br><span class="line">Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">System.out.println(keys);</span><br><span class="line">System.out.println(<span class="string">&quot;删除键password：&quot;</span> + jedis.del(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;判断键password是否存在：&quot;</span> + jedis.exists(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;查看键username所存储的值的类型&quot;</span> + jedis.type(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;随机返回key空间的一个&quot;</span> + jedis.randomKey());</span><br><span class="line">System.out.println(<span class="string">&quot;重命名key：&quot;</span> + jedis.rename(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;取出改后的userName：&quot;</span> + jedis.get(<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;按索引查询：&quot;</span> + jedis.select(<span class="number">0</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;返回当前数据库中key的数量：&quot;</span> + jedis.dbSize());</span><br><span class="line">System.out.println(<span class="string">&quot;删除当前选择数据库中所有的key：&quot;</span> + jedis.flushDB());</span><br><span class="line">System.out.println(<span class="string">&quot;返回当前数据库中key的数量：&quot;</span> + jedis.dbSize());</span><br><span class="line">System.out.println(<span class="string">&quot;删除所有数据库中那个所有key：&quot;</span> + jedis.flushAll());</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203225132.png" alt="image-20210203225132042"></p><blockquote><p>断开连接</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><h2 id="5-2、使用Jedis模拟Redis中的事务"><a href="#5-2、使用Jedis模拟Redis中的事务" class="headerlink" title="5.2、使用Jedis模拟Redis中的事务"></a>5.2、使用Jedis模拟Redis中的事务</h2><h3 id="1、模拟事务成功执行"><a href="#1、模拟事务成功执行" class="headerlink" title="1、模拟事务成功执行"></a>1、模拟事务成功执行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">jsonObject.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;wuhu&quot;</span>);</span><br><span class="line">jsonObject.put(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">String jsonStr = jsonObject.toJSONString();</span><br><span class="line"><span class="comment">//开启事务</span></span><br><span class="line">Transaction multi = jedis.multi();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//将方法放入执行队列</span></span><br><span class="line">    multi.set(<span class="string">&quot;user1&quot;</span>,jsonStr);</span><br><span class="line">    multi.set(<span class="string">&quot;user2&quot;</span>,jsonStr);</span><br><span class="line">    multi.set(<span class="string">&quot;user3&quot;</span>,jsonStr);</span><br><span class="line">    multi.set(<span class="string">&quot;user4&quot;</span>,jsonStr);</span><br><span class="line">    <span class="comment">//执行事务</span></span><br><span class="line">    multi.exec();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="comment">//如果出现异常，就放弃事务</span></span><br><span class="line">    multi.discard();</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//如果没有异常，那么可以输出值</span></span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;user1&quot;</span>));</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;user2&quot;</span>));</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;user3&quot;</span>));</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;user4&quot;</span>));</span><br><span class="line">    jedis.close();<span class="comment">//关闭连接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203225306.png" alt="image-20210203225306161"></p><h3 id="2、模拟事务出现异常的情况"><a href="#2、模拟事务出现异常的情况" class="headerlink" title="2、模拟事务出现异常的情况"></a>2、模拟事务出现异常的情况</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">jedis.flushAll();<span class="comment">//先清除所有键值对</span></span><br><span class="line">JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">jsonObject.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;wuhu&quot;</span>);</span><br><span class="line">jsonObject.put(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">String jsonStr = jsonObject.toJSONString();</span><br><span class="line"><span class="comment">//开启事务</span></span><br><span class="line">Transaction multi = jedis.multi();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//将方法放入执行队列</span></span><br><span class="line">    multi.set(<span class="string">&quot;user1&quot;</span>,jsonStr);</span><br><span class="line">    multi.set(<span class="string">&quot;user2&quot;</span>,jsonStr);</span><br><span class="line">    multi.set(<span class="string">&quot;user3&quot;</span>,jsonStr);</span><br><span class="line">    multi.set(<span class="string">&quot;user4&quot;</span>,jsonStr);</span><br><span class="line">    <span class="comment">//模拟异常</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行事务</span></span><br><span class="line">    multi.exec();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="comment">//如果出现异常，就放弃事务</span></span><br><span class="line">    multi.discard();</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//如果没有异常，那么可以输出值</span></span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;user1&quot;</span>));</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;user2&quot;</span>));</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;user3&quot;</span>));</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;user4&quot;</span>));</span><br><span class="line">    jedis.close();<span class="comment">//关闭连接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203225346.png" alt="image-20210203225346130"></p><h1 id="六、Spring-Boot整合Redis"><a href="#六、Spring-Boot整合Redis" class="headerlink" title="六、Spring Boot整合Redis"></a>六、Spring Boot整合Redis</h1><blockquote><p>Spring Boot Data redis提供了<strong>RedisTemplate</strong>和<strong>StringTemplate</strong>，其中StringTemplate是RedisTemplate的子类，RedisTemplate中两个泛型都是Object，意味着存储的key和value都可以是一个对象，而StringTemplate两个泛型都是String</p><p><strong>注：对象的保存需要序列化</strong></p></blockquote><h2 id="6-1、引入依赖"><a href="#6-1、引入依赖" class="headerlink" title="6.1、引入依赖"></a>6.1、引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 操作redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在springboot2.x后，原来的jedis被替换为了lecture</li><li>jedis：采用直连，多线程操作不安全，需要使用连接池，BIO</li><li>lecture：底层使用netty，不存在性能不安全的情况,NIO</li></ul><h2 id="6-2、配置"><a href="#6-2、配置" class="headerlink" title="6.2、配置"></a>6.2、配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><h2 id="6-3、测试"><a href="#6-3、测试" class="headerlink" title="6.3、测试"></a>6.3、测试</h2><blockquote><p>分析源码可知，Spring Boot已经为我们注册了一个<strong>key和value均为Object</strong>的RedisTemplate，我们可以自己注册一个<strong>RedisTemplate</strong>来替换Spring Boot为我们自动注入的RedisTemplate</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203225717.png" alt="image-20210203225717224"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//redisTemplate</span></span><br><span class="line">    <span class="comment">//opsForValue 操作字符串，类似String</span></span><br><span class="line">    <span class="comment">//opsForList  操作list，类似List</span></span><br><span class="line">    <span class="comment">//opsForSet   操作Set，类似Set</span></span><br><span class="line">    <span class="comment">//opsForZset  操作Zset，类似Zset</span></span><br><span class="line">    <span class="comment">//opsForHash  操作Hash，类似Hash</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//基本操作已经封装到redisTemplate中</span></span><br><span class="line">    <span class="comment">//        RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span></span><br><span class="line">    <span class="comment">//        connection.flushAll();</span></span><br><span class="line">    <span class="comment">//        connection.flushDb();</span></span><br><span class="line"></span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Spring Boot 默认使用JDK序列化，JDK序列化会使字符转义，我们可以自定义配置类，使用JSON进行序列化。</p></blockquote><h2 id="6-4、自定义RedisTemplate"><a href="#6-4、自定义RedisTemplate" class="headerlink" title="6.4、自定义RedisTemplate"></a>6.4、自定义RedisTemplate</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在自定义的RedisTemplate中，将键从Object换为String，同时使用JSON序列化对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       User user = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">&quot;芜湖&quot;</span>,<span class="string">&quot;起飞&quot;</span>);</span><br><span class="line">       String userJson = JSON.toJSONString(user);</span><br><span class="line">       redisTemplate.opsForValue().set(<span class="string">&quot;user2&quot;</span>,userJson);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="1、使用JDK序列化对象"><a href="#1、使用JDK序列化对象" class="headerlink" title="1、使用JDK序列化对象"></a>1、使用JDK序列化对象</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203231614.png" alt="image-20210203231614676"></p><h3 id="2、使用JSON序列化对象"><a href="#2、使用JSON序列化对象" class="headerlink" title="2、使用JSON序列化对象"></a>2、使用JSON序列化对象</h3><blockquote><p>删除Redis中的键值对，引入我们自定义的RedisTemplate，重新执行上面的方法。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203231754.png" alt="image-20210203231753977"></p><h2 id="6-5、RedisUtils"><a href="#6-5、RedisUtils" class="headerlink" title="6.5、RedisUtils"></a>6.5、RedisUtils</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hzx.springboot_redis.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// =============================common============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="keyword">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================String=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="keyword">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ================================Map=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hmget</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... item)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================set=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setRemove</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ===============================list=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lGet</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key, <span class="keyword">long</span> index, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端学习 </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习手册（一）--NoSQL、redis入门及基本数据类型</title>
      <link href="posts/2005124203.html"/>
      <url>posts/2005124203.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、NoSQL"><a href="#一、NoSQL" class="headerlink" title="一、NoSQL"></a>一、NoSQL</h1><blockquote><p>NoSQL = Not Only SQL，不仅仅是SQL，泛指非关系数据库</p><p>使用场景：数据变化不是很频繁，访问量相对较大</p></blockquote><h1 id="二、Redis入门"><a href="#二、Redis入门" class="headerlink" title="二、Redis入门"></a>二、Redis入门</h1><h2 id="2-1、概述"><a href="#2-1、概述" class="headerlink" title="2.1、概述"></a>2.1、概述</h2><ul><li><p>Redis指Remote Dictionary Server，即<strong>远程字典服务</strong></p></li><li><p>一个开源的由ANSI C语言编写，支持网络、可基于内存也可持久化的日志型Key-value数据库，支持多种语言</p></li><li><p>redis会周期性将更新的数据写入磁盘或者把修改操作写入追加的记录文件</p></li></ul><h2 id="2-2、特性"><a href="#2-2、特性" class="headerlink" title="2.2、特性"></a>2.2、特性</h2><ul><li>开源</li><li>支持多种语言</li><li>支持持久化、集群和事务</li></ul><h2 id="2-3、基础知识"><a href="#2-3、基础知识" class="headerlink" title="2.3、基础知识"></a>2.3、基础知识</h2><ul><li>redis有16个数据库，默认使用第1个数据库（下标为0）</li><li>使用select可以切换数据库，使用DBSIZE可以查看当前数据库的数据数量</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203220924.png"></p><ul><li>清除当前数据库：flushdb</li><li>清楚所有数据库：flushall</li><li>redis是单线程的，redis的瓶颈是根据机器的内存和网络带宽。</li></ul><h1 id="三、五大数据类型"><a href="#三、五大数据类型" class="headerlink" title="三、五大数据类型"></a>三、五大数据类型</h1><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203221317.png" alt="image-20210203221317019"></p><h2 id="3-1、Redis-key"><a href="#3-1、Redis-key" class="headerlink" title="3.1、Redis-key"></a>3.1、Redis-key</h2><blockquote><p>EXISTS 键名，如果有这个键，返回1，否则返回0<br>exists 键名</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203221451.png" alt="image-20201011214514520"></p><h2 id="3-2、String（字符串）"><a href="#3-2、String（字符串）" class="headerlink" title="3.2、String（字符串）"></a>3.2、String（字符串）</h2><h3 id="1、append-键名-要追加的内容："><a href="#1、append-键名-要追加的内容：" class="headerlink" title="1、append 键名 要追加的内容："></a>1、append 键名 要追加的内容：</h3><blockquote><p>往已有的键值对的值中拼接新内容，如果没有该键，那么就新建一个键值对（相当于set）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> name hello</span><br><span class="line">get name</span><br><span class="line">输出hello</span><br><span class="line">append name world</span><br><span class="line">输出10--&gt;返回拼接后值的长度</span><br><span class="line">get name</span><br><span class="line">输出helloworld</span><br></pre></td></tr></table></figure><ul><li>先设置一个键值对，即name–&gt;hello，然后往该键值对的值中拼接字符world，最后使用get name查看结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142557.png" alt="image-20201011222603013"></p><h3 id="2、strlen-键名-："><a href="#2、strlen-键名-：" class="headerlink" title="2、strlen 键名 ："></a>2、strlen 键名 ：</h3><blockquote><p>获取该键值对中值的长度</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strlen name</span><br><span class="line">输出10</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142558.png" alt="image-20201011222916865"></p><h3 id="3、incr-键名："><a href="#3、incr-键名：" class="headerlink" title="3、incr 键名："></a>3、incr 键名：</h3><blockquote><p>针对数值使用，让数值的值+1</p></blockquote><ul><li>初始化一个键值对（views–0），然后使用incr 命令让其+1</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> views 0</span><br><span class="line">输出0</span><br><span class="line">incr views</span><br><span class="line">get views</span><br><span class="line">输出1</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142559.png" alt="image-20201011224023734"></p><h3 id="4、decr-键名："><a href="#4、decr-键名：" class="headerlink" title="4、decr 键名："></a>4、decr 键名：</h3><blockquote><p>同针对数值使用，让该数值的值-1</p></blockquote><ul><li>将上面的views从3减到2</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">decr views</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142600.png" alt="image-20201011224227673"></p><h3 id="5、incrby-decrby："><a href="#5、incrby-decrby：" class="headerlink" title="5、incrby/decrby："></a>5、incrby/decrby：</h3><blockquote><p>类似incr/decr，多了个步长</p></blockquote><ul><li>将views的值从2直接加到12（步长设置为10），然后把views的值从12降到7（步长为5）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">incrby views 10</span><br><span class="line">decrby views 5</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142601.png" alt="image-20201011224913175"></p><h3 id="6、GETRANGE-键名-起始坐标-终止坐标（类似java中String类的substring）"><a href="#6、GETRANGE-键名-起始坐标-终止坐标（类似java中String类的substring）" class="headerlink" title="6、GETRANGE 键名 起始坐标 终止坐标（类似java中String类的substring）"></a>6、GETRANGE 键名 起始坐标 终止坐标（类似java中String类的substring）</h3><blockquote><p>截取（终止坐标 - 起始坐标） + 1个字符，闭区间[起始,终止]</p></blockquote><ul><li>设置一个键值对，然后截取该值的一部分</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142602.png" alt="image-20201011225254904"></p><blockquote><p>使用GETRANGE 键名 0  -1获取值对应的整个字符串，相当于get 键名</p></blockquote><ul><li>获取该键值对值的全部内容</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142603.png" alt="image-20201011225441783"></p><h3 id="7、SETRANGE-键名-偏移量n-要替换的字符串"><a href="#7、SETRANGE-键名-偏移量n-要替换的字符串" class="headerlink" title="7、SETRANGE 键名 偏移量n 要替换的字符串"></a>7、SETRANGE 键名 偏移量n 要替换的字符串</h3><blockquote><p>替换指定字符开始的字符串</p></blockquote><ul><li>先设置一个键值对：key2–&gt;abcdefg，然后偏移一个单位，将xx替换到目标串中</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142604.png" alt="image-20201011230122084"></p><h3 id="8、setex-键名-过期时间-值"><a href="#8、setex-键名-过期时间-值" class="headerlink" title="8、setex 键名 过期时间 值"></a>8、setex 键名 过期时间 值</h3><blockquote><p>为指定的key设置值和过期时间，如果key已经存在，SETEX命令会替换旧的值</p></blockquote><ul><li>先设置一个键值对，然后使用setex覆盖</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142605.png" alt="image-20201011232438878"></p><h3 id="9、setnx-SET-IF-NOT-EXISTS-键名-值"><a href="#9、setnx-SET-IF-NOT-EXISTS-键名-值" class="headerlink" title="9、setnx(SET IF NOT EXISTS) 键名 值"></a>9、setnx(SET IF NOT EXISTS) 键名 值</h3><blockquote><p>当指定的key不存在时，为key设置指定的值，如果存在会覆盖失败，返回0，成功返回1，这个命令经常在分布式锁中用到</p></blockquote><ul><li>先设置一个键值对，然后尝试使用setnx覆盖，观察结果，发现返回0，且key的值还是wuhu111</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142606.png" alt="image-20201011232537974"></p><h3 id="10、mset-键1-值1-键2-值2-…"><a href="#10、mset-键1-值1-键2-值2-…" class="headerlink" title="10、mset 键1 值1 键2 值2 …"></a>10、mset 键1 值1 键2 值2 …</h3><blockquote><p>使用这个命令可以批量添加键值对</p></blockquote><ul><li>添加三个键值对</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142607.png" alt="image-20201011233358741"></p><h3 id="11、mget-键1-键2-…"><a href="#11、mget-键1-键2-…" class="headerlink" title="11、mget 键1 键2 …"></a>11、mget 键1 键2 …</h3><blockquote><p>批量取得值</p></blockquote><ul><li>取得上面添加的值</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142608.png" alt="image-20201011233547127"></p><h3 id="12、msetnx-键1-值1-…"><a href="#12、msetnx-键1-值1-…" class="headerlink" title="12、msetnx 键1 值1 …"></a>12、msetnx 键1 值1 …</h3><blockquote><p>同时插入多个键值对，如果有一个键已经存在，就不执行插入操作，所有键都不存在时才插入</p></blockquote><h3 id="13、设置对象"><a href="#13、设置对象" class="headerlink" title="13、设置对象"></a>13、设置对象</h3><blockquote><p>set user : 1 {username : zhuo,age : 18}</p></blockquote><ul><li>使用mset和mget存储和获取对象</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mset user:1:name hzx user:1:age 18</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget user:1:name user:1:age</span><br><span class="line">1) <span class="string">&quot;hzx&quot;</span></span><br><span class="line">2) <span class="string">&quot;18&quot;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142609.png" alt="image-20201011234455595"></p><h3 id="14、getset-先取后赋值"><a href="#14、getset-先取后赋值" class="headerlink" title="14、getset 先取后赋值"></a>14、getset 先取后赋值</h3><blockquote><p>由于是先get后set，所以注意结果是上次的值，先返回当前值，后设置新值</p></blockquote><ul><li>设置一个键值对k1-v1，然后使用getset将值变为value1，观察</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142610.png" alt="image-20201011235025047"></p><h3 id="15、String应用场景："><a href="#15、String应用场景：" class="headerlink" title="15、String应用场景："></a>15、String应用场景：</h3><ul><li>由于redis中没有数值类型，所以数字也是用string存储</li><li>可以用作计数器</li><li>统计数量</li><li>对象缓存存储</li></ul><h2 id="3-3、List"><a href="#3-3、List" class="headerlink" title="3.3、List"></a>3.3、List</h2><ul><li>在redis中，我们可以通过设置规则来使list成为一个栈或队列</li><li>所有list命令大部分以l开头</li></ul><h3 id="1、LPUSH-集合名-值"><a href="#1、LPUSH-集合名-值" class="headerlink" title="1、LPUSH 集合名 值"></a>1、LPUSH 集合名 值</h3><blockquote><p>将一个或多个值从左边插进列表</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPUSH list one <span class="comment"># 在列表左边插入值</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list two three <span class="comment"># 在列表中插入多个值</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1  <span class="comment"># 获取列表中所有的值</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; Lrange list 0 1 <span class="comment">#获取列表中下标在[0,1]的值</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、RPUSH-集合名-值"><a href="#2、RPUSH-集合名-值" class="headerlink" title="2、RPUSH 集合名 值"></a>2、RPUSH 集合名 值</h3><blockquote><p>将一个或多个值从右边插进列表</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; Rpush list right</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; rpush list right1 right2</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;right&quot;</span></span><br><span class="line">5) <span class="string">&quot;right1&quot;</span></span><br><span class="line">6) <span class="string">&quot;right2&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3、LPOP-列表名"><a href="#3、LPOP-列表名" class="headerlink" title="3、LPOP 列表名"></a>3、LPOP 列表名</h3><blockquote><p>从左边弹出（移出）一个元素</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPOP list </span><br><span class="line"><span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">3) <span class="string">&quot;right&quot;</span></span><br><span class="line">4) <span class="string">&quot;right1&quot;</span></span><br><span class="line">5) <span class="string">&quot;right2&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4、RPOP-列表名"><a href="#4、RPOP-列表名" class="headerlink" title="4、RPOP 列表名"></a>4、RPOP 列表名</h3><blockquote><p>从右边弹出一个元素</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RPOP list</span><br><span class="line"><span class="string">&quot;right2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">3) <span class="string">&quot;right&quot;</span></span><br><span class="line">4) <span class="string">&quot;right1&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5、LINDEX-列表名-下标"><a href="#5、LINDEX-列表名-下标" class="headerlink" title="5、LINDEX 列表名 下标"></a>5、LINDEX 列表名 下标</h3><blockquote><p>通过下标获取值</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LINDEX list 0</span><br><span class="line"><span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LINDEX list 3</span><br><span class="line"><span class="string">&quot;right1&quot;</span></span><br></pre></td></tr></table></figure><h3 id="6、Llen-列表名"><a href="#6、Llen-列表名" class="headerlink" title="6、Llen 列表名"></a>6、Llen 列表名</h3><blockquote><p>获取列表长度</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">3) <span class="string">&quot;right&quot;</span></span><br><span class="line">4) <span class="string">&quot;right1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; Llen list</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7、Lrem-列表名-移除个数-精确值"><a href="#7、Lrem-列表名-移除个数-精确值" class="headerlink" title="7、Lrem  列表名  移除个数  精确值"></a>7、Lrem  列表名  移除个数  精确值</h3><blockquote><p>移除列表中的一个或多个值，精确匹配</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;one&quot;</span></span><br><span class="line">5) <span class="string">&quot;two&quot;</span></span><br><span class="line">6) <span class="string">&quot;one&quot;</span></span><br><span class="line">7) <span class="string">&quot;right&quot;</span></span><br><span class="line">8) <span class="string">&quot;right1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list 1 two</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;one&quot;</span></span><br><span class="line">5) <span class="string">&quot;one&quot;</span></span><br><span class="line">6) <span class="string">&quot;right&quot;</span></span><br><span class="line">7) <span class="string">&quot;right1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list 5 one</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;right&quot;</span></span><br><span class="line">2) <span class="string">&quot;right1&quot;</span></span><br></pre></td></tr></table></figure><h3 id="8、ltrim-列表名-起始坐标-结束坐标"><a href="#8、ltrim-列表名-起始坐标-结束坐标" class="headerlink" title="8、ltrim  列表名  起始坐标  结束坐标"></a>8、ltrim  列表名  起始坐标  结束坐标</h3><blockquote><p>截断列表，列表元素变为[start ,end]</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello3&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello4&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ltrim list 1 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello3&quot;</span></span><br></pre></td></tr></table></figure><h3 id="9、exists-列表名"><a href="#9、exists-列表名" class="headerlink" title="9、exists 列表名"></a>9、exists 列表名</h3><blockquote><p>判断列表中有几个值</p></blockquote><h3 id="10、LSET-列表名-下标-值"><a href="#10、LSET-列表名-下标-值" class="headerlink" title="10、LSET 列表名  下标  值"></a>10、LSET 列表名  下标  值</h3><blockquote><p>替换列表指定下标的值，如果当前列表中不存在指定下标所对应的值，就报错</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;value3&quot;</span></span><br><span class="line">2) <span class="string">&quot;value2&quot;</span></span><br><span class="line">3) <span class="string">&quot;value1&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lset list 0 item</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;item&quot;</span></span><br><span class="line">2) <span class="string">&quot;value2&quot;</span></span><br><span class="line">3) <span class="string">&quot;value1&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello2&quot;</span></span><br></pre></td></tr></table></figure><h3 id="11、LINSERT-列表名-前-后-要插入的位置-要插入的值"><a href="#11、LINSERT-列表名-前-后-要插入的位置-要插入的值" class="headerlink" title="11、LINSERT   列表名   前|后   要插入的位置    要插入的值"></a>11、LINSERT   列表名   前|后   要插入的位置    要插入的值</h3><blockquote><p>在列表的某个值前|后插入一个值</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush list hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; rpush list world</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="comment"># 在world单词前插入一个值：other</span></span><br><span class="line">127.0.0.1:6379&gt; linsert list before <span class="string">&quot;world&quot;</span> other</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;other&quot;</span></span><br><span class="line">3) <span class="string">&quot;world&quot;</span></span><br></pre></td></tr></table></figure><ul><li>往上面list的other元素后插入一个值wuhu</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; linsert list after <span class="string">&quot;other&quot;</span> wuhu</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;other&quot;</span></span><br><span class="line">3) <span class="string">&quot;wuhu&quot;</span></span><br><span class="line">4) <span class="string">&quot;world&quot;</span></span><br></pre></td></tr></table></figure><h3 id="12、小结："><a href="#12、小结：" class="headerlink" title="12、小结："></a>12、小结：</h3><ul><li><p>list实际上是一个链表，所以可以在节点前后插入节点，也可以在最左端、最右端插入元素</p></li><li><p>如果key不存在，创建新的链表</p></li><li><p>如果key存在，新增内容</p></li><li><p>如果移除了key，那么链表被移除</p></li><li><p>在两边插入或改动值效率最高！操作中间值效率会降低</p></li><li><p>可以用来模拟栈（LPUSH、LPOP）、消息队列（LPUSHR、RPOP）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线教育项目总结（一）-使用MP的QueryWrapper进行自定义sql与提升嵌套查询效率。</title>
      <link href="posts/2126557972.html"/>
      <url>posts/2126557972.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、使用条件构造器自定义SQL"><a href="#一、使用条件构造器自定义SQL" class="headerlink" title="一、使用条件构造器自定义SQL"></a>一、使用条件构造器自定义SQL</h1><blockquote><p>在在线教育项目的学习过程中，遇到一个需要展示课程详细信息的需求，这个课程信息页面需要展示课程title、课程一级类别、二级类别、讲师姓名、课时数、课程价格、课程封面、课程购买量、浏览量、课程状态（已发布、未发布）和课程创建时间。</p></blockquote><h2 id="1-1、所需依赖"><a href="#1-1、所需依赖" class="headerlink" title="1.1、所需依赖"></a>1.1、所需依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">swagger.version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">swagger.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-models<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-models<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--lombok用来简化实体类：需要安装lombok插件--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- org.apache.commons.lang3.StringUtils --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-2、实体类"><a href="#1-2、实体类" class="headerlink" title="1.2、实体类"></a>1.2、实体类</h2><blockquote><p>该业务所涉及的实体类如下所示</p></blockquote><h3 id="1、BaseEntity"><a href="#1、BaseEntity" class="headerlink" title="1、BaseEntity"></a>1、BaseEntity</h3><blockquote><p>这个实体类定义了实体类的<strong>共同属性</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID=<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;讲师ID&quot;)</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.ASSIGN_ID)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date gmtCreate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;更新时间&quot;)</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date gmtModified;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、Course"><a href="#2、Course" class="headerlink" title="2、Course"></a>2、Course</h3><blockquote><p>课程实体类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@TableName(&quot;edu_course&quot;)</span></span><br><span class="line"><span class="meta">@ApiModel(value=&quot;Course对象&quot;, description=&quot;课程&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID=<span class="number">1L</span>;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 课程未发布</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COURSE_DRAFT = <span class="string">&quot;Draft&quot;</span>;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 课程已发布</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COURSE_NORMAL = <span class="string">&quot;Normal&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;课程讲师ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String teacherId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;课程专业ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String subjectId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;课程专业父级ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String subjectParentId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;课程标题&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;课程销售价格，设置为0则可免费观看&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;总课时&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer lessonNum;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;课程封面图片路径&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String cover;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;销售数量&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long buyCount;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;浏览数量&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long viewCount;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;乐观锁&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long version;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;课程状态 Draft未发布  Normal已发布&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、Teacher"><a href="#3、Teacher" class="headerlink" title="3、Teacher"></a>3、Teacher</h3><blockquote><p>教师实体类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@TableName(&quot;edu_teacher&quot;)</span></span><br><span class="line"><span class="meta">@ApiModel(value=&quot;Teacher对象&quot;, description=&quot;讲师&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID=<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;讲师姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;讲师简介&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;讲师资历,一句话说明讲师&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String career;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;头衔 1高级讲师 2首席讲师&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;讲师头像&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;排序&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;入驻时间&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(timezone = &quot;GMT+8&quot;, pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date joinDate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;逻辑删除 1（true）已删除， 0（false）未删除&quot;)</span></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、Subject"><a href="#4、Subject" class="headerlink" title="4、Subject"></a>4、Subject</h3><blockquote><p><strong>课程分类实体类</strong></p><p>一级分类和二级分类共用一个实体类，如果分类对象的parentId为0，证明其是一级分类，如果不为0，证明为二级分类。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@TableName(&quot;edu_subject&quot;)</span></span><br><span class="line"><span class="meta">@ApiModel(value=&quot;Subject对象&quot;, description=&quot;课程科目&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID=<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;类别名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;父ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String parentId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;排序字段&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、CourseVo"><a href="#5、CourseVo" class="headerlink" title="5、CourseVo"></a>5、CourseVo</h3><blockquote><p>这个Vo类用于定义需要展示在课程详情页面的属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">// 课程标题</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">// 课程一级分类</span></span><br><span class="line">    <span class="keyword">private</span> String subjectParentTitle;</span><br><span class="line">    <span class="comment">// 课程二级分类</span></span><br><span class="line">    <span class="keyword">private</span> String subjectTitle;</span><br><span class="line">    <span class="comment">// 讲师姓名</span></span><br><span class="line">    <span class="keyword">private</span> String teacherName;</span><br><span class="line">    <span class="comment">// 课程课时数</span></span><br><span class="line">    <span class="keyword">private</span> Integer lessonNum;</span><br><span class="line">    <span class="comment">// 课程价格</span></span><br><span class="line">    <span class="keyword">private</span> String price;</span><br><span class="line">    <span class="comment">// 课程封面</span></span><br><span class="line">    <span class="keyword">private</span> String cover;</span><br><span class="line">    <span class="comment">// 课程购买数</span></span><br><span class="line">    <span class="keyword">private</span> Long buyCount;</span><br><span class="line">    <span class="comment">// 课程浏览量</span></span><br><span class="line">    <span class="keyword">private</span> Long viewCount;</span><br><span class="line">    <span class="comment">// 课程状态</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    <span class="comment">// 课程创建时间</span></span><br><span class="line">    <span class="keyword">private</span> String gmtCreate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、CourseQueryVo"><a href="#6、CourseQueryVo" class="headerlink" title="6、CourseQueryVo"></a>6、CourseQueryVo</h3><blockquote><p>该业务还需要用到分页查询与条件查询，所以引入一个用于构造条件查询的查询实体类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseQueryVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String teacherId;</span><br><span class="line">    <span class="keyword">private</span> String subjectParentId;</span><br><span class="line">    <span class="keyword">private</span> String subjectId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3、Controller层"><a href="#1-3、Controller层" class="headerlink" title="1.3、Controller层"></a>1.3、Controller层</h2><blockquote><p>定义一个CourseListPage接口，需要传入三个参数：</p><ul><li>page：当前页码</li><li>limit：每页记录数</li><li>courseQueryVo：由查询条件封装成的查询对象</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;课程管理控制器&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/edu/course&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CourseService courseService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiOperation(&quot;课程分页列表&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;list/&#123;page&#125;/&#123;limit&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">courseListPage</span><span class="params">(<span class="meta">@ApiParam(value = &quot;当前页码&quot;,required = true)</span> <span class="meta">@PathVariable</span> Long page,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="meta">@ApiParam(value = &quot;每页记录数&quot;,required = true)</span> <span class="meta">@PathVariable</span> Long limit,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="meta">@ApiParam(value = &quot;课程列表查询对象&quot;)</span>CourseQueryVo courseQueryVo)</span> </span>&#123;</span><br><span class="line">        IPage&lt;CourseVo&gt; pageModel = courseService.selectPage(page, limit, courseQueryVo);</span><br><span class="line">        List&lt;CourseVo&gt; records = pageModel.getRecords();</span><br><span class="line">        <span class="keyword">long</span> total = pageModel.getTotal();</span><br><span class="line">        <span class="keyword">return</span>  R.ok().data(<span class="string">&quot;total&quot;</span>, total).data(<span class="string">&quot;rows&quot;</span>, records);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4、Service实现类"><a href="#1-4、Service实现类" class="headerlink" title="1.4、Service实现类"></a>1.4、Service实现类</h2><blockquote><p>使用QueryWrapper组装sql的步骤如下：</p><ul><li>分别取出查询对象中的查询属性并判断是否为空</li><li>若不为空，则使用条件构造器根据属性类型构造查询条件</li><li>在使用条件构造器构造查询条件时需要使用<strong>表别名.属性名</strong>的形式构造条件</li><li>将组装好的条件构造器传入Mapper层</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">CourseMapper</span>, <span class="title">Course</span>&gt; <span class="keyword">implements</span> <span class="title">CourseService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VideoMapper videoMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ChapterMapper chapterMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentMapper commentMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CourseCollectMapper courseCollectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CourseMapper courseMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPage&lt;CourseVo&gt; <span class="title">selectPage</span><span class="params">(Long page, Long limit, CourseQueryVo courseQueryVo)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//组装查询条件</span></span><br><span class="line">        QueryWrapper&lt;CourseVo&gt; courseVoQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        courseVoQueryWrapper.orderByDesc(<span class="string">&quot;c.gmt_create&quot;</span>);</span><br><span class="line">        <span class="comment">//四个查询条件如下</span></span><br><span class="line">        String title = courseQueryVo.getTitle();</span><br><span class="line">        String teacherId = courseQueryVo.getTeacherId();</span><br><span class="line">        String subjectParentId = courseQueryVo.getSubjectParentId();</span><br><span class="line">        String subjectId = courseQueryVo.getSubjectId();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(title)) &#123;</span><br><span class="line">            courseVoQueryWrapper.like(<span class="string">&quot;c.title&quot;</span>, title);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(teacherId)) &#123;</span><br><span class="line">            courseVoQueryWrapper.eq(<span class="string">&quot;c.teacher_id&quot;</span>, teacherId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(subjectParentId)) &#123;</span><br><span class="line">            courseVoQueryWrapper.eq(<span class="string">&quot;c.subject_parent_id&quot;</span>, subjectParentId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(subjectId)) &#123;</span><br><span class="line">            courseVoQueryWrapper.eq(<span class="string">&quot;c.subject_id&quot;</span>, subjectId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//组装分页</span></span><br><span class="line">        Page&lt;CourseVo&gt; pageParam = <span class="keyword">new</span> Page&lt;&gt;(page, limit);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行查询</span></span><br><span class="line">        List&lt;CourseVo&gt; courseVoList = courseMapper.selectPageByQueryVo(pageParam, courseVoQueryWrapper);</span><br><span class="line">        pageParam.setRecords(courseVoList);</span><br><span class="line">        <span class="keyword">return</span> pageParam;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5、Mapper层"><a href="#1-5、Mapper层" class="headerlink" title="1.5、Mapper层"></a>1.5、Mapper层</h2><h3 id="1、Mapper接口"><a href="#1、Mapper接口" class="headerlink" title="1、Mapper接口"></a>1、Mapper接口</h3><blockquote><p>对于Service层中传入的条件构造器，需要使Mybatis-plus能够识别，此时我们需要在Mapper层中的条件构造器对象前添加**@Param(Constants.WRAPPER)**注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CourseMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Course</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;CourseVo&gt; <span class="title">selectPageByQueryVo</span><span class="params">(Page&lt;CourseVo&gt; pageParam,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="meta">@Param(Constants.WRAPPER)</span> QueryWrapper&lt;CourseVo&gt; courseVoQueryWrapper)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、Mapper-xml文件"><a href="#2、Mapper-xml文件" class="headerlink" title="2、Mapper.xml文件"></a>2、Mapper.xml文件</h3><blockquote><p>除去Mapper接口添加的**@Param(Constants.WRAPPER)<strong>注解外，我们还需要在自定义的sql语句后添加</strong>${ew.customSqlSegment}**</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hzx.grain.service.edu.mapper.CourseMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPageByQueryVo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hzx.grain.service.edu.entity.vo.CourseVo&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;courseVoColumns&quot;</span>/&gt;</span></span><br><span class="line">        FROM</span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;tables&quot;</span>/&gt;</span></span><br><span class="line">        $&#123;ew.customSqlSegment&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 抽取sql片段 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;courseVoColumns&quot;</span>&gt;</span></span><br><span class="line">           c.id,</span><br><span class="line">           c.title,</span><br><span class="line">           c.lesson_num AS lessonNum,</span><br><span class="line">           c.price,</span><br><span class="line">           c.cover,</span><br><span class="line">           c.buy_count AS buyCount,</span><br><span class="line">           c.view_count AS viewCount,</span><br><span class="line">           c.status,</span><br><span class="line">           c.gmt_create AS gmtCreate,</span><br><span class="line">           t.name AS teacherName,</span><br><span class="line">           s1.title AS subjectParentTitle,</span><br><span class="line">           s2.title AS subjectTitle</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 抽取sql片段：与course表连接的其余表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;tables&quot;</span>&gt;</span></span><br><span class="line">            guli_edu.edu_course c</span><br><span class="line">        LEFT JOIN guli_edu.edu_teacher t ON c.teacher_id = t.id</span><br><span class="line">        LEFT JOIN guli_edu.edu_subject s1 ON c.subject_parent_id = s1.id</span><br><span class="line">        LEFT JOIN guli_edu.edu_subject s2 ON c.subject_id = s2.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、注意事项"><a href="#3、注意事项" class="headerlink" title="3、注意事项"></a>3、注意事项</h3><blockquote><p>需要<code>mybatis-plus</code>版本 &gt;= <code>3.0.7</code></p></blockquote><h2 id="1-6、测试"><a href="#1-6、测试" class="headerlink" title="1.6、测试"></a>1.6、测试</h2><blockquote><p>打开Swagger进行测试</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203201739.png"></p><h3 id="1、结果"><a href="#1、结果" class="headerlink" title="1、结果"></a>1、结果</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;success&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;code&quot;</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;rows&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1353316219423391746&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Spring Boot框架入门教程&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;subjectParentTitle&quot;</span>: <span class="string">&quot;后端开发&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;subjectTitle&quot;</span>: <span class="string">&quot;Java&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;teacherName&quot;</span>: <span class="string">&quot;刘德华&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;lessonNum&quot;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">&quot;price&quot;</span>: <span class="string">&quot;0.00&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cover&quot;</span>: <span class="string">&quot;https://edu-system-1010.oss-cn-shenzhen.aliyuncs.com/cover/2021/01/24/2afcb3fd-da73-40d1-ba41-4d6cf74c7e7a.jpg&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;buyCount&quot;</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">&quot;viewCount&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;Normal&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;gmtCreate&quot;</span>: <span class="string">&quot;2021-01-24 20:18:25&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1353313325668200450&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Mybatis-Plus框架入门教程&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;subjectParentTitle&quot;</span>: <span class="string">&quot;后端开发&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;subjectTitle&quot;</span>: <span class="string">&quot;Java&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;teacherName&quot;</span>: <span class="string">&quot;刘德华&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;lessonNum&quot;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">&quot;price&quot;</span>: <span class="string">&quot;1.00&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cover&quot;</span>: <span class="string">&quot;https://edu-system-1010.oss-cn-shenzhen.aliyuncs.com/cover/2021/01/24/804b29e5-4ca7-4819-9bac-eb34f65068ca.jpg&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;buyCount&quot;</span>: <span class="number">9</span>,</span><br><span class="line">        <span class="attr">&quot;viewCount&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;Normal&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;gmtCreate&quot;</span>: <span class="string">&quot;2021-01-24 20:06:55&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1353310049325309953&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;java--从入门到入土&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;subjectParentTitle&quot;</span>: <span class="string">&quot;后端开发&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;subjectTitle&quot;</span>: <span class="string">&quot;Java&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;teacherName&quot;</span>: <span class="string">&quot;刘德华&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;lessonNum&quot;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">&quot;price&quot;</span>: <span class="string">&quot;6.00&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cover&quot;</span>: <span class="string">&quot;https://edu-system-1010.oss-cn-shenzhen.aliyuncs.com/cover/2021/01/24/d7c25aaa-5c09-4b46-a56d-5000f9265bc7.jpg&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;buyCount&quot;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">&quot;viewCount&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;Normal&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;gmtCreate&quot;</span>: <span class="string">&quot;2021-01-24 19:53:54&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、执行的sql语句"><a href="#2、执行的sql语句" class="headerlink" title="2、执行的sql语句"></a>2、执行的sql语句</h3><blockquote><p>使用Idea的Mybatis插件查看执行的sql语句</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">c.id, </span><br><span class="line">c.title, </span><br><span class="line">c.lesson_num AS lessonNum, </span><br><span class="line">c.price, </span><br><span class="line">c.cover, </span><br><span class="line">c.buy_count AS buyCount, </span><br><span class="line">c.view_count AS viewCount, </span><br><span class="line">c.status, </span><br><span class="line">c.gmt_create AS gmtCreate, </span><br><span class="line">t.name AS teacherName, </span><br><span class="line">s1.title AS subjectParentTitle, </span><br><span class="line">s2.title AS subjectTitle</span><br><span class="line">FROM guli_edu.edu_course c</span><br><span class="line">LEFT JOIN guli_edu.edu_teacher t ON c.teacher_id &#x3D; t.id</span><br><span class="line">LEFT JOIN guli_edu.edu_subject s1 ON c.subject_parent_id &#x3D; s1.id</span><br><span class="line">LEFT JOIN guli_edu.edu_subject s2 ON c.subject_id &#x3D; s2.id</span><br><span class="line">WHERE c.title LIKE &#39;%入门%&#39;</span><br><span class="line">AND c.teacher_id &#x3D; &#39;1&#39;</span><br><span class="line">AND c.subject_parent_id &#x3D; &#39;1352924754100617218&#39;</span><br><span class="line">AND c.subject_id &#x3D; &#39;1352924754167726082&#39;</span><br><span class="line">ORDER BY c.gmt_create DESC</span><br><span class="line">LIMIT 0, 3;</span><br></pre></td></tr></table></figure><h1 id="二、总结嵌套查询"><a href="#二、总结嵌套查询" class="headerlink" title="二、总结嵌套查询"></a>二、总结嵌套查询</h1><h2 id="2-1、使用子查询"><a href="#2-1、使用子查询" class="headerlink" title="2.1、使用子查询"></a>2.1、使用子查询</h2><h3 id="1、Controller层"><a href="#1、Controller层" class="headerlink" title="1、Controller层"></a>1、Controller层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;nested&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;嵌套分类数据列表&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">nestedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//返回分类VO列表</span></span><br><span class="line">    List&lt;SubjectVo&gt; subjectVoList = subjectService.nestedList();</span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">&quot;items&quot;</span>,subjectVoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、Service实现类"><a href="#2、Service实现类" class="headerlink" title="2、Service实现类"></a>2、Service实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SubjectVo&gt; <span class="title">nestedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> subjectMapper.selectNestedListByParentId(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、Mapper-xml文件"><a href="#3、Mapper-xml文件" class="headerlink" title="3、Mapper.xml文件"></a>3、Mapper.xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用ResultMap进行映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;subjectVoMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.hzx.grain.service.edu.entity.vo.SubjectVo&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将表中字段与类中属性一一映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;title&quot;</span> <span class="attr">column</span>=<span class="string">&quot;title&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sort&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sort&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里根据原来的方法进行嵌套查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;children&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">column</span>=<span class="string">&quot;id&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">&quot;selectNestedListByParentId&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">ofType</span>=<span class="string">&quot;com.hzx.grain.service.edu.entity.vo.SubjectVo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 嵌套查询一级分类与二级分类并组装为SubjectVo列表的sql语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectNestedListByParentId&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;subjectVoMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">     `id`,</span><br><span class="line">     `sort`,</span><br><span class="line">     `title`</span><br><span class="line">    FROM</span><br><span class="line">     guli_edu.edu_subject</span><br><span class="line">    WHERE</span><br><span class="line">     `parent_id` = #&#123;parentId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、SubjectVo实体类"><a href="#4、SubjectVo实体类" class="headerlink" title="4、SubjectVo实体类"></a>4、SubjectVo实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line">    <span class="keyword">private</span> List&lt;SubjectVo&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h3><blockquote><p>这种使用子查询的嵌套查询实现简单，但查询效率会随着数据量增大而降低。</p></blockquote><h2 id="2-2、三层嵌套查询中使用冗余字段提高查询效率"><a href="#2-2、三层嵌套查询中使用冗余字段提高查询效率" class="headerlink" title="2.2、三层嵌套查询中使用冗余字段提高查询效率"></a>2.2、三层嵌套查询中使用冗余字段提高查询效率</h2><blockquote><p>该业务需求是：根据课程Id查询课程详情信息，包括课程信息、嵌套章节课时列表</p><p>即一个课程下有多个章节，而一个章节下又有多个小节</p></blockquote><h3 id="1、CourseVo"><a href="#1、CourseVo" class="headerlink" title="1、CourseVo"></a>1、CourseVo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebCourseVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    <span class="keyword">private</span> Integer lessonNum;</span><br><span class="line">    <span class="keyword">private</span> String cover;</span><br><span class="line">    <span class="keyword">private</span> Long buyCount;</span><br><span class="line">    <span class="keyword">private</span> Long viewCount;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="keyword">private</span> String teacherId;</span><br><span class="line">    <span class="keyword">private</span> String teacherName;</span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">    <span class="keyword">private</span> String subjectLevelOneId;</span><br><span class="line">    <span class="keyword">private</span> String subjectLevelOne;</span><br><span class="line">    <span class="keyword">private</span> String subjectLevelTwoId;</span><br><span class="line">    <span class="keyword">private</span> String subjectLevelTwo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、ChapterVo"><a href="#2、ChapterVo" class="headerlink" title="2、ChapterVo"></a>2、ChapterVo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChapterVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line">    <span class="keyword">private</span> List&lt;VideoVo&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、VideoVo"><a href="#3、VideoVo" class="headerlink" title="3、VideoVo"></a>3、VideoVo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Boolean free;</span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String videoSourceId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、控制器层"><a href="#4、控制器层" class="headerlink" title="4、控制器层"></a>4、控制器层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;get/&#123;courseId&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据courseId查询课程详细信息&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">getById</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@ApiParam(value = &quot;课程id&quot;,required = true)</span></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@PathVariable</span> String courseId)</span> </span>&#123;</span><br><span class="line">    WebCourseVo courseVo = courseService.selectWebCourseVoById(courseId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询当前课程的嵌套章节和课时信息</span></span><br><span class="line">    List&lt;ChapterVo&gt; chapterVoList = chapterService.nestedList(courseId);</span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">&quot;course&quot;</span>,courseVo).data(<span class="string">&quot;chapterVoList&quot;</span>,chapterVoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、service层"><a href="#5、service层" class="headerlink" title="5、service层"></a>5、service层</h3><blockquote><p>CourseServiceImpl</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebCourseVo <span class="title">selectWebCourseVoById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//更新课程浏览数</span></span><br><span class="line">    Course course = baseMapper.selectById(id);</span><br><span class="line">    course.setViewCount(course.getViewCount() + <span class="number">1</span>);</span><br><span class="line">    baseMapper.updateById(course);</span><br><span class="line">    <span class="comment">//获取课程信息</span></span><br><span class="line">    <span class="keyword">return</span> baseMapper.selectWebCourseVoById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ChapterServiceImpl</p><p>由于前面使用子查询导致查询速率低下，所以在这里使用video表冗余的CourseId字段来提高查询速率，步骤如下</p><ul><li>通过Chapter类的courseId获取该课程下的所有章节对象</li><li>通过Video类冗余的courseId获取该课程下的所有小节对象</li><li>循环遍历该课程下的章节对象列表，通过Chapter对象的id和Video对象的chapterId字段来建立联系，组装Chapter对象的Video列表</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;ChapterVo&gt; <span class="title">nestedList</span><span class="params">(String courseId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1 通过courseId获取章节列表信息：List&lt;Chapter&gt;</span></span><br><span class="line">    QueryWrapper&lt;Chapter&gt; chapterQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    chapterQueryWrapper.eq(<span class="string">&quot;course_id&quot;</span>,courseId);</span><br><span class="line">    List&lt;Chapter&gt; chapterList = chapterMapper.selectList(chapterQueryWrapper);</span><br><span class="line">    <span class="comment">//2 通过edu_video表中冗余的course_id获取属于这个课程的所有Video列表：List&lt;Video&gt;</span></span><br><span class="line">    QueryWrapper&lt;Video&gt; videoQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    videoQueryWrapper.eq(<span class="string">&quot;course_id&quot;</span>,courseId);</span><br><span class="line">    List&lt;Video&gt; videoList = videoMapper.selectList(videoQueryWrapper);</span><br><span class="line">    <span class="comment">//3 先获取章节信息ChapterVo列表，再获取VideoVo列表</span></span><br><span class="line">    List&lt;ChapterVo&gt; chapterVoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    chapterList.forEach(chapter -&gt; &#123;</span><br><span class="line">        ChapterVo chapterVo = <span class="keyword">new</span> ChapterVo();</span><br><span class="line">        BeanUtils.copyProperties(chapter,chapterVo);</span><br><span class="line">        chapterVoList.add(chapterVo);</span><br><span class="line">        List&lt;VideoVo&gt; videoVoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//4 循环组装章节信息列表</span></span><br><span class="line">        videoList.forEach(video -&gt; &#123;</span><br><span class="line">            <span class="comment">//如果当前chapter的id的值等于video的chapterId值</span></span><br><span class="line">            <span class="comment">//证明当前video对象属于该Chapter对象</span></span><br><span class="line">            <span class="keyword">if</span>(StringUtils.equals(chapter.getId(),video.getChapterId())) &#123;</span><br><span class="line">                VideoVo videoVo = <span class="keyword">new</span> VideoVo();</span><br><span class="line">                BeanUtils.copyProperties(video,videoVo);</span><br><span class="line">                videoVoList.add(videoVo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        chapterVo.setChildren(videoVoList);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> chapterVoList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端学习 </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java应用学习（三）-SSM框架整合及基本使用</title>
      <link href="posts/3009255528.html"/>
      <url>posts/3009255528.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>SSM框架多种整合方式，这里使用注解+XML文件的方式来进行整合开发</p></blockquote><h1 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h1><h2 id="1-1、创建数据库与表"><a href="#1-1、创建数据库与表" class="headerlink" title="1.1、创建数据库与表"></a>1.1、创建数据库与表</h2><blockquote><p>打开数据库可视化工具，执行以下sql语句</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE ssm;</span><br><span class="line"></span><br><span class="line">USE ssm;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;student&#96;(</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    &#96;name&#96; VARCHAR(32),</span><br><span class="line">    score DOUBLE</span><br><span class="line">);</span><br><span class="line">INSERT INTO &#96;student&#96; VALUES (1, &#39;A&#39;, 80);</span><br><span class="line">INSERT INTO &#96;student&#96; VALUES (2, &#39;B&#39;, 95);</span><br><span class="line">INSERT INTO &#96;student&#96; VALUES (3, &#39;C&#39;, 90);</span><br><span class="line">INSERT INTO &#96;student&#96; VALUES (4, &#39;D&#39;, 100);</span><br></pre></td></tr></table></figure><h2 id="1-2、创建maven项目"><a href="#1-2、创建maven项目" class="headerlink" title="1.2、创建maven项目"></a>1.2、创建maven项目</h2><blockquote><p>注：这里需要以maven-archetype-webapp为骨架构建项目</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210131125931.png" alt="image-20210131125931386"></p><blockquote><p>设置项目路径与坐标后，点击next</p></blockquote><blockquote><p>选择项目使用的maven版本及settings.xml文件，<strong>在属性中添加一键值对</strong>：**(archetypeCatalog:internal)**，这个键值对可以解决maven项目构建速度过慢的问题。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210131130358.png" alt="image-20210131130358733"></p><h2 id="1-3、编辑pom-xml"><a href="#1-3、编辑pom-xml" class="headerlink" title="1.3、编辑pom.xml"></a>1.3、编辑pom.xml</h2><blockquote><p>在pom.xml文件中<strong>引入项目依赖</strong>与<strong>版本锁定</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- aop相关的技术 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- aop --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- context容器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- web --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- webmvc --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- spring测试 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 事务 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- jdbc模板技术 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 单元测试 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- mysql连接 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- servlet --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- jsp --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- EL JL TL表达式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- log start --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- mybatis相关 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- druid 连接池 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-4、完善目录结构"><a href="#1-4、完善目录结构" class="headerlink" title="1.4、完善目录结构"></a>1.4、完善目录结构</h2><ul><li>在src/main目录下创建java文件夹与resource文件夹。</li><li>在上一步创建的java目录下创建com.hzx.entity、com.hzx.dao、com.hzx.controller、com.hzx.service和com.hzx.test包</li></ul><blockquote><p>完善后的目录如下：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210131131024.png" alt="image-20210131131024222"></p><h2 id="1-5、创建基本类"><a href="#1-5、创建基本类" class="headerlink" title="1.5、创建基本类"></a>1.5、创建基本类</h2><blockquote><p>根据数据库的表结构创建实体类，这里使用了<strong>Lombok</strong>简化开发</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hzx.entity;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在service包下创建一个StudentService接口，再创建一个impl包，然后在impl包下新建一个StudentServiceImpl实现类，这个类实现StudentService接口。</p></blockquote><ul><li>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hzx.service;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hzx.service.impl;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在mapper包下创建StudentMapper接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hzx.mapper;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在controller包下创建一个StudentController接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hzx.controller;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、Spring相关环境配置"><a href="#二、Spring相关环境配置" class="headerlink" title="二、Spring相关环境配置"></a>二、Spring相关环境配置</h1><h2 id="2-1、编写Spring核心配置文件"><a href="#2-1、编写Spring核心配置文件" class="headerlink" title="2.1、编写Spring核心配置文件"></a>2.1、编写Spring核心配置文件</h2><blockquote><p>在resource目录下创建Spring核心配置文件–applicationContext.xml</p><p>在这个核心配置文件中，我们需要</p></blockquote><ul><li>开启组件扫描，扫描com.hzx包下的所有组件</li><li>由于controller包下的控制器组件属于SpringMVC，所以我们需要在组件扫描中排除com.hzx包下所有添加了@Controller注解的组件。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解扫描，处理service和dao，但是不需要处理 controller --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.hzx&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置哪些注解不扫描 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2、测试"><a href="#2-2、测试" class="headerlink" title="2.2、测试"></a>2.2、测试</h2><blockquote><p>在StudentServiceImpl上添加@Service注解，同时添加两个方法进行测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getAllStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层的getAll方法，需要调用Mapper层与数据库交互.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在com.hzx.test包下创建一个TestSpring类，编写方法使用junit进行测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext ioc = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        StudentService studentService = ioc.getBean(StudentServiceImpl.class);</span><br><span class="line">        studentService.getAllStudent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210131133141.png" alt="image-20210131133141706"></p><blockquote><p>出现以上结果证明Spring基本环境已经搭建完成，下面配置SpringMVC</p></blockquote><h1 id="三、SpringMVC相关环境配置"><a href="#三、SpringMVC相关环境配置" class="headerlink" title="三、SpringMVC相关环境配置"></a>三、SpringMVC相关环境配置</h1><h2 id="3-1、配置web-xml"><a href="#3-1、配置web-xml" class="headerlink" title="3,1、配置web.xml"></a>3,1、配置web.xml</h2><blockquote><p>配置SpringMVC的核心前端控制器：<strong>DispatcherServlet</strong></p><p>web.xml文件位置如下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210131133440.png" alt="image-20210131133440460"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--加载springmvc.xml配置文件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--启动服务器，创建该servlet--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>配置前端控制器的过程中，可以直接指定springmvc的核心配置文件位置，在resource目录下创建springmvc核心配置文件–<strong>springmvc.xml</strong></p></li><li><p>使用该前端控制器拦截所有请求，在服务器启动时创建该servlet</p></li></ul><blockquote><p>配置字符编码过滤器，用于解决中文乱码</p><p>注：<strong>如果配置了多个过滤器，那么这个字符编码过滤器必须放在最前</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置过滤器，解决中文乱码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>可选：如果你在SSM框架中想使用REST风格的API，那么需要配置一个<strong>HiddenHttpMethodFilter</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置使用Rest风格的URL --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2、配置springmvc-xml"><a href="#3-2、配置springmvc-xml" class="headerlink" title="3.2、配置springmvc.xml"></a>3.2、配置springmvc.xml</h2><blockquote><p>在resource目录下创建一个springmvc.xml配置文件</p></blockquote><ul><li><p>创建配置文件，引入命名空间</p></li><li><p>开启组件扫描，由于Spring核心配置文件中已经扫描除<strong>控制器</strong>之外的组件，所以在springmvc核心配置文件中只需要扫描控制器即可。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1  开启只对controller的扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.hzx&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置视图解析器，在WEB-INF文件夹下创建一个pages文件夹</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--2 配置视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;org&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--JSP 目录--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--文件后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在webapp目录下创建三个用于存放静态资源的文件夹（css、images、js），并放行静态资源</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--3 不过滤静态资源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/css/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/images/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/images/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>开启注解支持</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--4 开启注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>springmvc.xml配置如下：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1  开启只对controller的扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.hzx&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2 配置视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;org&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--JSP 目录--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--文件后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3 不过滤静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/css/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/images/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/images/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--4 开启注解支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-3、编写页面"><a href="#3-3、编写页面" class="headerlink" title="3.3、编写页面"></a>3.3、编写页面</h2><blockquote><p>修改index.jsp</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;主页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href=&quot;student/getAll&quot;&gt;查询所有学生&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在WEB-INF/pages目录下创建一个list.jsp</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;查询所有页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;这是学生列表&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="3-4、测试"><a href="#3-4、测试" class="headerlink" title="3.4、测试"></a>3.4、测试</h2><blockquote><p>在StudentController添加一方法，这个方法用于跳转到list.jsp页面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.setViewName(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置tomcat</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210131140153.png" alt="image-20210131140153219"></p><blockquote><p>点击超链接后跳转成功，证明Springmvc基本配置完成</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210131140235.png" alt="image-20210131140235530"></p><h1 id="四、Spring整合Spring-MVC"><a href="#四、Spring整合Spring-MVC" class="headerlink" title="四、Spring整合Spring MVC"></a>四、Spring整合Spring MVC</h1><h2 id="4-1、配置监听器"><a href="#4-1、配置监听器" class="headerlink" title="4.1、配置监听器"></a>4.1、配置监听器</h2><blockquote><p>通过对 Spring MVC 的代码编写，我们知道，在服务器启动的时候就回去加载 springmvc.xml 这个配置，现在我们就需要继续在 web.xml 中配置，使得在项目启动的时候，就去加载applicationContext.xml的配置文件</p><p>所以我们可以在 <strong>web.xml</strong> 中，<strong>配置spring核心监听器</strong>，它默认会以 /WEB-INF/applicationContext.xml作为配置文件，这里需要注意web.xml文件中各个组件的存放位置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置配置文件路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置 Spring 的监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2、使用controller调用service"><a href="#4-2、使用controller调用service" class="headerlink" title="4.2、使用controller调用service"></a>4.2、使用controller调用service</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;控制层的getAll方法...&quot;</span>);</span><br><span class="line">        studentService.getAllStudent();</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.setViewName(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3、重新启动tomcat，测试"><a href="#4-3、重新启动tomcat，测试" class="headerlink" title="4.3、重新启动tomcat，测试"></a>4.3、重新启动tomcat，测试</h2><blockquote><p>在tomcat的VM options中填入：-Dfile.encoding=UTF-8，用于解决IDEA的控制台乱码问题</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210131141119.png" alt="image-20210131141119573"></p><h1 id="五、使用Spring整合Mybatis"><a href="#五、使用Spring整合Mybatis" class="headerlink" title="五、使用Spring整合Mybatis"></a>五、使用Spring整合Mybatis</h1><h2 id="5-1、编写Mybatis核心配置文件"><a href="#5-1、编写Mybatis核心配置文件" class="headerlink" title="5.1、编写Mybatis核心配置文件"></a>5.1、编写Mybatis核心配置文件</h2><blockquote><p>在resource目录下新建一个SqlMapConfig.xml，这个文件其实可以省略，但我们还是用它来编写类名简化配置。</p></blockquote><ul><li>创建SqlMapConfig.xml配置文件</li><li>扫描com.hzx包，为包下的实体类起一个别名，并在控制台输出执行的sql</li><li>与数据库连接相关的配置我们放在Spring的核心配置文件中配置。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打印查询语句 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.hzx&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-2、编写StudentMapper接口"><a href="#5-2、编写StudentMapper接口" class="headerlink" title="5.2、编写StudentMapper接口"></a>5.2、编写StudentMapper接口</h2><blockquote><p>使用注解形式编写sql语句，也可以使用xml配置文件的方式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 查询所有学生</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from `ssm`.`student`&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 向数据库中插入一个学生</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> student</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into `ssm`.`student`(name,score) values(#&#123;name&#125;,#&#123;score&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3、编写链接数据库的配置文件"><a href="#5-3、编写链接数据库的配置文件" class="headerlink" title="5.3、编写链接数据库的配置文件"></a>5.3、编写链接数据库的配置文件</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;nullCatalogMeansCurrent=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">tianxin1230.</span></span><br></pre></td></tr></table></figure><h2 id="5-4、修改Spring核心配置文件"><a href="#5-4、修改Spring核心配置文件" class="headerlink" title="5.4、修改Spring核心配置文件"></a>5.4、修改Spring核心配置文件</h2><blockquote><p>在Spring核心配置文件配置数据库连接池，引入properties文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span> <span class="attr">ignore-unresolvable</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置数据库连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库基本信息配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置SqlSessionFactory工厂 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置StudentMapper接口所在包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScanner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.hzx.mapper&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-5、修改service实现类和controller层"><a href="#5-5、修改service实现类和controller层" class="headerlink" title="5.5、修改service实现类和controller层"></a>5.5、修改service实现类和controller层</h2><blockquote><p>service实现类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getAllStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层的getAll方法，需要调用Mapper层与数据库交互.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> studentMapper.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addStudent</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层的addStudent方法，需要调用Mapper层与数据库交互.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> studentMapper.addStudent(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>controller层</p><p>修改getAll方法，并添加add方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;控制层的getAll方法...&quot;</span>);</span><br><span class="line">        List&lt;Student&gt; students = studentService.getAllStudent();</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">&quot;students&quot;</span>,students);</span><br><span class="line">        mv.setViewName(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Student student, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException, IOException </span>&#123;</span><br><span class="line">        studentService.addStudent(student);</span><br><span class="line">        response.sendRedirect(request.getContextPath()+<span class="string">&quot;/student/getAll&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-6、修改index-jsp和"><a href="#5-6、修改index-jsp和" class="headerlink" title="5.6、修改index.jsp和"></a>5.6、修改index.jsp和</h2><blockquote><p>index.jsp</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;主页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href=&quot;student/getAll&quot;&gt;查询所有学生&lt;/a&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;student/add&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        学生姓名:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        学科成绩:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;score&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;添加&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>list.jsp</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;学生列表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;学生列表&lt;/h3&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;students&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">        $&#123;student.name&#125; 的成绩为: $&#123;student.score&#125;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>测试查询所有学生方法</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210131143231.png" alt="image-20210131143231582"></p><blockquote><p>测试添加所有学生方法</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210131143459.png" alt="image-20210131143459450"></p><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210131144430.png" alt="image-20210131144429826"></p><h2 id="5-7、添加事务控制"><a href="#5-7、添加事务控制" class="headerlink" title="5.7、添加事务控制"></a>5.7、添加事务控制</h2><blockquote><p>修改spring核心配置文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Spring框架声明式事务管理--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置AOP增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* cn.ideal.service.impl.*ServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端学习 </tag>
            
            <tag> Mybatis </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java应用学习（二）-Springboot整合swagger/swagger-Bootstrap-UI使用</title>
      <link href="posts/2938255980.html"/>
      <url>posts/2938255980.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、Swagger及Swagger-Bootstrap-UI简介"><a href="#一、Swagger及Swagger-Bootstrap-UI简介" class="headerlink" title="一、Swagger及Swagger-Bootstrap-UI简介"></a>一、Swagger及Swagger-Bootstrap-UI简介</h1><h2 id="1-1、swagger简介"><a href="#1-1、swagger简介" class="headerlink" title="1.1、swagger简介"></a>1.1、swagger简介</h2><blockquote><p><a href="https://swagger.io/">Swagger</a> 是一款RESTFUL接口的、基于YAML、JSON语言的文档在线自动生成、代码自动生成的工具。是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p><p>总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法、参数和模型紧密集成到服务器端的代码，允许 API 来始终保持同步。Swagger 让部署管理和使用功能强大的 API 从未如此简单。</p></blockquote><h2 id="1-2、关于Swagger-Bootstrap-UI"><a href="#1-2、关于Swagger-Bootstrap-UI" class="headerlink" title="1.2、关于Swagger-Bootstrap-UI"></a>1.2、关于Swagger-Bootstrap-UI</h2><h3 id="1-2-1、简介"><a href="#1-2-1、简介" class="headerlink" title="1.2.1、简介"></a>1.2.1、简介</h3><blockquote><p><a href="https://gitee.com/xiaoym/swagger-bootstrap-ui">swagger-bootstrap-ui</a>是springfox-swagger的增强UI实现，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验。</p></blockquote><h3 id="1-2-2、核心功能"><a href="#1-2-2、核心功能" class="headerlink" title="1.2.2、核心功能"></a>1.2.2、核心功能</h3><blockquote><p>该UI增强包主要包括两大核心功能：<strong>文档说明</strong> 和 <strong>在线调试</strong></p><ul><li><p><strong>文档说明</strong>：根据Swagger的规范说明，详细列出接口文档的说明，包括接口地址、类型、请求示例、请求参数、响应示例、响应参数、响应码等信息，使用swagger-bootstrap-ui能根据该文档说明，对该接口的使用情况一目了然。</p></li><li><p><strong>在线调试</strong>：提供在线接口联调的强大功能，自动解析当前接口参数,同时包含表单验证，调用参数可返回接口响应内容、headers、Curl请求命令实例、响应时间、响应状态码等信息，帮助开发者在线调试，而不必通过其他测试工具测试接口是否正确,简介、强大。</p></li></ul></blockquote><h3 id="1-2-3、UI增强"><a href="#1-2-3、UI增强" class="headerlink" title="1.2.3、UI增强"></a>1.2.3、UI增强</h3><blockquote><p>同时，swagger-bootstrap-ui在满足以上功能的同时，还提供了文档的增强功能，这些功能是官方swagger-ui所没有的，每一个增强的功能都是贴合实际,考虑到开发者的实际开发需要,是比不可少的功能，主要包括：</p><ul><li><p><strong>个性化配置</strong>：通过个性化ui配置项，可自定义UI的相关显示信息</p></li><li><p><strong>离线文档</strong>：根据标准规范，生成的在线markdown离线文档，开发者可以进行拷贝生成markdown接口文档，通过其他第三方markdown转换工具转换成html或pdf，这样也可以放弃swagger2markdown组件</p></li><li><p><strong>接口排序</strong>：自1.8.5后，ui支持了接口排序功能，例如一个注册功能主要包含了多个步骤,可以根据swagger-bootstrap-ui提供的接口排序规则实现接口的排序，step化接口操作，方便其他开发者进行接口对接</p></li></ul></blockquote><h3 id="1-2-4、UI特点"><a href="#1-2-4、UI特点" class="headerlink" title="1.2.4、UI特点"></a>1.2.4、UI特点</h3><blockquote><ul><li>以markdown形式展示文档,将文档的请求地址、类型、请求参数、示例、响应参数分层次依次展示,接口文档一目了然,方便开发者对接</li><li>在线调试栏除了自动解析参数外,针对必填项着颜色区分,同时支持tab键快速输入上下切换.调试时可自定义Content-Type请求头类型</li><li>个性化配置项,支持接口地址、接口description属性、UI增强等个性化配置功能</li><li>接口排序,支持分组及接口的排序功能</li><li>支持markdown文档离线文档导出,也可在线查看离线文档</li><li>调试信息全局缓存,页面刷新后依然存在,方便开发者调试</li><li>以更人性化的treetable组件展示Swagger Models功能</li><li>响应内容可全屏查看,针对响应内容很多的情况下，全屏查看，方便调试、复制</li><li>文档以多tab方式可显示多个接口文档</li><li>请求参数栏请求类型、是否必填着颜色区分</li><li>主页中粗略统计接口不同类型数量</li><li>支持接口在线搜索功能</li><li>左右菜单和内容页可自由拖动宽度</li><li>支持自定义全局参数功能，主页包括header及query两种类型</li><li>i18n国际化支持,目前支持：中文简体、中文繁体、英文</li><li>JSR-303 annotations 注解的支持</li></ul></blockquote><h1 id="二、Spring-boot整合Swagger-Bootstrap-UI"><a href="#二、Spring-boot整合Swagger-Bootstrap-UI" class="headerlink" title="二、Spring-boot整合Swagger-Bootstrap-UI"></a>二、Spring-boot整合Swagger-Bootstrap-UI</h1><blockquote><p>使用上次复习Mybatis-Plus时建立的项目，在该项目的基础上对Swagger-Bootstrap-ui进行初步学习。</p></blockquote><h2 id="2-1、引入依赖、编写配置类"><a href="#2-1、引入依赖、编写配置类" class="headerlink" title="2.1、引入依赖、编写配置类"></a>2.1、引入依赖、编写配置类</h2><blockquote><p>如果使用原有的swagger，那么需要引入的依赖有</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果使用swagger-bootstrap-ui，那么只需要引入下面两个依赖即可</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在config包下新建一个配置类</p><p>与普通swagger的配置类相比，swagger-bootstap-ui的配置类多了一个@EnableSwaggerBootstrapUI注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@EnableSwaggerBootstrapUI</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">webApiConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">&quot;webApi&quot;</span>)</span><br><span class="line">                .apiInfo(webApiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .paths(Predicates.not(PathSelectors.regex(<span class="string">&quot;/admin/.*&quot;</span>)))</span><br><span class="line">                .paths(Predicates.not(PathSelectors.regex(<span class="string">&quot;/error.*&quot;</span>)))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">webApiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;测试API&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;本文档描述了课程中心微服务接口定义&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">&quot;蔡大头&quot;</span>, <span class="string">&quot;http://wuhuqifei.com&quot;</span>, <span class="string">&quot;763882220@qq.com&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2、编写Controller并使用注解来添加信息"><a href="#2-2、编写Controller并使用注解来添加信息" class="headerlink" title="2.2、编写Controller并使用注解来添加信息"></a>2.2、编写Controller并使用注解来添加信息</h2><h3 id="2-2-1、UserController"><a href="#2-2-1、UserController" class="headerlink" title="2.2.1、UserController"></a>2.2.1、UserController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户管理控制器&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据用户id获取用户信息&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;addUser&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;添加用户对象&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;update&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;修改用户信息&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.saveOrUpdate(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id删除用户&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.removeById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2、常用注解说明"><a href="#2-2-2、常用注解说明" class="headerlink" title="2.2.2、常用注解说明"></a>2.2.2、常用注解说明</h3><blockquote><p>swagger及swagger-bootstrap-ui的常用注解有两个，分别为@Api与@ApiOperation</p></blockquote><ul><li>@Api</li></ul><blockquote><p>这个注解用于Controller类上，可以使用该注解的tags属性来为控制器添加备注</p></blockquote><ul><li>@ApiOperation</li></ul><blockquote><p>这个注解用于控制器的方法上，用于给控制器的具体方法添加注解</p></blockquote><h2 id="2-3、使用"><a href="#2-3、使用" class="headerlink" title="2.3、使用"></a>2.3、使用</h2><h3 id="2-3-1、在主启动类中添加注解，将swagger配置类纳入被扫描范围"><a href="#2-3-1、在主启动类中添加注解，将swagger配置类纳入被扫描范围" class="headerlink" title="2.3.1、在主启动类中添加注解，将swagger配置类纳入被扫描范围"></a>2.3.1、在主启动类中添加注解，将swagger配置类纳入被扫描范围</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.hzx.mpblog.mapper&quot;)</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.hzx.mpblog&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MpApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MpApplication.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;http://localhost:8848/doc.html&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;http://localhost:8848/swagger-ui.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在主启动类的两个输出语句中，<a href="http://localhost:8848/doc.html%E6%98%AFswagger-bootstrap-ui%E7%9A%84%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80%E3%80%82">http://localhost:8848/doc.html是swagger-bootstrap-ui的访问地址。</a></p><p><a href="http://localhost:8848/swagger-ui.html%E6%98%AFswagger%E7%9A%84%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80%E3%80%82">http://localhost:8848/swagger-ui.html是swagger的访问地址。</a></p></blockquote><h3 id="2-3-2、启动主启动类"><a href="#2-3-2、启动主启动类" class="headerlink" title="2.3.2、启动主启动类"></a>2.3.2、启动主启动类</h3><blockquote><p>分别进入两个链接中查看效果</p></blockquote><ul><li>swagger</li></ul><blockquote><p>主页面说明</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153717308.png" alt="image-20210129153717308"></p><blockquote><p>点击方法进入方法说明及测试界面，点击try it out</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153734979.png" alt="image-20210129153734979"></p><blockquote><p>在参数输入框中输入参数，点击execute执行方法</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153751549.png" alt="image-20210129153751549"></p><blockquote><p>测试结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153803544.png" alt="image-20210129153803544"></p><ul><li>swagger-bootstrap-ui</li></ul><blockquote><p>主页面说明</p><p>swagger-bootstrap-ui将测试页面与方法说明页面分开，在</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153813279.png" alt="image-20210129153813279"></p><blockquote><p>方法说明</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153821304.png" alt="image-20210129153821304"></p><blockquote><p>方法测试</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153830894.png" alt="image-20210129153830894"></p><blockquote><p>测试结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153838469.png" alt="image-20210129153838469"></p>]]></content>
      
      
      <categories>
          
          <category> 框架学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端学习 </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java应用学习（一）-Mybatis-plus框架</title>
      <link href="posts/2091692756.html"/>
      <url>posts/2091692756.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、MP简介"><a href="#一、MP简介" class="headerlink" title="一、MP简介"></a>一、MP简介</h1><blockquote><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p></blockquote><h2 id="1-1、特性"><a href="#1-1、特性" class="headerlink" title="1.1、特性"></a>1.1、特性</h2><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="1-2、支持的数据库"><a href="#1-2、支持的数据库" class="headerlink" title="1.2、支持的数据库"></a>1.2、支持的数据库</h2><blockquote><p>任何能使用 mybatis 进行 crud, 并且支持标准 sql 的数据库</p></blockquote><h1 id="二、快速入门"><a href="#二、快速入门" class="headerlink" title="二、快速入门"></a>二、快速入门</h1><blockquote><p>使用一个springboot项目来体验MP的强大之处。</p></blockquote><h2 id="2-1、建立入门项目的数据库与项目"><a href="#2-1、建立入门项目的数据库与项目" class="headerlink" title="2.1、建立入门项目的数据库与项目"></a>2.1、建立入门项目的数据库与项目</h2><blockquote><p>建表</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">create database mp;</span><br><span class="line">use mp;</span><br><span class="line"></span><br><span class="line">create table user(</span><br><span class="line">    id bigint(20) primary key auto_increment,</span><br><span class="line">    name varchar(50),</span><br><span class="line">    email varchar(50),</span><br><span class="line">    age int</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into</span><br><span class="line">    user(name, email, age)</span><br><span class="line">VALUES</span><br><span class="line">       (&#39;A&#39;,&#39;a@qq.com&#39;,18),</span><br><span class="line">       (&#39;B&#39;,&#39;b@qq.com&#39;,19),</span><br><span class="line">       (&#39;C&#39;,&#39;c@qq.com&#39;,12),</span><br><span class="line">       (&#39;D&#39;,&#39;d@qq.com&#39;,11),</span><br><span class="line">       (&#39;E&#39;,&#39;e@qq.com&#39;,111);</span><br></pre></td></tr></table></figure><blockquote><p>建立spring-boot项目，引入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>项目的application.yml配置文件如下</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mp?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;nullCatalogMeansCurrent=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">tianxin1230.</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><blockquote><p>编写主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.hzx.mpblog.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MpApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MpApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>根据数据库表建立对应entity实体类，这里使用Lombok插件并开启链式编程来简化开发</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编写UserMapper接口，该接口需要继承BaseMapper&lt; T &gt;，其中T为要操作的数据库表对应的实体类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2、编写测试类进行测试"><a href="#2-2、编写测试类进行测试" class="headerlink" title="2.2、编写测试类进行测试"></a>2.2、编写测试类进行测试</h2><blockquote><p>编写测试类，测试mybatis-plus为我们提供的查询所有方法</p></blockquote><ul><li>在selectList中，可以传入一个QueryWrapper查询条件构造器对象，但由于这里需要查询所有对象，所以不加条件筛选，传入null</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MpApplicationTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        userList.forEach(user -&gt;</span><br><span class="line">            System.out.println(user)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153047772.png" alt="image-20210129153047772"></p><h2 id="2-3、添加配置输出sql语句"><a href="#2-3、添加配置输出sql语句" class="headerlink" title="2.3、添加配置输出sql语句"></a>2.3、添加配置输出sql语句</h2><blockquote><p>我们可以在application.yml中添加配置，让mybatis-plus在执行时输出的sql语句</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印sql语句</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><blockquote><p>重新启动，测试结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153056405.png" alt="image-20210129153056405"></p><h1 id="三、CRUD扩展"><a href="#三、CRUD扩展" class="headerlink" title="三、CRUD扩展"></a>三、CRUD扩展</h1><h2 id="3-1、insert测试插入数据"><a href="#3-1、insert测试插入数据" class="headerlink" title="3.1、insert测试插入数据"></a>3.1、insert测试插入数据</h2><blockquote><p>使用Mybatis-plus自带的插入方法进行测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">&quot;小明&quot;</span>)</span><br><span class="line">            .setAge(<span class="number">18</span>)</span><br><span class="line">            .setEmail(<span class="string">&quot;xiaoming@qq.com&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.insert(user);</span><br><span class="line">    System.out.println(result == <span class="number">1</span> ? <span class="string">&quot;插入成功！&quot;</span> : <span class="string">&quot;插入失败！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查看testInsert()的执行结果并再次启动testFindAll()方法</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153116620.png" alt="image-20210129153116620"></p><blockquote><p>在这次插入操作中，我们没有指定插入数据库对象的id，这个属性是Mybatis-plus为我们生成的，Mybatis-plus提供的主键生成策略在枚举类IdType中.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">IdType</span> </span>&#123;</span><br><span class="line">    AUTO(<span class="number">0</span>),</span><br><span class="line">    NONE(<span class="number">1</span>),</span><br><span class="line">    INPUT(<span class="number">2</span>),</span><br><span class="line">    ID_WORKER(<span class="number">3</span>),</span><br><span class="line">    UUID(<span class="number">4</span>),</span><br><span class="line">    ID_WORKER_STR(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-1、雪花算法"><a href="#3-1-1、雪花算法" class="headerlink" title="3.1.1、雪花算法"></a>3.1.1、雪花算法</h3><blockquote><ul><li>雪花算法是推特开源的分布式ID生成算法，结果是一个long型的ID。</li><li>核心思想是：使用41bit作为毫秒数，10bit作为及其的ID（5个bit是数据中心，5个bit的及其ID），12bit作为毫秒的流水号（意味着每个节点在每秒可以产生4096个Id），最后还有一个符号位永远是0</li></ul></blockquote><h3 id="3-1-2、主键自增"><a href="#3-1-2、主键自增" class="headerlink" title="3.1.2、主键自增"></a>3.1.2、主键自增</h3><blockquote><p>配置主键自增</p><ul><li>在实体类字段上使用@TableId(type = IdType.AUTO)</li><li>要求数据库字段一定是自增的，否则会报错</li></ul></blockquote><h3 id="3-1-3、其余主键类型"><a href="#3-1-3、其余主键类型" class="headerlink" title="3.1.3、其余主键类型"></a>3.1.3、其余主键类型</h3><blockquote><p>AUTO(0)：自增<br>NONE(1)：不使用<br>INPUT(2)：手动输入<br>ID_WORKER(3)：默认唯一全局id<br>UUID(4)：uuid<br>ID_WORKER_STR(5)：默认唯一全局id字符串形式</p></blockquote><h2 id="3-2、update更新操作"><a href="#3-2、update更新操作" class="headerlink" title="3.2、update更新操作"></a>3.2、update更新操作</h2><blockquote><p>使用mybatis-plus提供的updateById方法可以快速修改表中数据，更新Id为2L的对象信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">2L</span>)</span><br><span class="line">        .setName(<span class="string">&quot;芜湖&quot;</span>)</span><br><span class="line">        .setEmail(<span class="string">&quot;wuhu@qq.com&quot;</span>)</span><br><span class="line">        .setAge(<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.updateById(user);</span><br><span class="line">    System.out.println(result == <span class="number">1</span> ? <span class="string">&quot;修改成功！&quot;</span> : <span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查看结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153136022.png" alt="image-20210129153136022"></p><h2 id="3-3、Mybatis-plus的自动填充功能"><a href="#3-3、Mybatis-plus的自动填充功能" class="headerlink" title="3.3、Mybatis-plus的自动填充功能"></a>3.3、Mybatis-plus的自动填充功能</h2><blockquote><p>在实际开发中，数据库往往有create_time和update_time两个字段，对于这两个字段，我们不希望手动填充，而希望程序或者数据库自动填充，mp提供了这个功能。</p><p>在数据库中添加create_time和update_time两个属性，并在实体类中添加对于字段。</p></blockquote><h3 id="3-3-1、数据库级别填充"><a href="#3-3-1、数据库级别填充" class="headerlink" title="3.3.1、数据库级别填充"></a>3.3.1、数据库级别填充</h3><blockquote><p>在新建的两个属性下面勾选根据时间戳自动更新即可，这种方式不推荐使用</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153147791.png" alt="image-20210129153147791"></p><h3 id="3-3-2、代码级别自动填充"><a href="#3-3-2、代码级别自动填充" class="headerlink" title="3.3.2、代码级别自动填充"></a>3.3.2、代码级别自动填充</h3><ul><li>在实体类的createTime和updateTime字段上添加注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 字段添加时填充内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 字段添加/更新时填充内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写一个处理器用于处理这两个注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//插入时的填充策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新时的填充策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在主启动类中添加组件扫描注解</li><li>测试插入，查看是否自动填充</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">&quot;小明111&quot;</span>)</span><br><span class="line">            .setAge(<span class="number">18</span>)</span><br><span class="line">            .setEmail(<span class="string">&quot;xiaoming@qq.com&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.insert(user);</span><br><span class="line">    System.out.println(result == <span class="number">1</span> ? <span class="string">&quot;插入成功！&quot;</span> : <span class="string">&quot;插入失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">2L</span>)</span><br><span class="line">        .setName(<span class="string">&quot;芜湖222&quot;</span>)</span><br><span class="line">        .setEmail(<span class="string">&quot;wuhu@qq.com&quot;</span>)</span><br><span class="line">        .setAge(<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.updateById(user);</span><br><span class="line">    System.out.println(result == <span class="number">1</span> ? <span class="string">&quot;修改成功！&quot;</span> : <span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动testFindAll方法查看结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153158628.png" alt="image-20210129153158628"></p><ul><li>自动填充使用成功。</li></ul><h2 id="3-4、乐观锁和悲观锁"><a href="#3-4、乐观锁和悲观锁" class="headerlink" title="3.4、乐观锁和悲观锁"></a>3.4、乐观锁和悲观锁</h2><blockquote><p>悲观锁十分悲观，他总是认为会出现问题，无论干什么都会上锁！</p><p>而乐观锁十分乐观，他总是认为不会出现问题，无论干什么都不去上锁！如果出现了问题，再次更新值测试。</p><p>下面介绍Mybatis-plus中乐观锁的实现方法</p></blockquote><h3 id="3-4-1、乐观锁的实现方式"><a href="#3-4-1、乐观锁的实现方式" class="headerlink" title="3.4.1、乐观锁的实现方式"></a>3.4.1、乐观锁的实现方式</h3><blockquote><p>取出记录时，获取当前version</p><p>更新时带上这个version</p><p>执行更新时，set version = newVersion where version = oldVersion</p><p>如果version不对，就更新失败</p></blockquote><ul><li>例子</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 乐观锁：</span><br><span class="line"># 1 先查询，获得版本号version &#x3D; 1</span><br><span class="line"># 假设现有AB两个线程在执行这条update语句，当A未执行完成时，B抢先完成这次更新，那么此时由于版本号version已经为2，所以A线程的更新工作不会成功，此时就保证了线程间的通讯安全</span><br><span class="line"></span><br><span class="line">update user set name &#x3D; &quot;芜湖&quot;,version &#x3D; version + 1 where id &#x3D; 2 and version &#x3D; 1;</span><br></pre></td></tr></table></figure><blockquote><p>给数据库表中添加一个version属性</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153213565.png" alt="image-20210129153213565"></p><blockquote><p>给实体类中添加一个version字段，同时在上面添加一个@Version注解，表明这是一个乐观锁</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure><blockquote><p>在配置类中注册乐观锁组件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span>  </span>&#123;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 注册乐观锁插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5、select查询操作"><a href="#3-5、select查询操作" class="headerlink" title="3.5、select查询操作"></a>3.5、select查询操作</h2><h3 id="3-5-1、根据id查询数据"><a href="#3-5-1、根据id查询数据" class="headerlink" title="3.5.1、根据id查询数据"></a>3.5.1、根据id查询数据</h3><blockquote><p>根据传入的主键值查询数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153228587.png" alt="image-20210129153228587"></p><h3 id="3-5-2、根据集合对象查询数据"><a href="#3-5-2、根据集合对象查询数据" class="headerlink" title="3.5.2、根据集合对象查询数据"></a>3.5.2、根据集合对象查询数据</h3><blockquote><p>传入一个主键集合，根据传入的多个主键值查询多条数据，使用selectBatchIds方法，该方法实际上使用mysql中的in关键字</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">5L</span>));</span><br><span class="line">    users.forEach(user -&gt;</span><br><span class="line">        System.out.println(user)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153239557.png" alt="image-20210129153239557"></p><h3 id="3-5-3、根据Map对象查询数据"><a href="#3-5-3、根据Map对象查询数据" class="headerlink" title="3.5.3、根据Map对象查询数据"></a>3.5.3、根据Map对象查询数据</h3><blockquote><p>传入一个map，mp将会以键为字段，值为字段值进行拼接并查询，如果map中有多个键值对，那么会以and关键词拼接</p></blockquote><ul><li>当map中只有一个键值对时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;id&quot;</span>,<span class="number">1L</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">    users.forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153248616.png" alt="image-20210129153248616"></p><ul><li>当map中包含多个键值对时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByMaps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;id&quot;</span>,<span class="number">2L</span>);</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;芜湖222&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">    users.forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153259081.png" alt="image-20210129153259081"></p><h3 id="3-5-4、分页查询"><a href="#3-5-4、分页查询" class="headerlink" title="3.5.4、分页查询"></a>3.5.4、分页查询</h3><blockquote><p>一般来说，分页查询的实现有以下几种方式</p><ul><li>使用limit关键字进行分页</li><li>使用PageHelper和PageInfo等第三方插件进行分页</li><li>使用Mybatis-plus自带的分页插件进行分页</li></ul><p>下面介绍mp的分页插件</p></blockquote><ul><li>在mybatis-plus配置类中配置拦截器组件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 第一个参数：当前页</span></span><br><span class="line"><span class="comment">     * 第二个参数：每页数据条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//使用Mybatis-plus提供的selectPage方法，传入分页对象page</span></span><br><span class="line">    IPage&lt;User&gt; userIPage = userMapper.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//得到的Page对象中，records属性就是需要的集合，该集合中包含了查询的结果</span></span><br><span class="line">    List&lt;User&gt; records = userIPage.getRecords();</span><br><span class="line">    records.forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153308347.png" alt="image-20210129153308347"></p><h3 id="3-5-5、分页插件Page属性简介"><a href="#3-5-5、分页插件Page属性简介" class="headerlink" title="3.5.5、分页插件Page属性简介"></a>3.5.5、分页插件Page属性简介</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IPage</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; records;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> total;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> current;</span><br><span class="line">    <span class="keyword">private</span> String[] ascs;</span><br><span class="line">    <span class="keyword">private</span> String[] descs;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> optimizeCountSql;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isSearchCount;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><blockquote><ul><li>List<T> records–用来存放查询出来的数据</li><li>long total–返回记录的总数</li><li>long size–每页显示条数，默认 10</li><li>long current–当前页,默认1</li><li>String[] ascs–升序字段集合</li><li>String[] descs–降序字段集合</li><li>boolean optimizeCountSql–自动优化count  sql，默认为true</li><li>boolean isSearchCount–是否进行count查询，默认为true</li></ul></blockquote><h2 id="3-6、delete删除操作"><a href="#3-6、delete删除操作" class="headerlink" title="3.6、delete删除操作"></a>3.6、delete删除操作</h2><h3 id="3-6-1、根据id删除记录"><a href="#3-6-1、根据id删除记录" class="headerlink" title="3.6.1、根据id删除记录"></a>3.6.1、根据id删除记录</h3><blockquote><p>使用mp提供的deleteById方法，返回值为数据库表中受影响数据条数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.deleteById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(result == <span class="number">1</span> ? <span class="string">&quot;删除成功！&quot;</span> : <span class="string">&quot;删除失败！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153320211.png" alt="image-20210129153320211"></p><h3 id="3-6-2、通过传入的集合对象进行批量删除"><a href="#3-6-2、通过传入的集合对象进行批量删除" class="headerlink" title="3.6.2、通过传入的集合对象进行批量删除"></a>3.6.2、通过传入的集合对象进行批量删除</h3><blockquote><p>使用mp提供的deleteBatchIds方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.deleteBatchIds(Arrays.asList(<span class="number">2L</span>,<span class="number">3L</span>,<span class="number">1L</span>));</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：由于数据库中id为1L的数据不存在，所以影响的数据条数只有两条，与批量插入一样，使用了mysql中的In关键字</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153331310.png" alt="image-20210129153331310"></p><h3 id="3-6-3、通过传入的map进行删除"><a href="#3-6-3、通过传入的map进行删除" class="headerlink" title="3.6.3、通过传入的map进行删除"></a>3.6.3、通过传入的map进行删除</h3><blockquote><p>与通过map进行查询类似，当有多个键值对时，使用and拼接</p></blockquote><ul><li>只有一个键值对时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;E&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.deleteByMap(map);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153341026.png" alt="image-20210129153341026"></p><ul><li>传入多个键值对时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByMaps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.deleteByMap(map);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153354773.png" alt="image-20210129153354773"></p><h2 id="3-7、配置逻辑删除"><a href="#3-7、配置逻辑删除" class="headerlink" title="3.7、配置逻辑删除"></a>3.7、配置逻辑删除</h2><blockquote><p>逻辑删除：在数据库中没有被移除，只是使用一个变量来使这一条记录失效</p><p>物理删除：从数据库中直接移除</p><p>管理员可以查看被删除的记录，类似于回收站</p></blockquote><h3 id="3-7-1、配置步骤"><a href="#3-7-1、配置步骤" class="headerlink" title="3.7.1、配置步骤"></a>3.7.1、配置步骤</h3><blockquote><p>在表中添加一个deleted字段，</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153422780.png" alt="image-20210129153422780"></p><blockquote><p>在实体类中添加一个deleted字段，并添加注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 逻辑删除字段</span></span><br><span class="line"><span class="comment"> * 添加一个逻辑删除注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure><blockquote><p>配置逻辑删除组件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置逻辑删除组件</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ISqlInjector <span class="title">sqlInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LogicSqlInjector();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在application.yml文件中配置</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>当deleted值为1时，证明该数据被逻辑删除</li><li>当deleted值为0时，证明该数据没有被逻辑删除</li></ul><h3 id="3-7-2、测试逻辑删除"><a href="#3-7-2、测试逻辑删除" class="headerlink" title="3.7.2、测试逻辑删除"></a>3.7.2、测试逻辑删除</h3><blockquote><p>先在数据库中新插入几条数据，以便后面的测试</p></blockquote><ul><li>逻辑删除id为3L的数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoginDeleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.deleteById(<span class="number">3L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：使用了update语句</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153433435.png" alt="image-20210129153433435"></p><h1 id="四、性能分析插件"><a href="#四、性能分析插件" class="headerlink" title="四、性能分析插件"></a>四、性能分析插件</h1><blockquote><p>我们在平时开发中，会遇到一些慢sql，mp提供了一个性能分析插件，如果超过指定时间，就停止运行</p></blockquote><h2 id="4-1、作用"><a href="#4-1、作用" class="headerlink" title="4.1、作用"></a>4.1、作用</h2><blockquote><p>性能分析拦截器，用于输出每条sql语句及其执行时间</p></blockquote><h2 id="4-2、使用"><a href="#4-2、使用" class="headerlink" title="4.2、使用"></a>4.2、使用</h2><blockquote><p>在application.yml中配置开发环境，将当前环境设置为dev</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><blockquote><p>在配置类中配置sql执行效率分析插件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * sql执行效率分析插件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Profile</span>(&#123;&quot;dev&quot;,&quot;test&quot;&#125;)表示此插件只在生产和测试环境下使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Profile(&#123;&quot;dev&quot;,&quot;test&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PerformanceInterceptor <span class="title">performanceInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PerformanceInterceptor performanceInterceptor = <span class="keyword">new</span> PerformanceInterceptor();</span><br><span class="line">    <span class="comment">//设置sql执行的最大时间，如果超过这个时间就不执行</span></span><br><span class="line">    performanceInterceptor.setMaxTime(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//设置格式化SQL语句（美化）</span></span><br><span class="line">    performanceInterceptor.setFormat(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> performanceInterceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3、测试"><a href="#4-3、测试" class="headerlink" title="4.3、测试"></a>4.3、测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateAndSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;芜湖&quot;</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;wuhu@qq.com&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">1222</span>);</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.updateById(user);</span><br><span class="line"></span><br><span class="line">    System.out.println(result);</span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    userList.forEach(System.out :: println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果–报告该sql超时</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153444986.png" alt="image-20210129153444986"></p><blockquote><p>将最大时间设置为100ms，再次测试，修改       performanceInterceptor.setMaxTime(100);</p></blockquote><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153458241.png" alt="image-20210129153458241"></p><h1 id="五、条件构造器Wrapper"><a href="#五、条件构造器Wrapper" class="headerlink" title="五、条件构造器Wrapper"></a>五、条件构造器Wrapper</h1><blockquote><p>Wrapper是一个接口，我们使用Wrapper的实现类：QueryWrapper来实现条件构造</p></blockquote><h2 id="5-1、QueryWrapper的一些方法"><a href="#5-1、QueryWrapper的一些方法" class="headerlink" title="5.1、QueryWrapper的一些方法"></a>5.1、QueryWrapper的一些方法</h2><h3 id="5-1-1、isNotNull-“列名”"><a href="#5-1-1、isNotNull-“列名”" class="headerlink" title="5.1.1、isNotNull(“列名”)"></a>5.1.1、isNotNull(“列名”)</h3><blockquote><p>这个字段的值不为空</p></blockquote><h3 id="5-1-2、ge-eq-ne-le-gt-lt-“列名”-值"><a href="#5-1-2、ge-eq-ne-le-gt-lt-“列名”-值" class="headerlink" title="5.1.2、ge/eq/ne/le/gt/lt(“列名”,值)"></a>5.1.2、ge/eq/ne/le/gt/lt(“列名”,值)</h3><blockquote><p>这个字段的值必须大于等于/等于/不等于/小于等于/严格大于/严格小于传入的值</p></blockquote><h3 id="5-1-3、between-“列名”-左边值-右边值"><a href="#5-1-3、between-“列名”-左边值-右边值" class="headerlink" title="5.1.3、between(“列名”,左边值,右边值)"></a>5.1.3、between(“列名”,左边值,右边值)</h3><blockquote><p>这个属性的值必须在左边值和右边值之间</p></blockquote><h3 id="5-1-4、notLike-“列名”-值"><a href="#5-1-4、notLike-“列名”-值" class="headerlink" title="5.1.4、notLike(“列名”,值)"></a>5.1.4、notLike(“列名”,值)</h3><blockquote><p>字段值 not like “%值%”</p></blockquote><h3 id="5-1-5、likeLeft-likeRight-“列名”-值"><a href="#5-1-5、likeLeft-likeRight-“列名”-值" class="headerlink" title="5.1.5、likeLeft/likeRight(“列名”,值)"></a>5.1.5、likeLeft/likeRight(“列名”,值)</h3><blockquote><p>字段 like “%值”/“值%”</p></blockquote><h3 id="5-1-6、in-notIn-“列名”-Object-…values"><a href="#5-1-6、in-notIn-“列名”-Object-…values" class="headerlink" title="5.1.6、in/notIn(“列名”,Object …values)"></a>5.1.6、in/notIn(“列名”,Object …values)</h3><blockquote><p>字段  in/notIn(v0,v1…vn)</p></blockquote><h3 id="5-1-7、inSql-noInSql-“列名”-sql语句"><a href="#5-1-7、inSql-noInSql-“列名”-sql语句" class="headerlink" title="5.1.7、inSql/noInSql(“列名”,sql语句)"></a>5.1.7、inSql/noInSql(“列名”,sql语句)</h3><blockquote><p>字段 in/notIn (sql语句)，例如 inSql/notInSql(“id”,select * from user where id &lt; 3)</p><p>等价于id in/notIn (select * from user where id &lt; 3)</p></blockquote><h3 id="5-1-8、分组排序"><a href="#5-1-8、分组排序" class="headerlink" title="5.1.8、分组排序"></a>5.1.8、分组排序</h3><blockquote><ul><li>groupBy(R… columns); // 等价于 GROUP BY 字段, …， 例: groupBy(“id”, “name”) —&gt; group by id,name</li><li>orderByAsc(R… columns); // 等价于 ORDER BY 字段, … ASC， 例: orderByAsc(“id”, “name”) —&gt; order by id ASC,name ASC</li><li>orderByDesc(R… columns); // 等价于 ORDER BY 字段, … DESC， 例: orderByDesc(“id”, “name”) —&gt; order by id DESC,name DESC</li><li>having(String sqlHaving, Object… params); // 等价于 HAVING ( sql语句 )， 例: having(“sum(age) &gt; {0}”, 11) —&gt; having sum(age) &gt; 11</li></ul></blockquote><h2 id="5-2、查询示例"><a href="#5-2、查询示例" class="headerlink" title="5.2、查询示例"></a>5.2、查询示例</h2><blockquote><p>查询name、email不为空，且年龄大于等于12岁的用户(.isNotNull()、.ge())</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 查询name、email不为空，且年龄大于等于12岁的用户(.isNotNull()、.ge())</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuestion01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper wrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">    wrapper.isNotNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    wrapper.isNotNull(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    wrapper.ge(<span class="string">&quot;age&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    List users = userMapper.selectList(wrapper);</span><br><span class="line">    users.forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>结果</p></li><li><p>sql语句为：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&gt;  Preparing: SELECT id,name,age,email,create_time,update_time,version,deleted FROM user WHERE deleted&#x3D;0 AND email IS NOT NULL AND name IS NOT NULL AND age &gt;&#x3D; ? </span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: 12(Integer)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153512076.png" alt="image-20210129153512076"></p><blockquote><p>查询name属性等于”小明”的用户</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 查询name属性等于&quot;小明&quot;的用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuestion02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper wrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">    List users = userMapper.selectList(wrapper);</span><br><span class="line">    users.forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153519861.png" alt="image-20210129153519861"></p><blockquote><p>查询年龄在10-30之间的<strong>用户个数</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 查询年龄在10-30之间的用户个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuestion03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper wrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">    wrapper.between(<span class="string">&quot;age&quot;</span>,<span class="number">10</span>,<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">int</span> count = userMapper.selectCount(wrapper);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153527524.png" alt="image-20210129153527524"></p><blockquote><p>查询id小于等于4且没被逻辑删除的用户</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 查询id小于等于4且没被逻辑删除的用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuestion04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper wrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">    String inSql = <span class="string">&quot;select id from user where id &lt;= 4&quot;</span>;</span><br><span class="line">    wrapper.inSql(<span class="string">&quot;id&quot;</span>,inSql);</span><br><span class="line">    List users = userMapper.selectList(wrapper);</span><br><span class="line">    users.forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>sql语句为：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT id,name,age,email,create_time,update_time,version,deleted FROM user WHERE deleted&#x3D;0 AND id IN (select id from user where id &lt;&#x3D; 4)</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153535669.png" alt="image-20210129153535669"></p><blockquote><p>通过id进行降序排序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 查询所有用户，并根据id进行降序排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuestion05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper wrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">    wrapper.orderByDesc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    List users = userMapper.selectList(wrapper);</span><br><span class="line">    users.forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153544738.png" alt="image-20210129153544738"></p><h1 id="六、代码生成器"><a href="#六、代码生成器" class="headerlink" title="六、代码生成器"></a>六、代码生成器</h1><h2 id="6-1、介绍"><a href="#6-1、介绍" class="headerlink" title="6.1、介绍"></a>6.1、介绍</h2><blockquote><p>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p></blockquote><h2 id="6-2、使用"><a href="#6-2、使用" class="headerlink" title="6.2、使用"></a>6.2、使用</h2><h3 id="6-2-1、引入依赖"><a href="#6-2-1、引入依赖" class="headerlink" title="6.2.1、引入依赖"></a>6.2.1、引入依赖</h3><blockquote><p>代码生成器需要使用模板引擎，这里使用velocity模板引擎</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>配置需要生成对于后台的数据库，这里以leyou_shop数据库的user表为例，生成后台代码</p></blockquote><h3 id="6-2-2、编写代码自动生成器CodeAutoCreator类"><a href="#6-2-2、编写代码自动生成器CodeAutoCreator类" class="headerlink" title="6.2.2、编写代码自动生成器CodeAutoCreator类"></a>6.2.2、编写代码自动生成器CodeAutoCreator类</h3><blockquote><p>这里以leyou_shop库的spu表为例</p></blockquote><ul><li>表结构如下</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153552969.png" alt="image-20210129153552969"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 蔡大头</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: CodeAutoGenerator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@projectName</span> mybatis-plus-blog</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/12/1016:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeAutoGenerator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">        <span class="comment">// 2、全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir(<span class="string">&quot;E:\\java\\blog\\src\\main\\java&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;蔡大头&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>); <span class="comment">//生成后是否打开资源管理器</span></span><br><span class="line">        gc.setFileOverride(<span class="keyword">false</span>); <span class="comment">//重新生成时文件是否覆盖</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);<span class="comment">//去掉Service接口的首字母I</span></span><br><span class="line">        gc.setIdType(IdType.AUTO); <span class="comment">//主键策略</span></span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);<span class="comment">//定义生成的实体类中日期类型</span></span><br><span class="line">        gc.setSwagger2(<span class="keyword">true</span>);<span class="comment">//开启Swagger2模式</span></span><br><span class="line"></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/leyou_shop?serverTimezone=UTC&quot;</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;tianxin1230.&quot;</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setParent(<span class="string">&quot;com.hzx&quot;</span>);</span><br><span class="line">        pc.setModuleName(<span class="string">&quot;mpblog&quot;</span>); <span class="comment">//模块名</span></span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setInclude(<span class="string">&quot;spu&quot;</span>);</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);<span class="comment">//数据库表映射到实体的命名策略</span></span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">&quot;_&quot;</span>); <span class="comment">//生成实体时去掉表前缀</span></span><br><span class="line"></span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);<span class="comment">//数据库表字段映射到实体的命名策略</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>); <span class="comment">// lombok 模型 @Accessors(chain = true) setter链式操作</span></span><br><span class="line"></span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>); <span class="comment">//restful api风格控制器</span></span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>); <span class="comment">//url中驼峰转连字符</span></span><br><span class="line"></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        <span class="comment">// 6、执行</span></span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3、测试及说明"><a href="#6-3、测试及说明" class="headerlink" title="6.3、测试及说明"></a>6.3、测试及说明</h2><blockquote><p>生成路径、主键策略</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153604973.png" alt="image-20210129153604973"></p><blockquote><p>设置包名和模块名</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153612043.png" alt="image-20210129153612043"></p><blockquote><p>设置要生成的表</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153620219.png" alt="image-20210129153620219"></p><blockquote><p>启动程序，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153637898.png" alt="image-20210129153637898"></p><blockquote><p>Mybatis-plus只对mybatis做增强，不做修改，所以Mybatis有的功能，MP均能实现，对于一些复杂的查询，可以使用写xml文件的方式来完成。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 框架学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端学习 </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式学习总结（一）-单例模式</title>
      <link href="posts/1986796058.html"/>
      <url>posts/1986796058.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1、单例模式介绍"><a href="#1、单例模式介绍" class="headerlink" title="1、单例模式介绍"></a>1、单例模式介绍</h2><blockquote><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><p><strong>注意：</strong></p><ul><li>1、单例类只能有一个实例。</li><li>2、单例类必须自己创建自己的唯一实例。</li><li>3、单例类必须给所有其他对象提供这一实例。</li></ul><p>下面介绍几种单例模式的实现方法</p></blockquote><h2 id="2、饿汉式"><a href="#2、饿汉式" class="headerlink" title="2、饿汉式"></a>2、饿汉式</h2><blockquote><p>这种单例模式实现简单，且在多线程环境下保证了并发全，但缺点是无法实现懒加载，方法单例在类加载的时候就会被创建，可能会造成空间浪费，这种单例模式会被反射和序列化工具破坏。</p></blockquote><blockquote><p>实现思路</p></blockquote><ul><li>在类中new 一个静态类对象instance</li><li>私有化构造方法</li><li>编写一个静态方法用于返回第一步new的instance对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton01</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton01 instance = <span class="keyword">new</span> Singleton01();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton01</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton01 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个实现方法在高并发下线程安全，但可以被反射和序列化工具破坏，下面一一进行测试</p></blockquote><h3 id="2-1、使用反射破坏"><a href="#2-1、使用反射破坏" class="headerlink" title="2.1、使用反射破坏"></a>2.1、使用反射破坏</h3><ul><li>测试代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Singleton01.class;</span><br><span class="line">Constructor constructor = clazz.getDeclaredConstructor();</span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//使用反射获取的构造器新建的对象</span></span><br><span class="line">Singleton01 singleton01 = (Singleton01) constructor.newInstance();</span><br><span class="line"><span class="comment">//使用单例类方法获取的对象</span></span><br><span class="line">Singleton01 instance = getInstance();</span><br><span class="line"><span class="comment">//比较地址</span></span><br><span class="line">System.out.println(singleton01 == instance);</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129152932524.png" alt="image-20210129152932524"></p><h3 id="2-2、使用序列化工具进行破坏，下面给出序列化工具及演示代码"><a href="#2-2、使用序列化工具进行破坏，下面给出序列化工具及演示代码" class="headerlink" title="2.2、使用序列化工具进行破坏，下面给出序列化工具及演示代码"></a>2.2、使用序列化工具进行破坏，下面给出序列化工具及演示代码</h3><ul><li>序列化工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializationUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 序列化后的字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(Object obj) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">            out.writeObject(obj);</span><br><span class="line">            <span class="keyword">return</span> byteArrayOutputStream.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes 对象序列化后的字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 反序列化后的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == bytes) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">                ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(byteArrayInputStream);</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> in.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取单例对象并进行序列化</span></span><br><span class="line">Singleton01 instance = getInstance();</span><br><span class="line"><span class="keyword">byte</span>[] bytes = SerializationUtils.serialize(instance);</span><br><span class="line"><span class="comment">//进行反序列化，获取instance对象</span></span><br><span class="line">Singleton01 deserializeInstance = (Singleton01)SerializationUtils.deserialize(bytes);</span><br><span class="line"><span class="comment">//比较两个对象的地址</span></span><br><span class="line">System.out.println(instance);</span><br><span class="line">System.out.println(deserializeInstance);</span><br><span class="line">System.out.println(instance == deserializeInstance);</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129152944497.png" alt="image-20210129152944497"></p><h3 id="2-3、问题解决方案"><a href="#2-3、问题解决方案" class="headerlink" title="2.3、问题解决方案"></a>2.3、问题解决方案</h3><blockquote><p>对于反射，我们可以在私有的构造函数中做一些处理，当用户进入饿汉式单例模式的构造方法时，我们可以判断当前静态对象instance是否为空，如果不为空，直接抛出一个异常，让其他人不能用反射来破坏单例模式。</p></blockquote><ul><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>再次执行上面的测试代码，结果为</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/tianxin763882220/images/master/blog/20201208151900.png" alt="image-20201208151900669"></p><blockquote><p>由于类的静态成员的序列化问题，所以每次反序列化都会new一个类对象，我们可以写一个readReslove方法来时其序列化和反序列化使用的都是同一个instance对象。</p></blockquote><ul><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129152958851.png" alt="image-20210129152958851"></p><h2 id="3、饿汉式单例模式的改进–登记式"><a href="#3、饿汉式单例模式的改进–登记式" class="headerlink" title="3、饿汉式单例模式的改进–登记式"></a>3、饿汉式单例模式的改进–登记式</h2><blockquote><p>登记式单例模式采用了一个静态内部类来持有该类的单实例对象，在外部类被加载时，静态内部类不会被加载，即类的单例对象不会被创建，当用户第一次使用类的getInstance方法时，类的单实例才会被加载，这样既保证了线程安全，又起到了懒加载的效果。</p></blockquote><h3 id="3-1、登记式实现思路"><a href="#3-1、登记式实现思路" class="headerlink" title="3.1、登记式实现思路"></a>3.1、登记式实现思路</h3><ul><li>在类中添加一个静态内部类SingtonHolder，类中存放外部类的唯一实例instance</li><li>私有化构造器，在构造器中通过判断静态内部类中instance实例是否为空来决定要不要抛出异常。</li><li>在外部类中构建一个静态方法getInstance来返回类的单实例。</li><li>写一个readReslove方法来防止序列化破坏单例。</li></ul><h3 id="3-2、代码实现"><a href="#3-2、代码实现" class="headerlink" title="3.2、代码实现"></a>3.2、代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton02</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Singleton02 instance = <span class="keyword">new</span> Singleton02();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(SingletonHolder.instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton02 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>静态内部类的加载时机，我们可以在Sington2的构造函数中输出一段语句来判断静态内部类的加载时间。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;singleton.Singleton02&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-----------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">Singleton02 instance = getInstance();</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153010304.png" alt="image-20210129153010304"></p><ul><li>结论：静态内部类在外部类加载时不会被加载，而是在用户第一次调用getInstance方法时才加载。</li></ul><blockquote><p>小结：对于饿汉式，推荐使用登记式。</p></blockquote><h2 id="4、懒汉式和双检锁"><a href="#4、懒汉式和双检锁" class="headerlink" title="4、懒汉式和双检锁"></a>4、懒汉式和双检锁</h2><blockquote><p>懒汉式单例模式意味着在类加载时不创建类的单实例对象，而是当用户需要实例时才去创建对象，这种方法实现了懒加载，且实现简单，但不能保证多线程环境下的单例唯一性。</p></blockquote><h3 id="4-1、代码实现"><a href="#4-1、代码实现" class="headerlink" title="4.1、代码实现"></a>4.1、代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton03</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton03 instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton03</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Singleton03 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton03();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种单例模式存在许多问题，除了前面提到的可以用反射和序列化工具破坏外，这种单例模式在多线程并发环境下不能保证单例的唯一性，给出测试代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(getInstance());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：可以看到出现了两个对象，所以需要对这种模式进行改进</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153022773.png" alt="image-20210129153022773"></p><h3 id="4-2、解决懒汉式在多线程并发下的线程安全问题"><a href="#4-2、解决懒汉式在多线程并发下的线程安全问题" class="headerlink" title="4.2、解决懒汉式在多线程并发下的线程安全问题"></a>4.2、解决懒汉式在多线程并发下的线程安全问题</h3><blockquote><p>在getInstance方法中添加一个synchronizd块锁定代码，就可以解决线程安全问题，下面给出代码实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton04 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (Singleton04.class) &#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton04();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这样就可以保证多线程下的线程安全问题，但这种直接加同步块的代码会影响程序的性能，所以我们可以通过引进双检锁模式的方法在保证线程安全的前提下尽可能地保证性能。</p></blockquote><h3 id="4-3、双检锁"><a href="#4-3、双检锁" class="headerlink" title="4.3、双检锁"></a>4.3、双检锁</h3><blockquote><p>同样对getInstance方法进行改造，在同步块外再次添加一个判断，即单例对象为空时，才进入同步块及以后代码，代码实现如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckLock <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (DoubleCheckLock.class) &#123;</span><br><span class="line">            <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> DoubleCheckLock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>假设AB同时进入第一个if判断，由于synchronized块的存在，AB有一个线程会进入同步块中，其他线程等待，进入同步块的线程判断当前单实例对象为空，于是会初始化对象，然后退出synchronized块，此时另外的线程进入代码块时，由于instance已经被初始化，所以会直接返回已经初始化的instance。之后的线程在进入synchronized块时会先进行一次判断，此时的instance已经不为空，所以直接返回instance。</p></blockquote><ul><li>可能遇到的问题</li></ul><blockquote><p>由于JVM机存在指令重排，同时初始化instance对象（instance = new DoubleCheckLock()）执行的操作如下</p><p>1 分配对象内存空间</p><p>2 初始化对象</p><p>3 instance指向1分配的空间</p><p>出现指令重排后，执行的操作如下</p><p>1 分配对象内存空间</p><p>2 instance指向1分配的空间</p><p>3 初始化对象</p><p>如果此时其他线程在指令重排的第2步就对instance进行判断，那么可能拿到一个空的instance对象，因为在指令排序的第2步操作后，instance指向的地址已经不为空。</p></blockquote><ul><li>解决方案：使用<strong>volatile</strong>关键字修饰instance变量</li></ul><blockquote><p>双检锁的完整实现代码如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheckLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> DoubleCheckLock instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 在构造方法中防止反射破坏单例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheckLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckLock <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DoubleCheckLock.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> DoubleCheckLock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 编写一个readResolve方法防止序列化破坏单例模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前类的单实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法学习（二）-字符串相关问题</title>
      <link href="posts/4173931752.html"/>
      <url>posts/4173931752.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1、String、StringBuffer与StringBuilder的区别"><a href="#1、String、StringBuffer与StringBuilder的区别" class="headerlink" title="1、String、StringBuffer与StringBuilder的区别"></a>1、String、StringBuffer与StringBuilder的区别</h2><h3 id="1-1、String类"><a href="#1-1、String类" class="headerlink" title="1.1、String类"></a>1.1、String类</h3><blockquote><p>分析源码可知，String对象的内容是存储在一个char数组中，且这个数组使用final修饰，这也是String对象不可变的原因。当进行字符串拼接时，虚拟机会新建一个字符串对象，然后将新的字符串对象赋值给原来的引用，而不是真的修改了原来字符串对象的值。</p><p>字符串重写了Object父类的equals方法。</p></blockquote><h3 id="1-2、StringBuffer类和StringBuilder类"><a href="#1-2、StringBuffer类和StringBuilder类" class="headerlink" title="1.2、StringBuffer类和StringBuilder类"></a>1.2、StringBuffer类和StringBuilder类</h3><blockquote><p>这两个类均继承于AbstractStringBuilder类，但分析源码可知StringBuffer的方法都添加了synchronized关键词进行修饰，所以StringBuffer是线程安全的，而没有使用synchronized修饰方法的StringBuilder是线程不安全的，但StringBuilder的速度要远远高于StringBuffer，所以在能保证线程安全的情况下，StringBuilder的优先级要高于StringBuffer。</p></blockquote><h3 id="1-3、总结"><a href="#1-3、总结" class="headerlink" title="1.3、总结"></a>1.3、总结</h3><ul><li>String是一个final修饰的类，所有的属性也是final的，所以String具有不可变性，也就是对字符串的操作，如拼接、剪切都会产生新的String对象。</li><li>StringBuffer本质是一个线程安全的可修改字符串序列。因为保证线程安全，所以会带来额外的性能消耗。</li><li>StringBuilder本质上和StringBuffer没有区别，但是StringBuilder去掉了线程安全部分提高了操作效率，是绝大部分情况下字符串拼接的首选。</li><li>如果确定拼接字符串会发生多次，并且长度可预计，那么可以在开始的时候指定合适的大小，避免数组扩容造成的开销。</li></ul><h2 id="2、找出字符串中出现最多次的字符和出现的次数"><a href="#2、找出字符串中出现最多次的字符和出现的次数" class="headerlink" title="2、找出字符串中出现最多次的字符和出现的次数"></a>2、找出字符串中出现最多次的字符和出现的次数</h2><blockquote><p>遍历字符串，并使用一个HashMap来存储出现字符及出现的次数，以字符为key，次数为value。解题思路如下</p></blockquote><ul><li><p>假定字符串中出现最多的字符maxCode为当前字符串的第一个元素，出现次数maxCount初始化为0</p></li><li><p>遍历字符串，判断当前字符是否在hashmap的key中，如果包含，令次数+1，否则将该字符为key，1为value放入hashmap中</p></li><li><p>判断maxCount和当前字符出现次数的关系，如果maxCount小于当前字符出现次数，就令maxCode = 当前字符，然后更新maxCode，最后返回maxCode和maxCount即可。</p></li></ul><blockquote><p>代码实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 找出字符串中出现最多次的字符和出现的次数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str 目标字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 以maxCode为键、maxCount为值的map</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Character, Integer&gt; <span class="title">findMostCodeAndCount</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> maxCode = str.charAt(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> maxCount = <span class="number">0</span>;</span><br><span class="line">    Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        Character currentCode = str.charAt(i);</span><br><span class="line">        Integer count = map.get(currentCode);</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="keyword">null</span>) &#123;</span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(currentCode, count);</span><br><span class="line">        <span class="keyword">if</span>(maxCount &lt; count) &#123;</span><br><span class="line">            maxCode = currentCode;</span><br><span class="line">            maxCount = count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;Character, Integer&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    result.put(maxCode,maxCount);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试代码及结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;abcacba&quot;</span>;</span><br><span class="line">Map result = findMostCodeAndCount(str);</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129152842664.png" alt="image-20210129152842664"></p><h2 id="3、找出字符串中第一次重复出现的字符"><a href="#3、找出字符串中第一次重复出现的字符" class="headerlink" title="3、找出字符串中第一次重复出现的字符"></a>3、找出字符串中第一次重复出现的字符</h2><blockquote><p>使用一个HashSet来解决问题，由于Set有不允许元素重复的性质，Set的add方法在添加重复值是会返回false，所以我们可以用这个性质来判断元素是否重复。</p></blockquote><blockquote><p>代码实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 找出字符串中第一次重复出现的字符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str 目标字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回第一次重复的字符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Character <span class="title">getFirstRepeat</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    Character result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        Character currentCode = str.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(!set.add(currentCode)) &#123;</span><br><span class="line">            result = currentCode;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试代码和结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;abcacba&quot;</span>;</span><br><span class="line">Character result = getFirstRepeat(str);</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129152855053.png" alt="image-20210129152855053"></p><h2 id="4、两个大数之和"><a href="#4、两个大数之和" class="headerlink" title="4、两个大数之和"></a>4、两个大数之和</h2><blockquote><p>题目描述：现在有两个数，位数均超过1000位，例如</p><ul><li><p>String a = “123343432…”</p></li><li><p>String b = “3974928374928…”</p></li></ul><p>这两个大数无法转换为Integer计算，所以我们使用两个数组来存储这两个数，然后进行计算。</p><p>解题思路如下</p></blockquote><ul><li>设这两个数中大的数的位数位m，则结果的最大位数位m+1</li><li>用一个int数组来存储结果</li></ul><blockquote><p>代码实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 编程两个大数之和</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> num1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> num2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sumOfBigNum</span><span class="params">(String num1,String num2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] largeArray = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">char</span>[] smallArray = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(num1.length() &gt;= num2.length()) &#123;</span><br><span class="line">        largeArray = num1.toCharArray();</span><br><span class="line">        smallArray = num2.toCharArray();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        largeArray = num2.toCharArray();</span><br><span class="line">        smallArray = num1.toCharArray();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[largeArray.length + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; largeArray.length; i++) &#123;</span><br><span class="line">        res[i] = largeArray[largeArray.length - i - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; smallArray.length; i++) &#123;</span><br><span class="line">        res[i] += smallArray[smallArray.length - i - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(res[i] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">            res[i + <span class="number">1</span>] += res[i] / <span class="number">10</span>;</span><br><span class="line">            res[i] %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = res.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        stringBuilder.append(res[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String result = stringBuilder.toString();</span><br><span class="line">    <span class="keyword">if</span>(result.startsWith(<span class="string">&quot;0&quot;</span>)) &#123;</span><br><span class="line">        result = result.substring(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试代码和结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String num1 = <span class="string">&quot;12345&quot;</span>;</span><br><span class="line">String num2 = <span class="string">&quot;56756&quot;</span>;</span><br><span class="line">Integer n1 = Integer.valueOf(num1);</span><br><span class="line">Integer n2 = Integer.valueOf(num2);</span><br><span class="line">Integer sum = n1 + n2;</span><br><span class="line">System.out.println(<span class="string">&quot;计算机计算结果为：&quot;</span> + sum);</span><br><span class="line">System.out.println(<span class="string">&quot;函数计算结果位：&quot;</span> + sumOfBigNum(num1,num2));</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129152910086.png" alt="image-20210129152910086"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法学习（一）--单链表相关算法</title>
      <link href="posts/3227196086.html"/>
      <url>posts/3227196086.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1、使用java实现单链表"><a href="#1、使用java实现单链表" class="headerlink" title="1、使用java实现单链表"></a>1、使用java实现单链表</h2><blockquote><p>建立Node节点类的代码如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    Integer data;</span><br><span class="line">    Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Integer data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;data=&quot;</span> + data +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>建立链表类并编写链表类的添加节点和遍历方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">    Node head;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 添加节点的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 待添加节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果当前头节点为空，那么将传入的节点作为头节点</span></span><br><span class="line">            <span class="keyword">this</span>.head = node;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//由于单链表的头节点不可移动，所以我们使用一个临时指针来辅助我们添加节点。</span></span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//退出循环时，temp节点指向链表最后一个节点，此时将传入节点挂在temp之后即可</span></span><br><span class="line">        temp.next = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 遍历链表的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空，无法遍历！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、编写代码实现单链表的反转"><a href="#2、编写代码实现单链表的反转" class="headerlink" title="2、编写代码实现单链表的反转"></a>2、编写代码实现单链表的反转</h2><blockquote><p>这里使用<strong>递归</strong>来完成单链表的反转，这个算法的思路大体如下</p></blockquote><ul><li>假设现在有一条单链表：1-2-3-4-NULL，在每次进入倒置函数reverse之前，需要对传入的节点进行判断，当传入的节点为空或者传入节点的next指针域为空时，证明该链表不需要反转，直接返回该节点。</li><li>当传入节点的指针域不为空时，将该节点的下一个节点的next域指向自己，同时将该节点的next指针域置为空，这样就形成了局部意义上的链表节点反转，由于我们使用了递归，并设置了递归退出条件（当前传入节点为空或者当前传入节点的next指针域为空），所以我们可以使用这个思路，完成对链表的反转</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129152444803.png" alt="image-20210129152444803"></p><blockquote><p>实现代码如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">reverse</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//如果进入这个if块中，证明当前head与其之后结点形成的链表不需要反转</span></span><br><span class="line">        <span class="comment">//例如1-2-3-4中的4不需要反转，直接返回该节点即可</span></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果链表长度大于等于2，进行递归</span></span><br><span class="line">    Node reverseNode = reverse(head.next);</span><br><span class="line">    <span class="comment">//将当前节点下一个节点的next指针域指向自己</span></span><br><span class="line">    head.next.next = head;</span><br><span class="line">    <span class="comment">//将当前节点的next指针域置空</span></span><br><span class="line">    head.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> reverseNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建一个链表：1-2-3-4-5，测试代码与结果如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LinkedList linkedList = <span class="keyword">new</span> LinkedList();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    linkedList.addNode(<span class="keyword">new</span> Node(i + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;反转前:&quot;</span>);</span><br><span class="line">linkedList.list();</span><br><span class="line">LinkedList reverseList = <span class="keyword">new</span> LinkedList(reverse(linkedList.head));</span><br><span class="line">System.out.println(<span class="string">&quot;反转后:&quot;</span>);</span><br><span class="line">reverseList.list();</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129152457748.png" alt="image-20210129152457748"></p><h2 id="3、将两个有序单链表合并为一个有序单链表"><a href="#3、将两个有序单链表合并为一个有序单链表" class="headerlink" title="3、将两个有序单链表合并为一个有序单链表"></a>3、将两个有序单链表合并为一个有序单链表</h2><blockquote><p>将A链表：1-2-3-null与B链表2-3-6-null合并为一张有序链表，解题思路如下</p></blockquote><ul><li>新建一个链表temp，然后使用指针遍历AB链表，对每一次遍历出来的节点的data值进行比较，将data值较小的节点从原链表中摘除，然后加到temp链表中，直到有一条链表被摘空。</li><li>此时如果A链表被摘空，那么将B链表剩余的节点挂在temp节点的最后面，由于B链表和temp链表本来就是有序的，所以得出的结果仍然是一个有序列表，反之亦然。</li></ul><blockquote><p>代码实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 合并两个有序链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list1 链表1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list2 链表2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LinkedList <span class="title">mergeTwoList</span><span class="params">(LinkedList list1,LinkedList list2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个</span></span><br><span class="line">    LinkedList temp = <span class="keyword">new</span> LinkedList(<span class="keyword">new</span> Node(Integer.MIN_VALUE));</span><br><span class="line">    Node cur = temp.head;</span><br><span class="line">    <span class="keyword">while</span>(list1.head != <span class="keyword">null</span> &amp;&amp; list2.head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(list1.head.data &lt; list2.head.data) &#123;</span><br><span class="line">            cur.next = list1.head;</span><br><span class="line">            list1.head = list1.head.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur.next = list2.head;</span><br><span class="line">            list2.head = list2.head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//每一次循环后都需要将cur后移</span></span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//退出循环时，至少有一个链表为空</span></span><br><span class="line">    <span class="comment">//如果是第一个链表为空，那么将cur.next指向第二个链表的头节点，由于第二个链表本身就是有序的，所以合并后仍然有序</span></span><br><span class="line">    <span class="keyword">if</span>(list1.head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        cur.next = list2.head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(list2.head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        cur.next = list1.head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//由于temp的第一个节点为MIN_VALUE，为无效节点，所以返回下一个</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LinkedList(temp.head.next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试代码及结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">LinkedList list1 = <span class="keyword">new</span> LinkedList();</span><br><span class="line">list1.addNode(<span class="keyword">new</span> Node(<span class="number">1</span>));</span><br><span class="line">list1.addNode(<span class="keyword">new</span> Node(<span class="number">2</span>));</span><br><span class="line">list1.addNode(<span class="keyword">new</span> Node(<span class="number">4</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;链表1为:&quot;</span>);</span><br><span class="line">list1.list();</span><br><span class="line"></span><br><span class="line">LinkedList list2 = <span class="keyword">new</span> LinkedList();</span><br><span class="line">list2.addNode(<span class="keyword">new</span> Node(<span class="number">1</span>));</span><br><span class="line">list2.addNode(<span class="keyword">new</span> Node(<span class="number">3</span>));</span><br><span class="line">list2.addNode(<span class="keyword">new</span> Node(<span class="number">4</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;链表2为:&quot;</span>);</span><br><span class="line">list2.list();</span><br><span class="line"></span><br><span class="line">LinkedList result = mergeTwoList(list1,list2);</span><br><span class="line">System.out.println(<span class="string">&quot;合并结果为:&quot;</span>);</span><br><span class="line">result.list();</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129152513991.png" alt="image-20210129152513991"></p><h2 id="4、返回链表中倒数第K个结点"><a href="#4、返回链表中倒数第K个结点" class="headerlink" title="4、返回链表中倒数第K个结点"></a>4、返回链表中倒数第K个结点</h2><blockquote><p>返回链表倒数第K个结点，结题思路如下</p></blockquote><ul><li>创建两个指针before和after，并将其指向链表头节点head</li><li>先让after结点前进k步，如果在此过程中after结点已经走出链表的范围（即移动过程中after已为空），那么证明输入的k不合法，此时返回null。</li><li>完成上一步的操作后，进行循环并使before和after同时进行移动，直到after为空时退出循环，此时before指向的元素即为链表的倒数第k个结点。</li></ul><blockquote><p>代码实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 获取链表的倒数第k个结点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">getKthFromEnd</span><span class="params">(LinkedList list,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(list.head == <span class="keyword">null</span> || list == <span class="keyword">null</span> || k &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node before = list.head;</span><br><span class="line">    Node after = list.head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; k;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(after == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        after = after.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(after != <span class="keyword">null</span>) &#123;</span><br><span class="line">        before = before.next;</span><br><span class="line">        after = after.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> before;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试代码以及结果，这里的链表使用上面合并链表的结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LinkedList result = mergeTwoList(list1,list2);</span><br><span class="line">System.out.println(<span class="string">&quot;合并结果为:&quot;</span>);</span><br><span class="line">result.list();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;倒数第3个结点值为:&quot;</span> + getKthFromEnd(result,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129152527059.png" alt="image-20210129152527059"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
