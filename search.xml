<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Jetbrains全家桶破解</title>
      <link href="posts/1306044467.html"/>
      <url>posts/1306044467.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>资源下载，密码：d2l7</p><p>在破解完后，请不要随意移动插件的位置。</p></blockquote><div class="btns rounded grid5">            <a class="button" href='https://wws.lanzous.com/b025yqija' title='资源下载'><i class='fas fa-download'></i>资源下载</a>          </div><h2 id="1、下载软件安装包"><a href="#1、下载软件安装包" class="headerlink" title="1、下载软件安装包"></a>1、下载软件安装包</h2><blockquote><p>访问 <code>Jetbrains</code> 的 <a href="https://www.jetbrains.com/">官方网站</a> ，在导航栏 <code>Developer Tool</code> 选项中选择自己要下载的开发软件，这里以<code>Pycharm</code>为例。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313170105.png" alt="image-20210313170104936"></p><blockquote><p>点击 <code>DOWNLOAD</code> 选项进行下载</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313170214.png" alt="image-20210313170214400"></p><blockquote><p>选择 <code>Professional</code> 进行下载</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313170410.png" alt="image-20210313170410434"></p><h2 id="2、安装软件"><a href="#2、安装软件" class="headerlink" title="2、安装软件"></a>2、安装软件</h2><blockquote><p>双击第一步中下载的安装包</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313170839.png" alt="image-20210313170839095"></p><blockquote><p>勾选 64-bit launcher，点击next</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313170941.png" alt="image-20210313170941767"></p><blockquote><p>点击 Install 进行安装</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313171019.png" alt="image-20210313171019799"></p><blockquote><p>安装完成后，点击 Finish 退出安装程序，运行 <code>Pycharm</code> ，进入试用界面</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313171255.png" alt="image-20210313171255823"></p><blockquote><p>如果没有出现以上的界面，那么可以在上面给出的资源中解压 <code>reset_script.zip</code> 压缩包，并在 <code>reset_script</code> 目录下运行重置脚本，其中<code>linux</code>和<code>mac</code>运行 <code>.sh</code> 脚本，windows运行 <code>.vbs</code> 脚本。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313171852.png" alt="image-20210313171852128"></p><blockquote><p>进入 <code>Pycharm</code> 的主界面</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313172225.png" alt="image-20210313172225307"></p><h2 id="3、破解"><a href="#3、破解" class="headerlink" title="3、破解"></a>3、破解</h2><blockquote><p>在主页面左上角选择 File -&gt; Settings进入设置页面，然后选择 Plugins【插件】一栏</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313172538.png" alt="image-20210313172538352"></p><blockquote><p>选择下载资源中的 <code>BetterIntellJ</code> 插件进行安装</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313172837.png" alt="image-20210313172837430"></p><blockquote><p>点击 Apply 并重启软件</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313172932.png" alt="image-20210313172932312"></p><blockquote><p>看到以下提示后重启即可。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313172950.png" alt="image-20210313172950710"></p><blockquote><p>用记事本打开资源中的 【激活补丁key】，复制全部内容，在 <code>pycharm</code> 主页面中选择【Help】-&gt; 【Register】</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313173213.png" alt="image-20210313173213381"></p><blockquote><p>点击 【Add New License】添加激活码</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313173514.png" alt="image-20210313173514166"></p><blockquote><p>此时提示激活成功</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313173544.png" alt="image-20210313173544312"></p><blockquote><p>DataGrip和IDEA的破解步骤与Pycharm大同小异，这里不再赘述。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件使用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL高级学习（四）-MySQL日志和主从复制</title>
      <link href="posts/2904493033.html"/>
      <url>posts/2904493033.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、MySQL日志"><a href="#一、MySQL日志" class="headerlink" title="一、MySQL日志"></a>一、MySQL日志</h1><blockquote><p>在任何一种数据库中，都会有各种各样的日志，记录着数据库工作的方方面面，以帮助数据库管理员追踪数据库曾经发生过的各种事件。</p><p>MySQL 也不例外，在 MySQL 中，有 4 种不同的日志，分别是<strong>错误日志</strong>、<strong>二进制日志（BINLOG   日志）</strong>、<strong>查询日志</strong>和<strong>慢查询日志</strong>，这些日志记录着数据库在不同方面的踪迹。</p></blockquote><h2 id="1-1、错误日志"><a href="#1-1、错误日志" class="headerlink" title="1.1、错误日志"></a>1.1、错误日志</h2><blockquote><p>错误日志是 MySQL 中最重要的日志之一，它记录了当 mysqld 启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。当数据库出现任何故障导致无法正常使用时，可以首先查看此日志。</p><p>该日志是默认开启的 ， 默认存放目录为 mysql  的数据目录（var/lib/mysql）,   默认的日志文件名为hostname.err（hostname是主机名）。</p><p>查看日志位置指令：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;log_error%&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210312145050.png" alt="image-20210312145042887"></p><h2 id="1-2、二进制日志"><a href="#1-2、二进制日志" class="headerlink" title="1.2、二进制日志"></a>1.2、二进制日志</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><blockquote><p>二进制日志（BINLOG）记录了所有的 DDL（数据定义语言）语句和 DML（数据操纵语言）语句，但是不包括数据查询语句。此日志对于灾难时的数据恢复起着极其重要的作用，<strong>MySQL的主从复制， 就是通过该 <code>binlog</code> 实现的。</strong></p><p>二进制日志，默认情况下是没有开启的，需要到MySQL的配置文件中开启，并配置MySQL日志的格式。</p><p>配置文件位置 :  <code>/usr/my.cnf</code></p><p>日志存放位置  :  配置时，给定了文件名但是没有指定路径，日志默认写入<code>Mysql</code>的数据目录。</p></blockquote><h3 id="2、二进制日志格式"><a href="#2、二进制日志格式" class="headerlink" title="2、二进制日志格式"></a>2、二进制日志格式</h3><ul><li>STATEMENT</li></ul><blockquote><p>该日志格式在日志文件中记录的都是SQL语句（statement），每一条对数据进行修改的SQL（类似<code>Redis</code>的<code>aof</code>，只记录写操作，不记录查询操作）都会记录在日志文件中，通过 <code>Mysql</code> 提供的 <code>mysqlbinlog</code> 工具，可以清晰的查看到每条语句的文本。</p><p>主从复制的时候，从库（slave）会将日志解析为原文本，并在从库重新执行一次。</p></blockquote><ul><li>ROW</li></ul><blockquote><p>该日志格式在日志文件中记录的是每一行的数据变更，而不是记录SQL语句。</p><p>比如，执行SQL语句 ： <code>update tb_book set status=&#39;1&#39; </code>, 如果是STATEMENT 日志格式，在日志中会记录一行SQL文件； </p><p>如果是ROW，由于是对全表进行更新，也就是每一行记录都会发生变更，<strong>ROW 格式的日志中会记录每一行的数据变更。</strong></p></blockquote><ul><li>MIXED</li></ul><blockquote><p>这是目前MySQL默认的日志格式，即混合了STATEMENT 和 ROW两种格式。默认情况下采用STATEMENT，但是在一些特殊情况下采用ROW来进行记录。MIXED 格式能尽量利用两种模式的优点，而避开他们的缺点。</p></blockquote><h3 id="3、查看日志"><a href="#3、查看日志" class="headerlink" title="3、查看日志"></a>3、查看日志</h3><blockquote><p>由于日志以二进制格式存储，所以不能直接读取，需要借助 <code>mysqlbinlog</code> 工具来查看，语法如下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog <span class="built_in">log</span> file;</span><br></pre></td></tr></table></figure><ul><li>查看<code>STATEMENT</code>格式日志</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog 文件名;</span><br></pre></td></tr></table></figure><ul><li>查看<code>ROW</code>格式日志</li></ul><blockquote><p>如果日志格式是 ROW , 直接查看数据 , 是查看不懂的 ; </p><p>可以在<code>mysqlbinlog</code> 后面加上参数 <code>-vv</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog -vv 文件名;</span><br></pre></td></tr></table></figure><h3 id="4、日志删除"><a href="#4、日志删除" class="headerlink" title="4、日志删除"></a>4、日志删除</h3><blockquote><p>对于比较繁忙的系统，由于每天生成日志量大 ，这些日志如果长时间不清楚，将会占用大量的磁盘空间。下面我们将会讲解几种删除日志的常见方法：</p></blockquote><ul><li>方式一：通过 <code>Reset Master</code> 指令删除全部 binlog 日志，删除之后，日志编号，将从 xxxx.000001重新开始 </li></ul><blockquote><p>删除前先查看一下日志文件：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210312151756.png" alt="image-20210312151755838"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Reset Master;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210312151819.png" alt="image-20210312151819371"></p><ul><li>方式二：执行指令<code>purge master logs to &#39;mysqlbin.xxx&#39;</code>，这个命令将删除<code>xxx</code>编号之前的所有日志。</li><li>方式三：执行指令 <code>purge master logs before &#39;yyyy-mm-dd hh:mm:ss&#39;</code>，该命令将删除日志为 <code>&quot;yyyy-mm-dd hh:mm:ss&quot; </code>之前产生的所有日志 。</li><li>方式四：设置参数 <code>--expire_logs_days=#</code> ，此参数的含义是设置日志的过期天数， 过了指定的天数后日志将会被自动删除，这样将有利于减少DBA    管理日志的工作量。</li></ul><h2 id="1-3、查询日志"><a href="#1-3、查询日志" class="headerlink" title="1.3、查询日志"></a>1.3、查询日志</h2><blockquote><p>查询日志中记录了客户端的所有操作语句，而二进制日志不包含查询数据的SQL语句。</p><p>默认情况下， 查询日志是未开启的。如果需要开启查询日志，可以设置以下配置 ：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#该选项用来开启查询日志 ， 可选值 ： 0 或者 1 ； 0 代表关闭，      1 代表开启</span><br><span class="line">general_log&#x3D;1 </span><br><span class="line">#设置日志的文件名 ， 如果没有指定， 默认的文件名为   host_name.log</span><br><span class="line">general_log_file&#x3D;file_name </span><br></pre></td></tr></table></figure><ul><li>在<code>mysql</code>配置文件 <code>my.cnf</code> 中配置如下内容</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210312153855.png" alt="image-20210312153855304"></p><ul><li>配置完毕之后，在数据库执行以下操作  ：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * from tb_book;</span><br><span class="line">select * from tb_book where id &#x3D; 1;</span><br><span class="line">update tb_book set name &#x3D; &#39;lucene入门指南&#39; where id &#x3D; 5;</span><br><span class="line">select * from tb_book where id &lt; 8;</span><br></pre></td></tr></table></figure><ul><li>执行完毕后查看查询日志</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210312154159.png" alt="image-20210312154159228"></p><h2 id="1-4、慢查询日志"><a href="#1-4、慢查询日志" class="headerlink" title="1.4、慢查询日志"></a>1.4、慢查询日志</h2><blockquote><p>慢查询日志记录了所有执行时间超过参数  <code>long_query_time</code>  设置值并且扫描记录数不小于</p><p><code>min_examined_row_limit</code> 的所有的SQL语句的日志。</p><p><code>long_query_time</code> 默认为 10 秒，最小为 0， 精度可以到微秒。</p></blockquote><h3 id="1、文件位置和格式"><a href="#1、文件位置和格式" class="headerlink" title="1、文件位置和格式"></a>1、文件位置和格式</h3><blockquote><p>慢查询日志默认是关闭的 ，可以通过两个参数来控制慢查询日志：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 该参数用来控制慢查询日志是否开启， 可取值： 1 和 0 ， 1 代表开启， 0  代表关闭</span><br><span class="line">slow_query_log&#x3D;1</span><br><span class="line"></span><br><span class="line"># 该参数用来指定慢查询日志的文件名</span><br><span class="line">slow_query_log_file&#x3D;slow_query.log</span><br><span class="line"></span><br><span class="line"># 该选项用来配置查询的时间限制， 超过这个时间将认为值慢查询， 将需要进行日志记录， 默认10s long_query_time&#x3D;10</span><br></pre></td></tr></table></figure><h3 id="2、日志的读取"><a href="#2、日志的读取" class="headerlink" title="2、日志的读取"></a>2、日志的读取</h3><blockquote><p>和错误日志、查询日志一样，慢查询日志记录的格式也是纯文本，可以被直接读取。</p></blockquote><ul><li>查询long_query_time  的值。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;long%&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210312155744.png" alt="image-20210312155744225"></p><ul><li>执行查询操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id, title,price,num ,status from tb_item where id &#x3D; 1;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210312155851.png" alt="image-20210312155851586"></p><blockquote><p>由于执行时间很短，所以该查询语句不会被记录在慢查询日志中。</p></blockquote><ul><li>执行一条查询时间极长的SQL语句</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from tb_item where title like &#39;%阿尔卡特 (OT-927) 炭黑 联通3G手机 双卡双待</span><br><span class="line">165454%&#39; ;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210312160016.png" alt="image-20210312160016746"></p><blockquote><p>该SQL语句 ， 执行时长为 26.77s ，超过10s（<code>long_query_time</code>） ， 所以会记录在慢查询日志文件中。</p></blockquote><h1 id="二、MySQL复制"><a href="#二、MySQL复制" class="headerlink" title="二、MySQL复制"></a>二、MySQL复制</h1><h2 id="2-1、复制概述"><a href="#2-1、复制概述" class="headerlink" title="2.1、复制概述"></a>2.1、复制概述</h2><blockquote><p>复制是指将主数据库的 <strong>DDL  和  DML **操作</strong>通过二进制日志传到从库服务器中**，然后在从库上对这些日志重新执行（也叫重做），从而使得从库和主库的数据保持同步。</p><p><strong>MySQL支持一台主库同时向多台从库进行复制，   从库同时也可以作为其他从服务器的主库，实现链状复制。</strong></p></blockquote><h2 id="2-2、复制原理"><a href="#2-2、复制原理" class="headerlink" title="2.2、复制原理"></a>2.2、复制原理</h2><blockquote><p>MySQL的主从复制原理如下：</p><p>注意，主从复制的前提是<code>Master</code>节点必须开启二进制日志。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210312161130.png" alt="image-20210312161130480"></p><blockquote><p>从上层来看，复制分为三步：</p></blockquote><ul><li>Master 主库在事务提交时，会把数据变更作为时间 <code>Events</code> 记录在二进制日志文件 <code>Binlog</code> 中。</li><li>主库推送二进制日志文件 <code>Binlog</code> 中的日志事件到从库的中继日志 <code>Relay Log</code> 。</li><li>slave重做中继日志中的事件，将改变反映它自己的数据。</li></ul><h2 id="2-3、复制优势"><a href="#2-3、复制优势" class="headerlink" title="2.3、复制优势"></a>2.3、复制优势</h2><blockquote><p>MySQL   复制的有点主要包含以下三个方面：</p></blockquote><ul><li>主库出现问题，可以快速切换到从库提供服务。</li><li>可以在从库上执行查询操作，从主库中更新，实现读写分离，降低主库的访问压力。</li><li>可以在从库中执行备份，以避免备份期间影响主库的服务。</li></ul><h2 id="2-4、搭建步骤"><a href="#2-4、搭建步骤" class="headerlink" title="2.4、搭建步骤"></a>2.4、搭建步骤</h2><blockquote><p>准备两台服务器</p></blockquote><h3 id="1、master"><a href="#1、master" class="headerlink" title="1、master"></a>1、master</h3><ul><li>在 <code>master</code> 的配置文件 <code>my.cnf</code> 中，配置如下内容：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#mysql 服务ID,保证整个集群环境中唯一</span><br><span class="line">server-id&#x3D;1</span><br><span class="line"></span><br><span class="line">#mysql binlog 日志的存储路径和文件名</span><br><span class="line">log-bin&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysqlbin</span><br><span class="line"></span><br><span class="line">#错误日志,默认已经开启</span><br><span class="line">#log-err</span><br><span class="line">#mysql的安装目录</span><br><span class="line">#basedir</span><br><span class="line">#mysql的临时目录</span><br><span class="line">#tmpdir </span><br><span class="line">#mysql的数据存放目录</span><br><span class="line">#datadir</span><br><span class="line"></span><br><span class="line">#是否只读,1 代表只读, 0 代表读写，由于此处为master节点，所以为读写型0</span><br><span class="line">read-only&#x3D;0</span><br><span class="line"></span><br><span class="line">#忽略的数据, 指不需要同步的数据库</span><br><span class="line">binlog-ignore-db&#x3D;mysql</span><br><span class="line"></span><br><span class="line">#指定同步的数据库</span><br><span class="line">#binlog-do-db&#x3D;db01</span><br></pre></td></tr></table></figure><ul><li>配置完毕之后，需要重启 <code>MySQL</code>，关闭防火墙 （主从节点都需要关闭）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 重启mysql服务</span><br><span class="line">service mysql restart;</span><br><span class="line"># 关闭防火墙</span><br><span class="line">service iptables stop;</span><br></pre></td></tr></table></figure><ul><li>创建同步数据的账户，并且进行授权操作：</li></ul><blockquote><p>给从节点 <code>itcast&#39;@&#39;192.168.192.131</code> 授予一个主从复制的权限，在所有数据库的所有表上。</p><p><code>*.*</code> 表示所有数据库所有表。</p><p><code>identified by &#39;itcast&#39;</code> 指定访问密码为 <code>&#39;itcast&#39;</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant replication slave on *.* to &#39;itcast&#39;@&#39;192.168.192.131&#39; identified by &#39;itcast&#39;;</span><br><span class="line"># 刷新权限列表</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><ul><li>查看当前 <code>master</code> 节点状态信息</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210312164038.png" alt="image-20210312164038664"></p><blockquote><p>字段含义：</p><ul><li><code>File</code> : 从哪个日志文件开始推送日志文件，这里应该从 <code>mysqlbin.000001</code> 开始推送日志文件</li><li><code>Position</code> ： 从哪个位置开始推送日志，这里应从413行开始推送日志</li><li><code>Binlog_Ignore_DB</code> : 指定不需要同步的数据库，忽略 <code>mysql</code> 数据库</li></ul></blockquote><h3 id="2、slave节点"><a href="#2、slave节点" class="headerlink" title="2、slave节点"></a>2、slave节点</h3><ul><li>在  slave 端配置文件中，配置如下内容：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#mysql服务端ID,唯一</span><br><span class="line">server-id&#x3D;2</span><br><span class="line"></span><br><span class="line">#指定binlog日志</span><br><span class="line">log-bin&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysqlbin</span><br></pre></td></tr></table></figure><ul><li>执行完毕之后，需要重启 <code>Mysql</code>，并关闭防火墙</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 重启mysql服务</span><br><span class="line">service mysql restart;</span><br><span class="line"># 关闭防火墙</span><br><span class="line">service iptables stop;</span><br></pre></td></tr></table></figure><ul><li>执行如下指令 ：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host&#x3D; &#39;192.168.192.130&#39;, master_user&#x3D;&#39;itcast&#39;, master_password&#x3D;&#39;itcast&#39;,  master_log_file&#x3D;&#39;mysqlbin.000001&#39;,  master_log_pos&#x3D;413;</span><br></pre></td></tr></table></figure><blockquote><p>指定当前从库对应的<strong>主库的IP地址，用户名，密码，从哪个日志文件开始的那个位置</strong>开始同步推送日志。</p></blockquote><ul><li>开启同步操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure><ul><li>查看从节点当前状态</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure><blockquote><p><code>Slave_IO_State</code>的值为：等待主节点给从节点发送数据。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210312165843.png" alt="image-20210312165843704"></p><ul><li>关闭同步操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br></pre></td></tr></table></figure><h3 id="3、验证主从复制同步操作"><a href="#3、验证主从复制同步操作" class="headerlink" title="3、验证主从复制同步操作"></a>3、验证主从复制同步操作</h3><ul><li>在主节点中创建数据库，创建表，并插入数据  ：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create database db01;</span><br><span class="line">use db01;</span><br><span class="line">create table user</span><br><span class="line">(</span><br><span class="line">    id   int(11)     not null auto_increment,</span><br><span class="line">    name varchar(50) not null,</span><br><span class="line">    sex  varchar(1),</span><br><span class="line">    primary key (id)</span><br><span class="line">);        </span><br><span class="line">insert into user (id, name,sex) values (null,&#39;Dawn&#39;,&#39;1&#39;);</span><br><span class="line">insert into user(id,name,sex) values(null,&#39;Trigger&#39;,&#39;0&#39;);</span><br><span class="line">insert into user(id,name,sex) values(null,&#39;Dawn&#39;,&#39;1&#39;);</span><br></pre></td></tr></table></figure><ul><li>在从节点中，可以看到刚才创建的数据库</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210312170759.png" alt="image-20210312170759153"></p><ul><li>也可以在 <code>db01</code> 数据库中，查询到 <code>user</code> 表中的数据。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210312170832.png" alt="image-20210312170832484"></p><ul><li>此时在主节点中使用 <code>update</code> 更新 <code>user</code> 表中的数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update &#96;user&#96; set sex &#x3D; &#39;2&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210312171104.png" alt="image-20210312171104252"></p><ul><li>在从节点中查询 <code>user</code> 表中的数据</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210312171138.png" alt="image-20210312171138826"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🤓数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试总结（二）-hashCode()和equals()详解</title>
      <link href="posts/3000794297.html"/>
      <url>posts/3000794297.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1、阿里巴巴开发手册"><a href="#1、阿里巴巴开发手册" class="headerlink" title="1、阿里巴巴开发手册"></a>1、阿里巴巴开发手册</h2><blockquote><p>在阿里巴巴开发手册（六）-集合处理中，可以看到这条强制规约</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311214636.png" alt="image-20210311214636678"></p><h2 id="2、查看底层源码"><a href="#2、查看底层源码" class="headerlink" title="2、查看底层源码"></a>2、查看底层源码</h2><blockquote><p><code>hashCode</code>和<code>equals</code> 是<code>Object</code>类下的两个方法，其中<code>hashCode</code> 方法以 <code>native</code> 关键字修饰，这个方法并非Java实现。</p><p>而<code>equals</code> 方法底层调用了 <code>==</code> 来与传入的对象做比较（比较两个对象地址值）</p></blockquote><h2 id="3、hashCode介绍"><a href="#3、hashCode介绍" class="headerlink" title="3、hashCode介绍"></a>3、<code>hashCode</code>介绍</h2><blockquote><p><code>hashCode</code>方法是每个类中都拥有的一个函数，主要返回每个对象的hash值，hash值主要用于散列表（HashMap、HashSet、HashTable）中。</p><p>对hash码的通用约定如下：</p></blockquote><ul><li>从Hash值不能反向推导出原始的数据</li><li>输入数据的微小变化会得到完全不同的Hash值，相同的数据会得到相同的值。</li></ul><blockquote><p>在java程序执行过程中，在一个对象没有被改变的前提下，无论这个对象被调用多少次，hashCode方法都会返回相同的整数值。对象的哈希码没有必要在不同的程序中保持相同的值。</p></blockquote><ul><li>Hash算法的执行效率要高效，长的文本也能快速计算出Hash值</li><li>如果2个对象使用equals方法进行比较并且相同的话，那么这2个对象的<code>hashCode</code>方法的值也必须相等。</li><li>如果根据equals方法，得到两个对象不相等，那么这2个对象的<code>hashCode</code>值不需要必须不相同。但是，不相等的对象的<code>hashCode</code>值不同的话可以提高哈希表的性能。</li></ul><h2 id="4、案例"><a href="#4、案例" class="headerlink" title="4、案例"></a>4、案例</h2><h3 id="4-1、编写一个Person类"><a href="#4-1、编写一个Person类" class="headerlink" title="4.1、编写一个Person类"></a>4.1、编写一个Person类</h3><blockquote><p>这里不重写hashCode方法，只重写Person类的equals方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">            Person person = (Person)obj;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.age.equals(person.age) &amp;&amp; <span class="keyword">this</span>.name.equals(person.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编写一段测试代码，测试两个满足<code>equals</code>方法的Person对象的hashCode是否相等</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;p1与p2使用equals方法判断是否相等的结果是：&quot;</span> + p1.equals(p2));</span><br><span class="line">System.out.println(<span class="string">&quot;对象p1的hashCode为：&quot;</span> + p1.hashCode());</span><br><span class="line">System.out.println(<span class="string">&quot;对象p2的hashCode为：&quot;</span> + p2.hashCode());</span><br></pre></td></tr></table></figure><blockquote><p>执行结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311221801.png" alt="image-20210311221800697"></p><blockquote><p>从上面运行的结果可以看出，如果只重写equals方法，不重写hashCode方法，那么使用equals方法判断为相等的两个对象的hash值可能不同。</p></blockquote><h3 id="4-2、向HashSet中添加不重写hashCode方法的对象"><a href="#4-2、向HashSet中添加不重写hashCode方法的对象" class="headerlink" title="4.2、向HashSet中添加不重写hashCode方法的对象"></a>4.2、向HashSet中添加不重写<code>hashCode</code>方法的对象</h3><blockquote><p><code>HashSet</code>底层是维护了一个<code>HashMap</code>对象，在往<code>HashSet</code>对象中add对象时，实际上调用了底层<code>HashMap</code>对象的put方法，传入的<code>Entry</code>对象中，键为待添加对象，值固定为一个<code>Object</code>对象</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311223030.png" alt="image-20210311223030452"></p><blockquote><p>add方法</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311223322.png" alt="image-20210311223322917"></p><ul><li>创建一个HashSet对象，使用Person作为泛型，然后添加几个Person对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">Person p3 = <span class="keyword">new</span> Person(<span class="number">2</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">Set&lt;Person&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">set.add(p1);</span><br><span class="line">set.add(p2);</span><br><span class="line">set.add(p3);</span><br><span class="line">System.out.println(set);</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311223922.png" alt="image-20210311223922525"></p><blockquote><p>可以看到，在重写<code>equals</code>方法而不重写<code>hashCode</code>方法的情况下，如果将该类作为散列表的键或者HashSet的泛型，就会造成出现多个一模一样的key或者对象。</p></blockquote><h3 id="4-3、重写Person类的hashCode方法"><a href="#4-3、重写Person类的hashCode方法" class="headerlink" title="4.3、重写Person类的hashCode方法"></a>4.3、重写Person类的<code>hashCode</code>方法</h3><blockquote><p>将Person对象的<code>name</code>属性全部转换为大写，然后使用String类的<code>hashCode</code>方法计算<code>name</code>的hash值，然后与Person对象的<code>age</code>进行异或运算。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nameCode = name.toUpperCase().hashCode();</span><br><span class="line">    <span class="keyword">return</span> nameCode ^ age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4、再次运行上面的两个案例"><a href="#4-4、再次运行上面的两个案例" class="headerlink" title="4.4、再次运行上面的两个案例"></a>4.4、再次运行上面的两个案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;p1与p2使用equals方法判断是否相等的结果是：&quot;</span> + p1.equals(p2));</span><br><span class="line">System.out.println(<span class="string">&quot;对象p1的hashCode为：&quot;</span> + p1.hashCode());</span><br><span class="line">System.out.println(<span class="string">&quot;对象p2的hashCode为：&quot;</span> + p2.hashCode());</span><br></pre></td></tr></table></figure><blockquote><p>运行结果，此时可以看到使用equals比较结果为true的两个对象的hashCode一定相等。</p><p>注意：此时<code>hashCode</code>值相等的对象equals后的结果不一定为true</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311225155.png" alt="image-20210311225155026"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">Person p3 = <span class="keyword">new</span> Person(<span class="number">2</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">Set&lt;Person&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">set.add(p1);</span><br><span class="line">set.add(p2);</span><br><span class="line">set.add(p3);</span><br><span class="line">System.out.println(set);</span><br></pre></td></tr></table></figure><blockquote><p>执行结果，此时可以看到HashSet对象中没有两个相同的对象</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311230851.png" alt="image-20210311230850503"></p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><h3 id="5-1、对于不会创建散列表的类"><a href="#5-1、对于不会创建散列表的类" class="headerlink" title="5.1、对于不会创建散列表的类"></a>5.1、对于不会创建散列表的类</h3><blockquote><p>“不会创建散列表”的意思是：</p><p>我们不会在<code>HashSet</code>、<code>HashMap</code>、<code>HashTable</code>、<code>ConcurrentHashMap</code>等等这些本质是散列表的数据结构中使用这个类，其中<code>HashMap</code>、<code>HashTable</code>和<code>ConcurrentHashMap</code>中不会作为键使用。</p><p>在这种情况下，<code>hashCode</code>和<code>equals</code>方法不存在关系，此时equals方法用于判断两个对象是否相等，而<code>hashCode</code>全无作用。</p></blockquote><h3 id="5-2、对于会创建散列表的类"><a href="#5-2、对于会创建散列表的类" class="headerlink" title="5.2、对于会创建散列表的类"></a>5.2、对于会创建散列表的类</h3><blockquote><p>在这种情况下，我们必须重写<code>hashCode</code>和<code>equals</code>方法，并且重写的<code>hashCode</code>方法必须满足上面给出的hash通用约定。</p><p>在这种情况下，<code>hashCode</code>方法和<code>equals</code>方法得出的结果有如下关系：</p></blockquote><ul><li>如果两个对象使用equals方法比较后的结果为true，那么这两个对象经由<code>hashCode</code>方法得到的结果一定一致。</li><li>如果两个对象使用equals方法比较后的结果为false，那么这两个对象经由<code>hashCode</code>方法得到的结果可能相等。（在<code>HashMap</code>中，两个<code>hashCode</code>相同而键不同的现象称为hash冲突）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL高级学习（三）-MySQL锁问题、常用技巧和内存优化</title>
      <link href="posts/2442351397.html"/>
      <url>posts/2442351397.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、应用优化"><a href="#一、应用优化" class="headerlink" title="一、应用优化"></a>一、应用优化</h1><blockquote><p>前面章节，我们介绍了很多数据库的优化措施。</p><p>但是在实际生产环境中，由于数据库本身的性能局限，就必须要对前台的应用进行一些优化，来降低数据库的访问压力。</p></blockquote><h2 id="1-1、使用数据库连接池"><a href="#1-1、使用数据库连接池" class="headerlink" title="1.1、使用数据库连接池"></a>1.1、使用数据库连接池</h2><blockquote><p>对于访问数据库来说，建立连接的代价是比较昂贵的，因为我们频繁的创建关闭连接，是比较耗费资源的，我们有必要建立 数据库连接池，以提高访问的性能。</p><p>Java中常用的数据库如下：</p></blockquote><h3 id="1、C3P0"><a href="#1、C3P0" class="headerlink" title="1、C3P0"></a>1、C3P0</h3><blockquote><p>开源的，成熟的，高并发第三方数据库连接池，作者是 Steve Waldman，相关的文档资料比较完善，大名鼎鼎的hibernate框架就使用了c3p0数据库连接池。</p><p>SSM项目中常集成 <code>C3P0</code> 连接池</p></blockquote><h3 id="2、HiKariCP"><a href="#2、HiKariCP" class="headerlink" title="2、HiKariCP"></a>2、HiKariCP</h3><blockquote><p><code>Spring Boot</code> 默认集成的数据库连接池，速度极快</p></blockquote><h3 id="3、Druid"><a href="#3、Druid" class="headerlink" title="3、Druid"></a>3、Druid</h3><blockquote><p><code>Alibaba</code>开源的数据库连接池，号称是Java语言中最好的数据库连接池。Druid能够提供强大的监控和扩展功能。</p></blockquote><h2 id="1-2、减少对MySQL的访问"><a href="#1-2、减少对MySQL的访问" class="headerlink" title="1.2、减少对MySQL的访问"></a>1.2、减少对MySQL的访问</h2><h3 id="1、减少对数据进行重复检索"><a href="#1、减少对数据进行重复检索" class="headerlink" title="1、减少对数据进行重复检索"></a>1、减少对数据进行重复检索</h3><blockquote><p>在编写应用代码时，需要能够理清对数据库的访问逻辑。能够一次连接就获取到结果的，就不用两次连接，这样可以大大减少对数据库无用的重复请求。</p></blockquote><ul><li>比如 ，需要获取书籍的id 和name字段 ， 则查询如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id , name from tb_book;</span><br></pre></td></tr></table></figure><ul><li>之后，在业务逻辑中有需要获取到书籍状态信息，  则查询如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id , status from tb_book;</span><br></pre></td></tr></table></figure><ul><li>这样，就需要向数据库提交两次请求，数据库就要做两次查询操作。其实完全可以用一条SQL语句得到想要的结果。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id, name , status from tb_book;</span><br></pre></td></tr></table></figure><h3 id="2、增加cache层"><a href="#2、增加cache层" class="headerlink" title="2、增加cache层"></a>2、增加cache层</h3><blockquote><p>在应用中，我们可以在应用中增加 缓存 层来达到减轻数据库负担的目的。缓存层有很多种，也有很多实现方式，只要能达到降低数据库的负担又能满足应用需求就可以。</p><p>因此可以部分数据从数据库中抽取出来放到应用端以文本方式存储， 或者使用框架(Mybatis, Hibernate)提供的一级缓存/二级缓存，或者使用redis数据库来缓存数据  。</p></blockquote><h2 id="1-3、负载均衡"><a href="#1-3、负载均衡" class="headerlink" title="1.3、负载均衡"></a>1.3、负载均衡</h2><blockquote><p>负载均衡是应用中使用非常普遍的一种优化方法，它的机制就是利用某种均衡算法，将固定的负载量分布到不同的服务器上， 以此来降低单台服务器的负载，达到优化的效果。</p></blockquote><h3 id="1、利用MySQL复制分流查询"><a href="#1、利用MySQL复制分流查询" class="headerlink" title="1、利用MySQL复制分流查询"></a>1、利用MySQL复制分流查询</h3><blockquote><p>有一台 <code>MySQL</code> 的 <strong>主节点</strong> ，可以将数据同步到 <strong>从节点</strong> 中</p><p>通过MySQL的主从复制，实现读写分离，使增删改操作走主节点，查询操作走从节点，从而可以降低单台服务器的读写压力。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310212344.png" alt="image-20210310212344695"></p><blockquote><p>在进行 <strong>写操作（增删改）</strong> 的时候直接对 <code>master</code> 节点进行操作，然后由 <code>master</code> 节点同步到 <code>salve</code> 节点中。</p><p><strong>读操作</strong> 不请求 <code>master</code> ，而是请求 <code>slave</code> 。</p><p><strong>写</strong> 的压力集中在 <code>master</code> ，而 <strong>读</strong> 的压力集中在 <code>salve</code> </p></blockquote><h3 id="2、采用分布式数据库架构"><a href="#2、采用分布式数据库架构" class="headerlink" title="2、采用分布式数据库架构"></a>2、采用分布式数据库架构</h3><blockquote><p>分布式数据库架构适合大数据量、负载高的情况，它有良好的拓展性和高可用性。通过在多台服务器之间分布数据，可以实现在多台服务器之间的负载均衡，提高访问效率。</p></blockquote><h1 id="二、MySQL中查询缓存优化"><a href="#二、MySQL中查询缓存优化" class="headerlink" title="二、MySQL中查询缓存优化"></a>二、MySQL中查询缓存优化</h1><blockquote><p>注意，<code>MySQL</code> 8.0之后去掉了查询缓存，我们可以使用其他缓存服务器（例如 <code>Redis</code>）来代替</p></blockquote><h2 id="2-1、概述"><a href="#2-1、概述" class="headerlink" title="2.1、概述"></a>2.1、概述</h2><blockquote><p>开启Mysql的查询缓存，<strong>当执行完全相同的SQL语句的时候，服务器就会直接从缓存中读取结果</strong>，当<strong>数据被修改，之前的缓存会失效</strong>，<strong>修改比较频繁的表不适合做查询缓存。</strong></p></blockquote><h2 id="2-2、操作流程"><a href="#2-2、操作流程" class="headerlink" title="2.2、操作流程"></a>2.2、操作流程</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310213045.png" alt="image-20210310213045383"></p><blockquote><p>执行流程大致如下：</p></blockquote><ul><li><p>客户端发送一条查询给服务器；</p></li><li><p>服务器先会检查查询缓存，如果命中了缓存，则立即返回存储在缓存中的结果。否则进入下一阶段；</p></li><li><p>服务器端进行SQL解析、预处理，再由优化器生成对应的执行计划；</p></li><li><p>MySQL根据优化器生成的执行计划，调用存储引擎的API来执行查询；</p></li><li><p>将结果缓存一份放入 <strong>查询缓存</strong>中并返回给客户端。</p></li></ul><h2 id="2-3、查询缓存配置"><a href="#2-3、查询缓存配置" class="headerlink" title="2.3、查询缓存配置"></a>2.3、查询缓存配置</h2><h3 id="1、查看当前数据库是否支持查询缓存"><a href="#1、查看当前数据库是否支持查询缓存" class="headerlink" title="1、查看当前数据库是否支持查询缓存"></a>1、查看当前数据库是否支持查询缓存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#39;have_query_cache&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>由于 <code>MySQL</code> 8.0之后已经不支持查询缓存，而我使用用的版本是 <code>8.0.19</code> ，所以这里的结果自然是 <code>NO</code></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310215903.png" alt="image-20210310215902999"></p><h3 id="2、查看当前MySQL是否开启了查询缓存"><a href="#2、查看当前MySQL是否开启了查询缓存" class="headerlink" title="2、查看当前MySQL是否开启了查询缓存"></a>2、查看当前MySQL是否开启了查询缓存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#39;query_cache_type&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310220419.png" alt="image-20210310220419476"></p><h3 id="3、查看查询缓存的占用大小"><a href="#3、查看查询缓存的占用大小" class="headerlink" title="3、查看查询缓存的占用大小"></a>3、查看查询缓存的占用大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#39;query_cache_size&#39;;</span><br></pre></td></tr></table></figure><h3 id="4、查看查询缓存的状态变量"><a href="#4、查看查询缓存的状态变量" class="headerlink" title="4、查看查询缓存的状态变量"></a>4、查看查询缓存的状态变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW STATUS LIKE &#39;Qcache%&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>结果中各变量参数说明如下</p></blockquote><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>Qcache_free_blocks</code></td><td>查询缓存中的可用内存块数</td></tr><tr><td><code>Qcache_free_memory</code></td><td>查询缓存的可用内存量</td></tr><tr><td><code>Qcache_hits</code></td><td>查询缓存命中数</td></tr><tr><td><code>Qcache_inserts</code></td><td>添加到查询缓存的查询数</td></tr><tr><td><code>Qcache_lowmen_prunes</code></td><td>由于内存不足而从查询缓存中删除的查询数</td></tr><tr><td><code>Qcache_not_cached</code></td><td>非缓存查询的数量（由于  query_cache_type  设置而无法缓存或未缓存）</td></tr><tr><td><code>Qcache_queries_in_cache</code></td><td>查询缓存中注册的查询数</td></tr><tr><td><code>Qcache_total_blocks</code></td><td>查询缓存中的块总数</td></tr></tbody></table><h2 id="2-4、开启查询缓存"><a href="#2-4、开启查询缓存" class="headerlink" title="2.4、开启查询缓存"></a>2.4、开启查询缓存</h2><blockquote><p>MySQL的查询缓存默认是关闭的，需要手动配置参数 query_cache_type ， 来开启查询缓存。query_cache_type该参数的可取值有三个：</p></blockquote><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>OFF 或 0</td><td>查询缓存功能关闭</td></tr><tr><td>ON 或 1</td><td>查询缓存功能打开，SELECT的结果符合缓存条件即会缓存，否则，不予缓存，显式指定SQL_NO_CACHE，不予缓存</td></tr><tr><td>DEMAND或 2</td><td>查询缓存功能按需进行，显式指定  SQL_CACHE  的SELECT语句才会缓存；其它均不予缓存</td></tr></tbody></table><blockquote><p>在 <code>my.cnf</code> 配置文件中，增加以下配置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启MySQL查询缓存（不适用于8.0及以上版本）</span></span><br><span class="line">query_cache_type = 1;</span><br></pre></td></tr></table></figure><blockquote><p>配置完毕之后，重启服务既可生效  ；</p><p>然后就可以在命令行执行SQL语句进行验证 ，执行一条比较耗时的SQL语句，然后再多执行几次，查看后面几次的执行时间；获取通过查看查询缓存的缓存命中数，来判定是否走查询缓存。</p></blockquote><h2 id="2-5、查询缓存Select-选项"><a href="#2-5、查询缓存Select-选项" class="headerlink" title="2.5、查询缓存Select 选项"></a>2.5、查询缓存Select 选项</h2><blockquote><p>可以在SELECT语句中指定两个与查询缓存相关的选项  ：</p><p><code>SQL_CACHE</code> : 如果查询结果是可缓存的，并且 query_cache_type 系统变量的值为ON或 DEMAND ，则缓存查询结果 。</p><p><code>SQL_NO_CACHE</code> : 服务器不使用查询缓存。它既不检查查询缓存，也不检查结果是否已缓存，也不缓存查询结果。例子：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT SQL_CACHE id, name FROM customer;</span><br><span class="line">SELECT SQL_NO_CACHE id, name FROM customer;</span><br></pre></td></tr></table></figure><h1 id="三、MySQL内存管理及优化"><a href="#三、MySQL内存管理及优化" class="headerlink" title="三、MySQL内存管理及优化"></a>三、MySQL内存管理及优化</h1><h2 id="3-1、内存优化原则"><a href="#3-1、内存优化原则" class="headerlink" title="3.1、内存优化原则"></a>3.1、内存优化原则</h2><ul><li><p>将尽量多的内存分配给MySQL做缓存，但要给操作系统和其他程序预留足够内存。</p></li><li><p><code>MyISAM</code> 存储引擎的数据文件读取依赖于操作系统自身的IO缓存，因此，如果有<code>MyISAM</code>表，就要预留更多的内存给操作系统做IO缓存。</p></li><li><p><strong>排序区、连接区等缓存是分配给每个数据库会话（session）专用的，其默认值的设置要根据最大连接数合理分配，如果设置太大，不但浪费资源，而且在并发连接较高时会导致物理内存耗尽。</strong></p></li></ul><h2 id="3-2、MyISAM-内存优化"><a href="#3-2、MyISAM-内存优化" class="headerlink" title="3.2、MyISAM 内存优化"></a>3.2、<code>MyISAM</code> 内存优化</h2><blockquote><p><code>MyISAM</code>存储引擎使用 <code>key_buﬀer</code> 缓存索引块，加速<code>MyISAM</code>索引的读写速度。对于<code>MyISAM</code>表的数据块，mysql没有特别的缓存机制，完全依赖于操作系统的IO缓存。</p></blockquote><h3 id="1、key-buﬀer-size"><a href="#1、key-buﬀer-size" class="headerlink" title="1、key_buﬀer_size"></a>1、key_buﬀer_size</h3><blockquote><p>key_buﬀer_size决定 <code>MyISAM </code>索引块缓存区的大小，直接影响到 <code>MyISAM</code> 表的存取效率。</p><p>可以在MySQL参数文件中设置key_buﬀer_size的值，对于一般 <code>MyISAM</code> 数据库，建议至少将1/4可用内存分配给key_buﬀer_size。<br>在 <code>/usr/my.cnf </code> 中做如下配置：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key_buffer_size&#x3D;512M</span><br></pre></td></tr></table></figure><h3 id="2、read-buﬀer-size"><a href="#2、read-buﬀer-size" class="headerlink" title="2、read_buﬀer_size"></a>2、read_buﬀer_size</h3><p>如果需要经常顺序扫描 <code>myisam</code> 表，可以通过增大read_buﬀer_size的值来改善性能。但需要注意的是<br><strong>read_buﬀer_size是每个session独占的</strong>，如果默认值设置太大，就会造成内存浪费。</p><h3 id="3、read-rnd-buﬀer-size"><a href="#3、read-rnd-buﬀer-size" class="headerlink" title="3、read_rnd_buﬀer_size"></a>3、read_rnd_buﬀer_size</h3><p>对于需要做排序的 <code>myisam</code> 表的查询，如带有order by子句的sql，适当增加 read_rnd_buﬀer_size 的值，可以改善此类的sql性能。但需要注意的是 <strong>read_rnd_buﬀer_size 是每个session独占的</strong>，如果默认值设置太大，就会造成内存浪费。</p><h2 id="3-3、InnoDB-内存优化"><a href="#3-3、InnoDB-内存优化" class="headerlink" title="3.3、InnoDB 内存优化"></a>3.3、<code>InnoDB</code> 内存优化</h2><blockquote><p>innodb用一块内存区做IO缓存池，该缓存池不仅用来缓存innodb的索引块，而且也用来缓存innodb的数据块。</p></blockquote><h3 id="1、innodb-buﬀer-pool-size"><a href="#1、innodb-buﬀer-pool-size" class="headerlink" title="1、innodb_buﬀer_pool_size"></a>1、<code>innodb_buﬀer_pool_size</code></h3><blockquote><p>该变量决定了 innodb <strong>存储引擎表数据</strong>和<strong>索引数据</strong>的最大缓存区大小。在保证操作系统及其他程序有足够内存可用的情况下，innodb_buﬀer_pool_size 的值越大，缓存命中率越高，访问InnoDB表需要的磁盘I/O 就越少，性能也就越高。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_buffer_pool_size=512M</span><br></pre></td></tr></table></figure><h3 id="2、innodb-log-buﬀer-size"><a href="#2、innodb-log-buﬀer-size" class="headerlink" title="2、innodb_log_buﬀer_size"></a>2、<code>innodb_log_buﬀer_size</code></h3><blockquote><p>决定了innodb重做日志缓存的大小，对于可能产生大量更新记录的大事务，增加innodb_log_buﬀer_size的大小，<strong>可以避免innodb在事务提交前就执行不必要的日志写入磁盘操作。</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_log_buffer_size=10M</span><br></pre></td></tr></table></figure><h1 id="四、MySQL-并发参数调整"><a href="#四、MySQL-并发参数调整" class="headerlink" title="四、MySQL 并发参数调整"></a>四、MySQL 并发参数调整</h1><blockquote><p>从实现上来说，MySQL Server 是<strong>多线程结构</strong>，包括<strong>后台线程和客户服务线程</strong>。多线程可以有效利用服务器资源，提高数据库的并发性能。</p><p>在Mysql中，控制并发连接和线程的主要参数包括 </p></blockquote><ul><li>max_connections</li><li>back_log</li><li>thread_cache_size</li><li>table_open_cache。</li></ul><h2 id="4-1、max-connections"><a href="#4-1、max-connections" class="headerlink" title="4.1、max_connections"></a>4.1、max_connections</h2><blockquote><p>采用max_connections  控制允许连接到MySQL数据库的最大数量，<strong>默认值是  151</strong>。</p><p>如果<strong>状态变量connection_errors_max_connections 不为零</strong>，并且一直增长，则说明不断有连接请求因数据库连接数已达到允许最大值而失败，这时可以考虑增大max_connections 的值。</p><p><code>Mysql</code> 最大可支持的连接数，取决于很多因素，包括给定操作系统平台的线程库的质量、内存大小、每个连接的负荷、CPU的处理速度，期望的响应时间等。</p><p>在Linux 平台下，性能好的服务器，支持 500-1000 个连接不是难事，需要根据服务器性能进行评估设定。</p></blockquote><h2 id="4-2、back-log"><a href="#4-2、back-log" class="headerlink" title="4.2、back_log"></a>4.2、back_log</h2><blockquote><p>back_log 参数控制MySQL监听TCP端口时设置的积压请求栈大小。</p><p>如果MySql的连接数达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源，将会报错。5.6.6 版本之前默认值为 <code>50</code> ， 之后的版本默认为 <code>50 +（max_connections / 5）</code>， 但最大不超过 <code>900</code>。</p><p><strong>如果需要数据库在较短的时间内处理大量连接请求</strong>，  可以考虑适当增大 <code>back_log</code>  的值。</p><p>类似线程池的<strong>阻塞队列</strong></p></blockquote><h2 id="4-3、table-open-cache"><a href="#4-3、table-open-cache" class="headerlink" title="4.3、table_open_cache"></a>4.3、table_open_cache</h2><blockquote><p>该参数用来控制所有SQL语句执行线程可打开表缓存的数量， 而在执行SQL语句时，每一个SQL执行线程至少要打开 1 个表缓存。</p><p>该参数的值应该根据设置的最大连接数 max_connections   以及每个连接执行关联查询中涉及的表的最大数量来设定  ：<code>max_connections x N </code>；</p></blockquote><h2 id="4-4、thread-cache-size"><a href="#4-4、thread-cache-size" class="headerlink" title="4.4、thread_cache_size"></a>4.4、thread_cache_size</h2><blockquote><p>为了加快连接数据库的速度，MySQL 会缓存一定数量的客户服务线程以备重用，通过参数 thread_cache_size 可控制  MySQL 缓存客户服务线程的数量。</p></blockquote><h2 id="4-5、innodb-lock-wait-timeout"><a href="#4-5、innodb-lock-wait-timeout" class="headerlink" title="4.5、innodb_lock_wait_timeout"></a>4.5、innodb_lock_wait_timeout</h2><blockquote><p>该参数是用来设置 <strong>InnoDB 事务等待行锁的时间</strong>，默认值是50ms ， 可以根据需要进行动态设置。对于需要快速反馈的业务系统来说，可以将行锁的等待时间调小，以避免事务长时间挂起； 对于后台运行的批量处理程序来说，可以将行锁的等待时间调大， 以避免发生大的回滚操作。</p></blockquote><h1 id="五、MySQL锁问题"><a href="#五、MySQL锁问题" class="headerlink" title="五、MySQL锁问题"></a>五、MySQL锁问题</h1><h2 id="5-1、锁概述"><a href="#5-1、锁概述" class="headerlink" title="5.1、锁概述"></a>5.1、锁概述</h2><blockquote><p>锁是计算机协调多个进程或线程并发访问某一资源的机制（避免争抢）。</p><p>在数据库中，除传统的计算资源（如 CPU、RAM、I/O 等）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p></blockquote><h2 id="5-2、锁分类"><a href="#5-2、锁分类" class="headerlink" title="5.2、锁分类"></a>5.2、锁分类</h2><h3 id="1、从对数据操作的粒度分"><a href="#1、从对数据操作的粒度分" class="headerlink" title="1、从对数据操作的粒度分"></a>1、从对数据操作的粒度分</h3><ul><li>表锁</li></ul><blockquote><p>操作时，会锁定整个表</p></blockquote><ul><li>行锁</li></ul><blockquote><p>操作时，会锁定当前操作行</p></blockquote><h3 id="2、从对数据操作的类型分"><a href="#2、从对数据操作的类型分" class="headerlink" title="2、从对数据操作的类型分"></a>2、从对数据操作的类型分</h3><ul><li>读锁（共享锁）</li></ul><blockquote><p>针对同一份数据，多个读操作可以同时进行而不会相互影响。</p></blockquote><ul><li>写锁（排他锁）</li></ul><blockquote><p>当前操作没有完成之前，它会阻断其他写锁和读锁。</p></blockquote><h2 id="5-3、MySQL-锁"><a href="#5-3、MySQL-锁" class="headerlink" title="5.3、MySQL 锁"></a>5.3、MySQL 锁</h2><blockquote><p>相对其他数据库而言，MySQL的锁机制比较简单，其最显著的特点是不同的存储引擎支持不同的锁机制。下表中罗列出了各存储引擎对锁的支持情况：</p></blockquote><table><thead><tr><th>存储引擎</th><th>表级锁</th><th>行级锁</th><th>页面锁</th></tr></thead><tbody><tr><td><code>MyISAM</code></td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td><code>InnoDB</code></td><td>支持</td><td>支持（默认支持）</td><td>不支持</td></tr><tr><td>MEMORY</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>BDB</td><td>支持</td><td>不支持</td><td>支持</td></tr></tbody></table><blockquote><p>MySQL这三种锁的特性大致可以归纳如下</p></blockquote><table><thead><tr><th>锁类型</th><th>特点</th></tr></thead><tbody><tr><td>表级锁</td><td>偏向<code>MyISAM</code> 存储引擎，开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。</td></tr><tr><td>行级锁</td><td>偏向<code>InnoDB</code> 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</td></tr><tr><td>页面锁</td><td>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</td></tr></tbody></table><blockquote><p>从上述特点可见，很难笼统地说哪种锁更好，只能就具体应用的特点来说哪种锁更合适！仅从锁的角度来说：表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web 应用；而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并查询的应用，如一些在线事务处理（OLTP）系统。</p></blockquote><h2 id="5-4、MyISAM-表锁"><a href="#5-4、MyISAM-表锁" class="headerlink" title="5.4、MyISAM 表锁"></a>5.4、MyISAM 表锁</h2><blockquote><p>MyISAM 存储引擎只支持表锁，这也是 MySQL 开始几个版本中唯一支持的锁类型。</p></blockquote><h3 id="1、如何加表锁"><a href="#1、如何加表锁" class="headerlink" title="1、如何加表锁"></a>1、如何加表锁</h3><blockquote><p>MyISAM   在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT  等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此，用户一般不需要直接用  <code>LOCK TABLE</code> 命令给 MyISAM 表显式加锁。</p><p>显示加表锁语法：</p></blockquote><ul><li>加读锁</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lock table table_name read;</span><br></pre></td></tr></table></figure><ul><li>加读锁</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lock table table_name write;</span><br></pre></td></tr></table></figure><ul><li>读读共享，读写互斥，写写互斥。</li></ul><h3 id="2、读锁案例"><a href="#2、读锁案例" class="headerlink" title="2、读锁案例"></a>2、读锁案例</h3><ul><li>准备环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;tb_book&#96;</span><br><span class="line">(</span><br><span class="line">    &#96;id&#96;           INT(11) auto_increment,</span><br><span class="line">    &#96;name&#96;         VARCHAR(50) DEFAULT NULL,</span><br><span class="line">    &#96;publish_time&#96; DATE        DEFAULT NULL,</span><br><span class="line">    &#96;status&#96;       CHAR(1)     DEFAULT NULL,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE &#x3D; myisam</span><br><span class="line">  DEFAULT CHARSET &#x3D; utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO tb_book (id, name, publish_time, status)</span><br><span class="line">VALUES (NULL, &#39;java编程思</span><br><span class="line">想&#39;, &#39;2088-08-01&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO tb_book (id, name, publish_time, status)</span><br><span class="line">VALUES (NULL, &#39;solr编程思想&#39;, &#39;2088-08-08&#39;, &#39;0&#39;);</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;tb_user&#96;</span><br><span class="line">(</span><br><span class="line">    &#96;id&#96;   INT(11) auto_increment,</span><br><span class="line">    &#96;name&#96; VARCHAR(50) DEFAULT NULL,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE &#x3D; myisam</span><br><span class="line">  DEFAULT CHARSET &#x3D; utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO tb_user (id, name) VALUES(NULL,&#39;令狐冲&#39;);</span><br><span class="line">INSERT INTO tb_user (id, name) VALUES(NULL,&#39;田伯光&#39;);</span><br></pre></td></tr></table></figure><blockquote><p>打开两个客户端，在客户端一对 <code>tb_book</code> 加一个读锁，然后执行查询语句</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lock table tb_book read;</span><br><span class="line">select * from tb_book;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311142350.png" alt="image-20210311142350179"></p><blockquote><p>此时在第二个客户端中也可以查询出 <code>tb_book</code> 中的数据，这是因为读锁是 <strong>共享锁</strong> </p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311142638.png" alt="image-20210311142638815"></p><blockquote><p>这个时候在第一个客户端中是无法操作其他表的</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311142730.png" alt="image-20210311142730459"></p><blockquote><p>在第一个客户端中也无法对 <code>tb_book</code> 进行 <strong>增删改</strong> 操作</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update tb_book set name &#x3D; &#39;wuhu&#39; where id &#x3D; 2;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311143054.png" alt="image-20210311143054009"></p><blockquote><p>这个时候在第二个客户端中进行 增删改 操作时将会阻塞，直到第一个客户端释放读锁。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311143227.png" alt="image-20210311143227420"></p><blockquote><p>在第一个客户端中释放读锁</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlock tables;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311144038.png" alt="image-20210311144038130"></p><blockquote><p>第二个客户端马上执行更新操作</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311144106.png" alt="image-20210311144106554"></p><h3 id="3、写锁案例"><a href="#3、写锁案例" class="headerlink" title="3、写锁案例"></a>3、写锁案例</h3><ul><li>在客户端一中为 <code>tb_book</code> 表加上一个写锁</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lock table tb_book write;</span><br></pre></td></tr></table></figure><blockquote><p>此时在客户端一中仍然可以查询数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tb_book;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311144838.png" alt="image-20210311144838393"></p><blockquote><p>在客户端一中，可以对表 <code>tb_book</code> 进行写操作（增删改）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update tb_book set name &#x3D; &#39;qifei&#39; where id &#x3D; 2;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311144949.png" alt="image-20210311144949347"></p><ul><li>在客户端二中进行操作</li></ul><blockquote><p>在客户端二中使用 <code>select</code> 进行读操作，发现进入等待状态</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311145440.png" alt="image-20210311145440874"></p><blockquote><p>在客户端一中释放锁后，客户端二中的指令被立即执行。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311145624.png" alt="image-20210311145624833"></p><h3 id="4、结论"><a href="#4、结论" class="headerlink" title="4、结论"></a>4、结论</h3><blockquote><p>锁模式的相互兼容性如表所示：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311150933.png" alt="image-20210311150933537"></p><blockquote><p>由上表可见：</p></blockquote><ul><li>对MyISAM   表的读操作，不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求；</li><li>对MyISAM   表的写操作，则会阻塞其他用户对同一表的读和写操作；</li></ul><blockquote><p>简而言之，就是读锁会阻塞写，但是不会阻塞读。而写锁，则既会阻塞读，又会阻塞写。</p><p>此外，MyISAM 的读写锁调度是写优先，这也是MyISAM不适合做写为主的表的存储引擎的原因。因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞。</p></blockquote><ul><li>MyISAM不适合做读表的存储引擎</li></ul><h2 id="5-4、InnoDB行锁"><a href="#5-4、InnoDB行锁" class="headerlink" title="5.4、InnoDB行锁"></a>5.4、InnoDB行锁</h2><h3 id="1、行锁介绍"><a href="#1、行锁介绍" class="headerlink" title="1、行锁介绍"></a>1、行锁介绍</h3><blockquote><p>行锁特点 ：</p></blockquote><ul><li>偏向 <code>InnoDB</code> 存储引擎，开销大，加锁慢；</li><li>会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</li></ul><blockquote><p><code>InnoDB</code>  与  <code>MyISAM</code>  的最大不同有两点：一是支持事务；二是 采用了行级锁。</p></blockquote><h3 id="2、背景知识"><a href="#2、背景知识" class="headerlink" title="2、背景知识"></a>2、背景知识</h3><ul><li>事务及其ACID属性</li></ul><blockquote><p>事务是由一组SQL语句组成的逻辑处理单元。</p><p>事务具有以下4个特性，简称为事务ACID属性。</p></blockquote><table><thead><tr><th>ACID属性</th><th>含义</th></tr></thead><tbody><tr><td>原子性（Atomicity）</td><td>事务是一个原子操作单元，其对数据的修改，要么全部成功，要么全部失败。</td></tr><tr><td>一致性（Consistent）</td><td>在事务开始和完成时，数据都必须保持一致状态。</td></tr><tr><td>隔离性（Isolation）</td><td>数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的 “独立” 环境下运行。</td></tr><tr><td>持久性（Durable）</td><td>事务完成之后，对于数据的修改是永久的。</td></tr></tbody></table><ul><li>并发事务处理带来的问题</li></ul><table><thead><tr><th>问题</th><th>含义</th></tr></thead><tbody><tr><td>丢失更新（Lost Update）</td><td>当两个或多个事务选择同一行，最初的事务修改的值，会被后面的事务修改的值覆盖。</td></tr><tr><td>脏读（Dirty Reads）</td><td>当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。</td></tr><tr><td>不可重复读（Non- Repeatable Reads）</td><td>一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现和以前读出的数据不一致。</td></tr><tr><td>幻读（Phantom Reads）</td><td>一个事务按照相同的查询条件重新读取以前查询过的数据，却发现其他事务插入了满足其查询条件的新数据。</td></tr></tbody></table><ul><li>事务的隔离级别</li></ul><blockquote><p>为了解决上述提到的事务并发问题，数据库提供一定的事务隔离机制来解决这个问题。数据库的事务隔离越严格，并发副作用越小，但付出的代价也就越大，因为事务隔离实质上就是使用事务在一定程度上“串行化” 进行，这显然与“并发” 是矛盾的。<br>数据库的隔离级别有4个，由低到高依次为Read uncommitted、Read committed、Repeatable read、 Serializable，这四个级别可以逐个解决脏写、脏读、不可重复读、幻读这几类问题。</p></blockquote><table><thead><tr><th>隔离级别</th><th>丢失更新(脏写)</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>×</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable  read（默认）</td><td>×</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p>备注：√ 代表可能出现 ， × 代表不会出现 。</p><ul><li>MySQL 的数据库的默认隔离级别为：<code>Repeatable  read</code> ，查看方式：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;tx_isolation&#39;;</span><br></pre></td></tr></table></figure><h3 id="3、InnoDB的行锁模式"><a href="#3、InnoDB的行锁模式" class="headerlink" title="3、InnoDB的行锁模式"></a>3、InnoDB的行锁模式</h3><blockquote><p>InnoDB  实现了以下两种类型的行锁。</p></blockquote><ul><li>共享锁（S）：又称为读锁，简称S锁，共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。</li><li>排他锁（X）：又称为写锁，简称X锁，排他锁就是不能与其他锁并存，如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据就行读取和修改。</li></ul><blockquote><p>对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排他锁（X)；</p><p>对于普通SELECT语句，InnoDB不会加任何锁；</p></blockquote><ul><li>可以通过以下语句显式地给记录集加共享锁或者排他锁</li></ul><blockquote><p>共享锁：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * FROM table_name WHERE ... LOCK IN SHARE MODE</span><br></pre></td></tr></table></figure><blockquote><p>排他锁：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * FROM table_name WHERE ... FOR UPDATE</span><br></pre></td></tr></table></figure><h3 id="4、案例环境准备"><a href="#4、案例环境准备" class="headerlink" title="4、案例环境准备"></a>4、案例环境准备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">create table test_innodb_lock</span><br><span class="line">(</span><br><span class="line">    id   int(11),</span><br><span class="line">    name varchar(16),</span><br><span class="line">    sex  varchar(1)</span><br><span class="line">) engine &#x3D; innodb</span><br><span class="line">  default charset &#x3D; utf8;</span><br><span class="line">insert into test_innodb_lock</span><br><span class="line">values (1, &#39;100&#39;, &#39;1&#39;);</span><br><span class="line">insert into test_innodb_lock</span><br><span class="line">values (3, &#39;3&#39;, &#39;1&#39;);</span><br><span class="line">insert into test_innodb_lock</span><br><span class="line">values (4, &#39;400&#39;, &#39;0&#39;);</span><br><span class="line">insert into test_innodb_lock</span><br><span class="line">values (5, &#39;500&#39;, &#39;1&#39;);</span><br><span class="line">insert into test_innodb_lock</span><br><span class="line">values (6, &#39;600&#39;, &#39;0&#39;);</span><br><span class="line">insert into test_innodb_lock</span><br><span class="line">values (7, &#39;700&#39;, &#39;0&#39;);</span><br><span class="line">insert into test_innodb_lock</span><br><span class="line">values (8, &#39;800&#39;, &#39;1&#39;);</span><br><span class="line">insert into test_innodb_lock</span><br><span class="line">values (9, &#39;900&#39;, &#39;1&#39;);</span><br><span class="line">insert into test_innodb_lock</span><br><span class="line">values (1, &#39;200&#39;, &#39;0&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create index idx_test_innodb_lock_id on test_innodb_lock (id);</span><br><span class="line">create index idx_test_innodb_lock_name on test_innodb_lock (name);</span><br></pre></td></tr></table></figure><h3 id="5、演示-InnoDB-的行锁"><a href="#5、演示-InnoDB-的行锁" class="headerlink" title="5、演示 InnoDB 的行锁"></a>5、演示 <code>InnoDB</code> 的行锁</h3><ul><li>打开两个命令行窗口，连接MySQL后关闭自动提交</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set autocommit &#x3D; 0;</span><br></pre></td></tr></table></figure><ul><li>在窗口一执行一条 <code>update</code> 语句，然后不提交</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update test_innodb_lock set name &#x3D; &#39;300&#39; where id &#x3D; 3;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311193546.png" alt="image-20210311193539183"></p><ul><li>在窗口二执行一条 <code>update</code> 语句，查看结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update test_innodb_lock set name &#x3D; &#39;30&#39; where id &#x3D; 3;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311193747.png" alt="image-20210311193747699"></p><ul><li>此时在窗口一中执行 <code>commit</code> ，提交事务，就可以释放行锁，执行窗口二的操作。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311193943.png" alt="image-20210311193943691"></p><p>注：当无索引或者索引失效时，<code>InnoDB</code>的行锁将升级为表锁</p><h3 id="6、间隙锁危害"><a href="#6、间隙锁危害" class="headerlink" title="6、间隙锁危害"></a>6、间隙锁危害</h3><blockquote><p>当我们<strong>用范围条件，而不是使用相等条件检索数据</strong>，并请求共享或排他锁时，InnoDB会给符合条件的已有数据进行加锁； </p><p><strong>对于键值在条件范围内但并不存在的记录，叫做 “间隙（GAP）” ， InnoDB也会对这个 “间隙” 加锁，这种锁机制就是所谓的 间隙锁（Next-Key锁） 。</strong></p><p>因为Query执行过程中通过范围查找的话，他会锁定整个范围内所有的索引键值，即使这个键值并不存在。</p><p>间隙锁有一个比较致命的弱点，就是当锁定一个范围键值之后，即使某些不存在的键值也会被无辜的锁定，而造成在锁定的时候无法插入锁定键值范围内的任何数据。在某些场景下这可能会对性能造成很大的危害</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311202823.png" alt="image-20210311202823816"></p><ul><li>准备两个客户端，关闭事务的自动提交。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set autocommit &#x3D; 0;</span><br></pre></td></tr></table></figure><ul><li>在窗口一执行一条 <code>update</code> 语句，在这之前我们先查询一下 <code>test_innodb_lock</code> 的数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test_innodb_lock;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311203317.png" alt="image-20210311203317696"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update &#96;test_innodb_lock&#96; set sex &#x3D; &#39;2&#39; where id &lt; 4;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311203444.png" alt="image-20210311203444361"></p><ul><li>这个时候我们再第二个窗口插入一条 <code>id</code> 为2的数据，查看结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into test_innodb_lock values(2,&#39;2000&#39;,&#39;1&#39;);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311203717.png" alt="image-20210311203716889"></p><blockquote><p>在第一个窗口提交事务，可以看到第二个窗口被阻塞的<code>insert</code> 执行成功。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311203914.png" alt="image-20210311203914384"></p><blockquote><p>可以使用逻辑删除来代替物理删除</p></blockquote><h3 id="7、查看InnoDB行锁争用情况"><a href="#7、查看InnoDB行锁争用情况" class="headerlink" title="7、查看InnoDB行锁争用情况"></a>7、查看<code>InnoDB</code>行锁争用情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show status like &#39;innodb_row_lock%&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210311204125.png" alt="image-20210311204125281"></p><blockquote><p>参数说明</p></blockquote><ul><li><code>Innodb_row_lock_current_waits</code>:  当前正在等待锁定的数量</li><li><code>Innodb_row_lock_time</code>:  从系统启动到现在锁定总时间长度</li><li><code>Innodb_row_lock_time_avg</code>：每次等待所花平均时长</li><li><code>Innodb_row_lock_time_max</code>：从系统启动到现在等待最长的一次所花的时间</li><li><code>Innodb_row_lock_waits</code>：系统启动后到现在总共等待的次数</li></ul><blockquote><p>当等待的次数很高，而且每次等待的时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手制定优化计划。</p></blockquote><h3 id="8、总结"><a href="#8、总结" class="headerlink" title="8、总结"></a>8、总结</h3><blockquote><p><code>InnoDB</code> 存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面带来了性能损耗可能比表锁会更高一些，但是在整体并发处理能力方面要远远优于 <code>MyISAM</code> 的表锁的。当系统并发量较高的时候， <code>InnoDB</code> 的整体性能和 <code>MyISAM</code> 相比就会有比较明显的优势。<br>但是，<code>InnoDB</code> 的行级锁同样也有其脆弱的一面，当我们使用不当的时候，可能会让 <code>InnoDB</code> 的整体性能表现不仅不能比 <code>MyISAM</code>高，甚至可能会更差。</p><p>优化建议：</p></blockquote><ul><li><strong>尽可能让所有数据检索都能通过索引来完成，避免无索引行锁升级为表锁。</strong></li><li>合理设计索引，尽量缩小锁的范围</li><li>尽可能减少索引条件，及索引范围，避免间隙锁尽量控制事务大小，减少锁定资源量和时间长度</li><li>尽可使用低级别事务隔离<strong>（但是需要业务层面满足需求）</strong></li></ul><h1 id="六、常用SQL技巧"><a href="#六、常用SQL技巧" class="headerlink" title="六、常用SQL技巧"></a>六、常用SQL技巧</h1><h2 id="6-1、SQL执行顺序"><a href="#6-1、SQL执行顺序" class="headerlink" title="6.1、SQL执行顺序"></a>6.1、SQL执行顺序</h2><h3 id="1、编写顺序"><a href="#1、编写顺序" class="headerlink" title="1、编写顺序"></a>1、编写顺序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT </span><br><span class="line">    &lt;select list&gt;</span><br><span class="line">FROM </span><br><span class="line">     &lt;left_table&gt; &lt;join_type&gt;</span><br><span class="line">JOIN </span><br><span class="line">     &lt;right_table&gt; ON &lt;join_condition&gt;</span><br><span class="line">WHERE</span><br><span class="line">    &lt;where_condition&gt;</span><br><span class="line">GROUP BY </span><br><span class="line">    &lt;group_by_list&gt;</span><br><span class="line">HAVING</span><br><span class="line">    &lt;having_condition&gt;</span><br><span class="line">ORDER BY </span><br><span class="line">    &lt;order_by_condition&gt;</span><br><span class="line">LIMIT </span><br><span class="line">    &lt;limit_params&gt;</span><br></pre></td></tr></table></figure><p><code>s f j w g h o l</code></p><h3 id="2、执行顺序"><a href="#2、执行顺序" class="headerlink" title="2、执行顺序"></a>2、执行顺序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">FROM </span><br><span class="line">    &lt;left_table&gt;</span><br><span class="line">ON </span><br><span class="line">    &lt;join_condition&gt;</span><br><span class="line">    &lt;join_type&gt;JOIN &lt;right_table&gt;</span><br><span class="line">WHERE </span><br><span class="line">    &lt;where_condition&gt;</span><br><span class="line">GROUP BY </span><br><span class="line">    &lt;group_by_list&gt;</span><br><span class="line">HAVING </span><br><span class="line">    &lt;having_condition&gt;</span><br><span class="line">SELECT DISTINCT</span><br><span class="line">    &lt;select list&gt;</span><br><span class="line">ORDER BY </span><br><span class="line">    &lt;order_by_condition&gt;</span><br><span class="line">LIMIT</span><br><span class="line">    &lt;limit_params&gt;</span><br></pre></td></tr></table></figure><p><code>f j w g h s o l </code></p><ul><li>先指定从哪一张或哪几张表中查询数据（设计联表及联表条件）</li><li>根据什么条件进行查询？（where进行一次过滤）</li><li>根据什么条件进行分组（group by）</li><li>对上面的结果进行二次过滤（having）</li><li>从二次过滤的结果中挑选出要取得的结果列</li><li>最后进行排序和分页。</li></ul><h2 id="6-2、正则表达式的使用"><a href="#6-2、正则表达式的使用" class="headerlink" title="6.2、正则表达式的使用"></a>6.2、正则表达式的使用</h2><blockquote><p>正则表达式是指一个用来描述或者匹配一系列符合某个句法规则的字符串的单个字符串。</p></blockquote><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>^</td><td>在字符串开始处进行匹配</td></tr><tr><td>$</td><td>在字符串末尾处进行匹配</td></tr><tr><td>.</td><td>匹配任意单个字符,  包括换行符</td></tr><tr><td>[…]</td><td>匹配出括号内的任意字符</td></tr><tr><td>[^…]</td><td>匹配不出括号内的任意字符</td></tr><tr><td>a*</td><td>匹配零个或者多个a(包括空串)</td></tr><tr><td>a+</td><td>匹配一个或者多个a(不包括空串)</td></tr><tr><td>a?</td><td>匹配零个或者一个a</td></tr><tr><td>a1|a2</td><td>匹配a1或a2</td></tr><tr><td>a(m)</td><td>匹配m个a</td></tr><tr><td>a(m,)</td><td>至少匹配m个a</td></tr><tr><td>a(m,n)</td><td>匹配m个a 到 n个a</td></tr><tr><td>a(,n)</td><td>匹配0到n个a</td></tr><tr><td>(…)</td><td>将模式元素组成单一元素</td></tr></tbody></table><h2 id="6-3、MySQL常用函数"><a href="#6-3、MySQL常用函数" class="headerlink" title="6.3、MySQL常用函数"></a>6.3、MySQL常用函数</h2><h3 id="1、数字函数"><a href="#1、数字函数" class="headerlink" title="1、数字函数"></a>1、数字函数</h3><table><thead><tr><th>函数名称</th><th>作用</th></tr></thead><tbody><tr><td>ABS</td><td>求绝对值</td></tr><tr><td>SQRT</td><td>求二次方根</td></tr><tr><td>MOD</td><td>求余数</td></tr><tr><td>CEIL 和 CEILING</td><td>两个函数功能相同，都是返回不小于参数的最小整数，即向上取整</td></tr><tr><td>FLOOR</td><td>向下取整，返回值转化为一个BIGINT</td></tr><tr><td>RAND</td><td>生成一个0~1之间的随机数，传入整数参数是，用来产生重复序列</td></tr><tr><td>ROUND</td><td>对所传参数进行四舍五入</td></tr><tr><td>SIGN</td><td>返回参数的符号</td></tr><tr><td>POW 和 POWER</td><td>两个函数的功能相同，都是所传参数的次方的结果值</td></tr><tr><td>SIN</td><td>求正弦值</td></tr><tr><td>ASIN</td><td>求反正弦值，与函数  SIN 互为反函数</td></tr><tr><td>COS</td><td>求余弦值</td></tr><tr><td>ACOS</td><td>求反余弦值，与函数  COS 互为反函数</td></tr><tr><td>TAN</td><td>求正切值</td></tr><tr><td>ATAN</td><td>求反正切值，与函数  TAN 互为反函数</td></tr><tr><td>COT</td><td>求余切值</td></tr></tbody></table><h3 id="2、字符串函数"><a href="#2、字符串函数" class="headerlink" title="2、字符串函数"></a>2、字符串函数</h3><table><thead><tr><th>函数名称</th><th>作用</th></tr></thead><tbody><tr><td>LENGTH</td><td>计算字符串长度函数，返回字符串的字节长度</td></tr><tr><td>CONCAT</td><td>合并字符串函数，返回结果为连接参数产生的字符串，参数可以使一个或多个</td></tr><tr><td>INSERT</td><td>替换字符串函数</td></tr><tr><td>LOWER</td><td>将字符串中的字母转换为小写</td></tr><tr><td>UPPER</td><td>将字符串中的字母转换为大写</td></tr><tr><td>LEFT</td><td>从左侧字截取符串，返回字符串左边的若干个字符</td></tr><tr><td>RIGHT</td><td>从右侧字截取符串，返回字符串右边的若干个字符</td></tr><tr><td>TRIM</td><td>删除字符串左右两侧的空格</td></tr><tr><td>REPLACE</td><td>字符串替换函数，返回替换后的新字符串</td></tr><tr><td>SUBSTRING</td><td>截取字符串，返回从指定位置开始的指定长度的字符换</td></tr><tr><td>REVERSE</td><td>字符串反转（逆序）函数，返回与原始字符串顺序相反的字符串</td></tr></tbody></table><h3 id="3、日期函数"><a href="#3、日期函数" class="headerlink" title="3、日期函数"></a>3、日期函数</h3><table><thead><tr><th>函数名称</th><th>作用</th></tr></thead><tbody><tr><td>CURDATE  和 CURRENT_DATE</td><td>两个函数作用相同，返回当前系统的日期值</td></tr><tr><td>CURTIME 和 CURRENT_TIME</td><td>两个函数作用相同，返回当前系统的时间值</td></tr><tr><td>NOW 和 SYSDATE</td><td>两个函数作用相同，返回当前系统的日期和时间值</td></tr><tr><td>MONTH</td><td>获取指定日期中的月份</td></tr><tr><td>MONTHNAME</td><td>获取指定日期中的月份英文名称</td></tr><tr><td>DAYNAME</td><td>获取指定曰期对应的星期几的英文名称</td></tr><tr><td>DAYOFWEEK</td><td>获取指定日期对应的一周的索引位置值</td></tr><tr><td>WEEK</td><td>获取指定日期是一年中的第几周，返回值的范围是否为  0〜52  或 1〜53</td></tr><tr><td>DAYOFYEAR</td><td>获取指定曰期是一年中的第几天，返回值范围是1~366</td></tr><tr><td>DAYOFMONTH</td><td>获取指定日期是一个月中是第几天，返回值范围是1~31</td></tr><tr><td>YEAR</td><td>获取年份，返回值范围是  1970〜2069</td></tr><tr><td>TIME_TO_SEC</td><td>将时间参数转换为秒数</td></tr><tr><td>SEC_TO_TIME</td><td>将秒数转换为时间，与TIME_TO_SEC  互为反函数</td></tr><tr><td>DATE_ADD 和 ADDDATE</td><td>两个函数功能相同，都是向日期添加指定的时间间隔</td></tr><tr><td>DATE_SUB 和 SUBDATE</td><td>两个函数功能相同，都是向日期减去指定的时间间隔</td></tr><tr><td>ADDTIME</td><td>时间加法运算，在原始时间上添加指定的时间</td></tr><tr><td>SUBTIME</td><td>时间减法运算，在原始时间上减去指定的时间</td></tr><tr><td>DATEDIFF</td><td>获取两个日期之间间隔，返回参数 1 减去参数 2 的值</td></tr><tr><td>DATE_FORMAT</td><td>格式化指定的日期，根据参数返回指定格式的值</td></tr><tr><td>WEEKDAY</td><td>获取指定日期在一周内的对应的工作日索引</td></tr></tbody></table><h3 id="4、聚合函数"><a href="#4、聚合函数" class="headerlink" title="4、聚合函数"></a>4、聚合函数</h3><table><thead><tr><th>函数名称</th><th>作用</th></tr></thead><tbody><tr><td>MAX</td><td>查询指定列的最大值</td></tr><tr><td>MIN</td><td>查询指定列的最小值</td></tr><tr><td>COUNT</td><td>统计查询结果的行数</td></tr><tr><td>SUM</td><td>求和，返回指定列的总和</td></tr><tr><td>AVG</td><td>求平均值，返回指定列数据的平均值</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> MySQL高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🤓数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL高级学习（二）-MySQL体系结构、SQL优化、索引使用</title>
      <link href="posts/996934066.html"/>
      <url>posts/996934066.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、MySQL的体系结构概览"><a href="#一、MySQL的体系结构概览" class="headerlink" title="一、MySQL的体系结构概览"></a>一、MySQL的体系结构概览</h1><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210307200516.png" alt="image-20210307200516510"></p><blockquote><p><strong>整个MySQL  Server由以下组成</strong></p></blockquote><ul><li><p>Connection Pool : 连接池组件</p></li><li><p>Management Services &amp; Utilities : 管理服务和工具组件</p></li><li><p>SQL Interface : SQL接口组件 </p></li><li><p>Parser : 查询分析器组件 </p></li><li><p>Optimizer : 优化器组件 </p></li><li><p>Caches &amp; Buﬀers : 缓冲池组件</p></li><li><p>Pluggable Storage Engines : 存储引擎</p></li><li><p>File System : 文件系统</p></li></ul><h2 id="1-1、连接层"><a href="#1-1、连接层" class="headerlink" title="1.1、连接层"></a>1.1、连接层</h2><blockquote><p>最上层是一些客户端和链接服务，包含本地sock 通信和大多数基于客户端/服务端工具实现的类似于 TCP/IP的通信。</p><p>主要完成一些类似于<strong>连接处理、授权认证、及相关的安全方案</strong>。在该层上引入了<strong>线程池</strong>的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</p></blockquote><h2 id="1-2、服务层"><a href="#1-2、服务层" class="headerlink" title="1.2、服务层"></a>1.2、服务层</h2><blockquote><p>第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成<strong>缓存的查询（Caches &amp; Buﬀers）</strong>，<strong>SQL的分析和优化（Optimizer）</strong>，部分内置函数的执行。<strong>所有跨存储引擎的功能也在这一层实现，如 过程、函数等</strong>。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定表的查询的顺序，是否利用索引等， 最后生成相应的执行操作。如果是</p><p>select语句，服务器还会查询内部的缓存，如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</p></blockquote><h2 id="1-3、引擎层"><a href="#1-3、引擎层" class="headerlink" title="1.3、引擎层"></a>1.3、引擎层</h2><blockquote><p>存储引擎层， <strong>存储引擎真正的负责了MySQL中数据的存储和提取</strong>，服务器通过API和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我们<strong>可以根据自己的需要，来选取合适的存储引擎</strong>。</p></blockquote><h2 id="1-4、存储层"><a href="#1-4、存储层" class="headerlink" title="1.4、存储层"></a>1.4、存储层</h2><blockquote><p>数据存储层，主要是<strong>将数据存储在文件系统之上</strong>，并完成与存储引擎的交互。</p></blockquote><p>和其他数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。主要体现在存储引擎上，插件式的存储引擎架构，将查询处理和其他的系统任务以及数据的存储提取分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p><h1 id="二、存储引擎"><a href="#二、存储引擎" class="headerlink" title="二、存储引擎"></a>二、存储引擎</h1><h2 id="2-1、存储引擎概述"><a href="#2-1、存储引擎概述" class="headerlink" title="2.1、存储引擎概述"></a>2.1、存储引擎概述</h2><blockquote><p>和大多数的数据库不同,  MySQL中有一个存储引擎的概念,  针对不同的存储需求可以选择最优的存储引擎。</p><p><strong>存储引擎就是存储数据，建立索引，更新查询数据等等技术的实现方式</strong> 。</p><p><strong>存储引擎是基于表</strong>的，而不是基于库的。所以存储引擎也可被称为表类型。</p></blockquote><p>在使用数据库可视化工具创建库时，不会要求你选择存储引擎，而在创建表时，会让你选择存储引擎。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210307203200.png" alt="image-20210307203200389"></p><blockquote><p>Oracle，SqlServer等数据库只有一种存储引擎。MySQL提供了插件式的存储引擎架构。所以MySQL存在多种存储引擎，可以根据需要使用相应引擎，或者编写存储引擎。</p><p>MySQL5.0支持的存储引擎包含  ：  <strong>InnoDB（5.5之后，MySQL默认的存储引擎）</strong>  、<strong>MyISAM（5.5之前，MySQL默认的存储引擎）</strong>   、BDB、MEMORY、MERGE、EXAMPLE、NDB Cluster、ARCHIVE、CSV、BLACKHOLE、FEDERATED等，<strong>其中InnoDB和BDB提供事务安全表</strong>，其他存储引擎是非事务安全表。</p></blockquote><h3 id="1、查看当前数据库支持的存储引擎"><a href="#1、查看当前数据库支持的存储引擎" class="headerlink" title="1、查看当前数据库支持的存储引擎"></a>1、查看当前数据库支持的存储引擎</h3><blockquote><p>使用指令 <code>show engines</code> 来查看</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show engines;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210307203646.png" alt="image-20210307203646293"></p><blockquote><p>从上面搜索到的结果可以看到，MySQL默认支持的存储引擎是 <strong>InnoDB</strong>，在建表时如果不加以指定，那么默认使用 <strong>InnoDB</strong> 作为存储引擎。</p><p><strong>InnoDB</strong> 支持 <strong>事务</strong>、<strong>行级锁</strong> 和 <strong>外键</strong>。</p><p>MySQL5.5之前的默认存储引擎是MyISAM，5.5之后就改为了InnoDB。</p></blockquote><h3 id="2、查看默认的存储引擎"><a href="#2、查看默认的存储引擎" class="headerlink" title="2、查看默认的存储引擎"></a>2、查看默认的存储引擎</h3><blockquote><p>使用指令 <code>show variables like &#39;%storage_engine%&#39;</code> 查看</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;%storage_engine%&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210307204509.png" alt="image-20210307204509575"></p><h2 id="2-2、各种存储引擎特性"><a href="#2-2、各种存储引擎特性" class="headerlink" title="2.2、各种存储引擎特性"></a>2.2、各种存储引擎特性</h2><blockquote><p>下面介绍几种常用的存储引擎，和各引擎间区别，如下表</p></blockquote><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>MEMORY</th><th>MERGE</th><th>NDB</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td><td>没有</td><td>有</td></tr><tr><td>事务安全</td><td><strong>支持</strong></td><td></td><td></td><td></td><td></td></tr><tr><td>锁机制</td><td><strong>行锁(适合高并发)</strong></td><td><strong>表锁</strong></td><td>表锁</td><td>表锁</td><td>行锁</td></tr><tr><td>B树索引</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>哈希索引</td><td></td><td></td><td>支持</td><td></td><td></td></tr><tr><td>全文索引</td><td>支持(5.6版本之后)</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>集群索引</td><td>支持</td><td></td><td></td><td></td><td></td></tr><tr><td>数据索引</td><td>支持</td><td></td><td>支持</td><td></td><td>支持</td></tr><tr><td>索引缓存</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>数据可压缩</td><td></td><td>支持</td><td></td><td></td><td></td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N/A</td><td>低</td><td>低</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td><td>低</td><td>高</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td><strong>支持</strong></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="1、查看-修改MySQL事务隔离级别"><a href="#1、查看-修改MySQL事务隔离级别" class="headerlink" title="1、查看/修改MySQL事务隔离级别"></a>1、查看/修改MySQL事务隔离级别</h3><ul><li>查看MySQL的事务隔离级别，MySQL默认的事务隔离级别是<strong>可重复读</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;%isolation%&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210307211527.png" alt="image-20210307211527447"></p><ul><li>修改MySQL的事务隔离级别</li></ul><blockquote><p>语法：</p><p>SET [GLOBAL | SESSION] TRANSACTION ISOLATION LEVEL<br>{<br>    REPEATABLE READ<br>  | READ COMMITTED<br>  | READ UNCOMMITTED<br>  | SERIALIZABLE<br>}</p></blockquote><h3 id="2、InnoDB"><a href="#2、InnoDB" class="headerlink" title="2、InnoDB"></a>2、InnoDB</h3><blockquote><p>InnoDB存储引擎是Mysql的默认存储引擎。InnoDB存储引擎提供了具有提交、回滚、崩溃恢复能力的事务安全。但是对比MyISAM的存储引擎，InnoDB写的处理效率差一些，并且会占用更多的磁盘空间以保留数据和索引。</p><p>InnoDB存储引擎不同于其他存储引擎的特点 ：<strong>事务控制</strong>、支持外键</p></blockquote><h3 id="3、InnoDB的事务控制"><a href="#3、InnoDB的事务控制" class="headerlink" title="3、InnoDB的事务控制"></a>3、InnoDB的事务控制</h3><ul><li>创建一张表用于演示 <strong>InnoDB</strong> 存储引擎的特性–事务控制。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table goods_innodb</span><br><span class="line">(</span><br><span class="line">    id   int         NOT NULL AUTO_INCREMENT,</span><br><span class="line">    name varchar(20) NOT NULL,</span><br><span class="line">    primary key (id)</span><br><span class="line">) ENGINE &#x3D; innodb</span><br><span class="line">  DEFAULT CHARSET &#x3D; utf8;</span><br></pre></td></tr></table></figure><blockquote><p>手动开启事务，打开两个cmd窗口，链接上数据库</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p你的密码</span><br></pre></td></tr></table></figure><blockquote><p>在第一个窗口中输入以下命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">insert into goods_innodb(id,name) values (2,&#39;起飞&#39;);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210307211158.png" alt="image-20210307211158447"></p><blockquote><p>此时使用第二个窗口查看表数据，发现没有 <code>id</code> 为2的数据</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210307211222.png" alt="image-20210307211222119"></p><blockquote><p>在第一个窗口中提交事务，再次查看第二个窗口中数据库表数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commit;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210307211308.png" alt="image-20210307211308231"></p><h3 id="4、InnoDB支持外键"><a href="#4、InnoDB支持外键" class="headerlink" title="4、InnoDB支持外键"></a>4、InnoDB支持外键</h3><ul><li>创建两张表用于演示 <strong>InnoDB</strong> 存储引擎的特性–支持外键。</li></ul><blockquote><p>MySQL支持外键的存储引擎只有InnoDB ， 在创建外键的时候， 要求父表必须有对应的索引 ， <strong>子表在创建外键的时候，  也会自动的创建对应的索引。</strong></p><p><strong>下面两张表中 ， country_innodb是父表 ， country_id为主键索引，city_innodb表是子表，country_id字段为外键，对应于country_innodb表的主键country_id 。</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">create table country_innodb</span><br><span class="line">(</span><br><span class="line">    country_id   int          NOT NULL AUTO_INCREMENT,</span><br><span class="line">    country_name varchar(100) NOT NULL,</span><br><span class="line">    primary key (country_id)</span><br><span class="line">) ENGINE &#x3D; InnoDB</span><br><span class="line">  DEFAULT CHARSET &#x3D; utf8;</span><br><span class="line"></span><br><span class="line">create table city_innodb</span><br><span class="line">(</span><br><span class="line">    city_id    int         NOT NULL AUTO_INCREMENT,</span><br><span class="line">    city_name  varchar(50) NOT NULL,</span><br><span class="line">    country_id int         NOT NULL,</span><br><span class="line">    primary key (city_id),</span><br><span class="line">    key idx_fk_country_id (country_id),</span><br><span class="line">    CONSTRAINT &#96;fk_city_country&#96; FOREIGN KEY (country_id) REFERENCES country_innodb (country_id) ON DELETE RESTRICT ON UPDATE CASCADE</span><br><span class="line">) ENGINE &#x3D; InnoDB</span><br><span class="line">  DEFAULT CHARSET &#x3D; utf8;</span><br><span class="line">  </span><br><span class="line">insert into country_innodb values(null,&#39;China&#39;),(null,&#39;America&#39;),(null,&#39;Japan&#39;);</span><br><span class="line">insert into city_innodb values(null,&#39;Xian&#39;,1),(null,&#39;NewYork&#39;,2), (null,&#39;BeiJing&#39;,1);  </span><br></pre></td></tr></table></figure><blockquote><p>在删除主表信息时，如果子表中有和待删除数据关联的数据，那么主表不能删除</p><p>试着删除主表中 <code>id</code> 为2的数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from country_innodb where country_id &#x3D; 2;</span><br></pre></td></tr></table></figure><blockquote><p>控制台结果为：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210307213340.png" alt="image-20210307213340193"></p><blockquote><p>在创建索引时，  可以指定在删除、更新父表时，对子表进行的相应操作，包括  <strong>RESTRICT、CASCADE、SET  NULL和 NO ACTION。</strong></p></blockquote><ul><li><p>RESTRICT和NO  ACTION相同，  是指限制在子表有关联记录的情况下，  父表不能更新；</p></li><li><p>CASCADE表示父表在更新或者删除时，更新或者删除子表对应的记录；</p></li><li><p>SET  NULL  则表示父表在更新或者删除的时候，子表的对应字段被SET  NULL 。</p></li></ul><blockquote><p>针对上面创建的两个表， 子表的外键指定是 <strong>ON DELETE RESTRICT ON UPDATE CASCADE</strong> 方式的， <strong>那么在主表删除记录的时候， 如果子表有对应记录， 则不允许删除， 主表在更新记录的时候， 如果子表有对应记录，  则子表对应更新 。</strong></p></blockquote><ul><li>下面演示 <strong>UPDATE CASCADE</strong> ，将 <code>id</code> 为1的记录的 <code>id</code> 设置为100</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update country_innodb set country_id &#x3D; 100 where country_id &#x3D; 1;</span><br></pre></td></tr></table></figure><blockquote><p>此时再次查看两张表中的数据，发现子表与父表关联的数据也被修改了。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210307214342.png" alt="image-20210307214342641"></p><h3 id="5、InnoDB的存储方式"><a href="#5、InnoDB的存储方式" class="headerlink" title="5、InnoDB的存储方式"></a>5、InnoDB的存储方式</h3><blockquote><p><strong>InnoDB</strong> 存储表和索引有以下两种方式：</p></blockquote><ul><li>使用共享表空间存储，  这种方式创建的表的表结构保存在.frm文件中，  数据和索引保存innodb_data_home_dir  和  innodb_data_ﬁle_path定义的表空间中，可以是多个文件。</li><li>使用多表空间存储，  这种方式创建的表的表结构仍然存在  .frm  文件中，但是每个表的数据和索引单独保存在.ibd 中。</li></ul><h3 id="6、MyISAM"><a href="#6、MyISAM" class="headerlink" title="6、MyISAM"></a>6、MyISAM</h3><blockquote><p>MyISAM 不支持事务、也不支持外键，**其优势是访问的速度快，对事务的完整性没有要求或者以SELECT、INSERT为主的应用基本上都可以使用这个引擎来创建表 **。</p><p>有以下两个比较重要的特点：</p></blockquote><ul><li><strong>不支持事务</strong></li></ul><blockquote><p>创建一张表，在建表语句中指定存储引擎为<strong>MyISAM</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table goods_myisam</span><br><span class="line">(</span><br><span class="line">    id   int         NOT NULL AUTO_INCREMENT,</span><br><span class="line">    name varchar(20) NOT NULL,</span><br><span class="line">    primary key (id)</span><br><span class="line">) ENGINE &#x3D; myisam</span><br><span class="line">  DEFAULT CHARSET &#x3D; utf8;</span><br></pre></td></tr></table></figure><blockquote><p>同上，使用两个cmd窗口，在第一个窗口中使用 <code>start transaction</code> 开启事务，插入一条数据</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210307224114.png" alt="image-20210307224114417"></p><blockquote><p>在第二个窗口查看表数据，发现已经查询到了未提交的数据，故 <code>myisam</code> 不支持事务。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from &#96;index_study&#96;.goods_myisam;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210307224221.png" alt="image-20210307224221849"></p><ul><li><strong>文件存储方式</strong></li></ul><blockquote><p>每个MyISAM在磁盘上存储成3个文件，其文件名都和表名相同，但拓展名分别是：</p></blockquote><ul><li>.frm (存储表定义)；</li><li>.MYD(MYData , 存储数据)；</li><li>.MYI(MYIndex , 存储索引)；</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210307224439.png" alt="image-20210307224439274"></p><h3 id="7、MEMORY"><a href="#7、MEMORY" class="headerlink" title="7、MEMORY"></a>7、MEMORY</h3><blockquote><p>Memory存储引擎将表的数据存放在内存中。每个MEMORY表实际对应一个磁盘文件，格式是.frm ，该文件中只存储表的结构，而其数据文件，都是存储在内存中，这样有利于数据的快速处理，提高整个表的效率。MEMORY类型的表访问非常地快，因为他的数据是存放在内存中的，并且默认使用HASH索引 ， 但是服务一旦关闭，表中的数据就会丢失。</p></blockquote><h2 id="2-3、存储引擎的选择"><a href="#2-3、存储引擎的选择" class="headerlink" title="2.3、存储引擎的选择"></a>2.3、存储引擎的选择</h2><blockquote><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。<strong>对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</strong></p><p>以下是几种常用的存储引擎的使用环境。</p></blockquote><h3 id="1、InnoDB"><a href="#1、InnoDB" class="headerlink" title="1、InnoDB"></a>1、InnoDB</h3><blockquote><p>Mysql的默认存储引擎，<strong>用于事务处理应用程序，支持外键。</strong></p><p>如果应用对事务的完整性有比较高的要求，<strong>在并发条件下要求数据的一致性</strong>，数据操作除了插入和查询意外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。</p><p>InnoDB存储引擎除了有效的降低由于删除和更新导致的锁定， 还可以确保事务的完整提交和回滚，对于<strong>类似于计费系统或者财务系统等对数据准确性要求比较高的系统</strong>，InnoDB是最合适的选择。</p><p><strong>开发中绝大部分使用的都是InnoDB</strong></p></blockquote><h3 id="2、MyISAM"><a href="#2、MyISAM" class="headerlink" title="2、MyISAM"></a>2、MyISAM</h3><blockquote><p>如果应用是以<strong>读操作和插入操作</strong>为主，<strong>只有很少的更新和删除操作</strong>，并且<strong>对事务的完整性、并发性要求不是很高</strong>，那么选择这个存储引擎是非常合适的。</p></blockquote><h3 id="3、Memory"><a href="#3、Memory" class="headerlink" title="3、Memory"></a>3、Memory</h3><blockquote><p>将所有数据保存在RAM中，在需要快速定位记录和其他类似数据环境下，可以提供几块的访问。</p><p><strong>MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中</strong>，其次是要确保表的数据可以恢复，<strong>数据库异常终止后表中的数据是可以恢复的。</strong></p><p>MEMORY表通常用于<strong>更新不太频繁的小表</strong>，用以快速得到访问结果。</p></blockquote><h1 id="三、SQL优化（一）"><a href="#三、SQL优化（一）" class="headerlink" title="三、SQL优化（一）"></a>三、SQL优化（一）</h1><blockquote><p>在应用的的开发过程中，由于初期数据量小，开发人员写 SQL 语句时更重视功能上的实现，但是当应用系统正式上线后，随着生产数据量的急剧增长，很多 SQL 语句开始逐渐显露出性能问题，对生产的影响也越来越大，此时这些<strong>有问题的 SQL 语句就成为整个系统性能的瓶颈</strong>，因此我们必须要对它们进行优化。</p><p>当面对一个有 SQL 性能问题的数据库时，我们应该从何处入手来进行系统的分析，使得能够尽快定位问题 SQL 并尽快解决问题。</p></blockquote><h2 id="3-1、查看SQL执行频率"><a href="#3-1、查看SQL执行频率" class="headerlink" title="3.1、查看SQL执行频率"></a>3.1、查看SQL执行频率</h2><p>MySQL 客户端连接成功后，通过 show [session|global] status 命令可以提供服务器状态信息。show [session|global]  status  可以根据需要加上参数“session”或者“global”来显示  session  级（当前连接）的计结果和</p><p>global   级（自数据库上次启动至今）的统计结果。如果不写，默认使用参数是“session”。</p><h3 id="1、查询当前会话中所有统计参数值"><a href="#1、查询当前会话中所有统计参数值" class="headerlink" title="1、查询当前会话中所有统计参数值"></a>1、查询当前会话中所有统计参数值</h3><blockquote><p>下面的命令显示了当前  session  中所有统计参数的值：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show status like &#39;Com_______&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210308153514.png" alt="image-20210308153514166"></p><h3 id="2、查询全局统计参数值"><a href="#2、查询全局统计参数值" class="headerlink" title="2、查询全局统计参数值"></a>2、查询全局统计参数值</h3><blockquote><p>上面的命令查询的只是<strong>当前链接</strong>的统计参数，如果要统计全局参数，我们可以在 status 前添加一个 <code>global</code> 参数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global status like &#39;Com_______&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210308154221.png" alt="image-20210308154221306"></p><h3 id="3、查询InnoDB存储引擎的操作数量"><a href="#3、查询InnoDB存储引擎的操作数量" class="headerlink" title="3、查询InnoDB存储引擎的操作数量"></a>3、查询InnoDB存储引擎的操作数量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show status like &#39;Innodb_rows_%&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果如下</p><p><code>InnoDB</code> 插入的行：8</p><p><code>InnoDB</code> 查询的行：20</p><p><code>InnoDB</code> 更新的行：3</p><p><code>InnoDB</code> 删除的行：0</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210308154523.png" alt="image-20210308154523163"></p><blockquote><p>通过上面的几条指令，就可以大致确定当前数据库到底是以读为主还是以写为主。</p></blockquote><h3 id="4、参数说明"><a href="#4、参数说明" class="headerlink" title="4、参数说明"></a>4、参数说明</h3><table><thead><tr><th><strong>参数</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>Com_select</td><td>执行 select 操作的次数，一次查询只累加 1。</td></tr><tr><td>Com_insert</td><td>执行  INSERT  操作的次数，对于批量插入的  INSERT 操作，只累加一次。</td></tr><tr><td>Com_update</td><td>执行 UPDATE 操作的次数。</td></tr><tr><td>Com_delete</td><td>执行 DELETE 操作的次数。</td></tr><tr><td>Innodb_rows_read</td><td>select  查询返回的行数。</td></tr><tr><td>Innodb_rows_inserted</td><td>执行 INSERT 操作插入的行数。</td></tr><tr><td>Innodb_rows_updated</td><td>执行 UPDATE 操作更新的行数。</td></tr><tr><td>Innodb_rows_deleted</td><td>执行 DELETE 操作删除的行数。</td></tr><tr><td>Connections</td><td>试图连接 MySQL 服务器的次数。</td></tr><tr><td>Uptime</td><td>服务器工作时间。</td></tr><tr><td>Slow_queries</td><td>慢查询的次数。</td></tr></tbody></table><blockquote><p>Com_***  :  这些参数对于所有存储引擎的表操作都会进行累计。</p><p>Innodb_***  :  这几个参数只是针对InnoDB  存储引擎的，累加的算法也略有不同。</p></blockquote><h2 id="3-2、定位低效率执行SQL"><a href="#3-2、定位低效率执行SQL" class="headerlink" title="3.2、定位低效率执行SQL"></a>3.2、定位低效率执行SQL</h2><blockquote><p>可以通过以下两种方式定位执行效率较低的  SQL  语句。</p></blockquote><ul><li>慢查询日志 : 通过慢查询日志定位那些执行效率较低的 SQL 语句，用–log-slow-queries[=ﬁle_name]选项启动时，mysqld 写一个包含所有执行时间超过 long_query_time  秒的  SQL  语句的日志文件。</li><li><strong>show processlist</strong> : 慢查询日志在查询结束以后才纪录，所以在应用反映执行效率出现问题的时候查询慢查询日志并不能定位问题，可以使用show processlist命令查看当前MySQL在进行的线程，包括线程的状态、是否锁表等，可以实时地查看 SQL 的执行情况，同时对一些锁表操作进行优化。</li></ul><h3 id="1、使用show-processlist-指令连接和执行操作"><a href="#1、使用show-processlist-指令连接和执行操作" class="headerlink" title="1、使用show processlist 指令连接和执行操作"></a>1、使用show processlist 指令连接和执行操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show processlist;</span><br></pre></td></tr></table></figure><blockquote><p>查看执行效果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210308155757.png" alt="image-20210308155757344"></p><blockquote><p>查看 <code>Info</code> 列信息</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* ApplicationName&#x3D;DataGrip 2020.2.2 *&#x2F; 操作数据库的应用，我这里用的是&#96;DATAGRIP&#96;</span><br><span class="line">show processlist;&#x2F;&#x2F;执行的语句</span><br></pre></td></tr></table></figure><blockquote><p>上述参数说明</p></blockquote><ul><li>id列，用户登录mysql时，系统分配的”connection_id”，可以使用函数connection_id()查看 </li><li>user列，显示当前用户。如果不是root，这个命令就只显示用户权限范围的sql语句</li><li>host列，显示这个语句是从哪个ip的哪个端口上发的，可以用来跟踪出现问题语句的用户 </li><li>db列，显示这个进程目前连接的是哪个数据库</li><li>command列，显示当前连接的执行的命令，一般取值为休眠（sleep），查询（query），连接<br>（connect）等</li><li>time列，显示这个状态持续的时间，单位是秒 </li><li>state列，显示使用当前连接的sql语句的状态，很重要的列。state描述的是语句执行中的某一个状态。一<br>个sql语句，以查询为例，可能需要经过copying to tmp table、sorting result、sending data等状态才可以完成</li><li>info列，显示这个sql语句，是判断问题语句的一个重要依据</li></ul><h3 id="2、使用show-processlist实时监控慢查询sql"><a href="#2、使用show-processlist实时监控慢查询sql" class="headerlink" title="2、使用show processlist实时监控慢查询sql"></a>2、使用show processlist实时监控慢查询sql</h3><blockquote><p>在一张大数据表中，执行一条慢查询sql，然后快速使用 <code>show processlist</code> 查看，结果如下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210308161158.png" alt="image-20210308161158303"></p><h2 id="3-3、Explain分析执行计划"><a href="#3-3、Explain分析执行计划" class="headerlink" title="3.3、Explain分析执行计划"></a>3.3、Explain分析执行计划</h2><blockquote><p>通过以上步骤查询到效率低的 SQL 语句后，可以通过 EXPLAIN或者 DESC命令获取 MySQL如何执行 SELECT 语句的信息，包括在  SELECT  语句执行过程中表如何连接和连接的顺序。</p></blockquote><h3 id="1、使用-explain-查询SQL语句的执行计划"><a href="#1、使用-explain-查询SQL语句的执行计划" class="headerlink" title="1、使用 explain 查询SQL语句的执行计划"></a>1、使用 explain 查询SQL语句的执行计划</h3><blockquote><p>explain 要查询的SQL语句;</p><p>这里以视频给的数据库表为例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_item;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210308162534.png" alt="image-20210308162533553"></p><blockquote><p>说明</p></blockquote><table><thead><tr><th><strong>字段</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>id</td><td>select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。</td></tr><tr><td>select_type</td><td>表示  SELECT  的类型，常见的取值有  SIMPLE（简单表，即不使用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（子查询中的第一个   SELECT）等</td></tr><tr><td>table</td><td>输出结果集的表</td></tr><tr><td>type</td><td>表示表的连接类型，性能由好到差的连接类型为( system —&gt; const —–&gt; eq_ref ——&gt; ref——-&gt; ref_or_null—-&gt; index_merge —&gt; index_subquery —–&gt; range —–&gt; index ——&gt; all )</td></tr><tr><td>possible_keys</td><td>表示查询时，可能使用的索引</td></tr><tr><td>key</td><td>表示实际使用的索引</td></tr><tr><td>key_len</td><td>索引字段的长度</td></tr><tr><td>rows</td><td>扫描行的数量</td></tr><tr><td>extra</td><td>执行情况的说明和描述</td></tr></tbody></table><h3 id="2、环境准备"><a href="#2、环境准备" class="headerlink" title="2、环境准备"></a>2、环境准备</h3><blockquote><p>准备三张表，表与表之间的关系如下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210308162901.png" alt="image-20210308162901514"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;t_role&#96;</span><br><span class="line">(</span><br><span class="line">    &#96;id&#96;          varchar(32) NOT NULL,</span><br><span class="line">    &#96;role_name&#96;   varchar(255) DEFAULT NULL,</span><br><span class="line">    &#96;role_code&#96;   varchar(255) DEFAULT NULL,</span><br><span class="line">    &#96;description&#96; varchar(255) DEFAULT NULL,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">    UNIQUE KEY &#96;unique_role_name&#96; (&#96;role_name&#96;)</span><br><span class="line">) ENGINE &#x3D; InnoDB</span><br><span class="line">  DEFAULT CHARSET &#x3D; utf8;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;t_user&#96;</span><br><span class="line">(</span><br><span class="line">    &#96;id&#96;       varchar(32) NOT NULL,</span><br><span class="line">    &#96;username&#96; varchar(45) NOT NULL,</span><br><span class="line">    &#96;password&#96; varchar(96) NOT NULL,</span><br><span class="line">    &#96;name&#96;     varchar(45) NOT NULL,</span><br><span class="line"></span><br><span class="line">    PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">    UNIQUE KEY &#96;unique_user_username&#96; (&#96;username&#96;)</span><br><span class="line">) ENGINE &#x3D; InnoDB</span><br><span class="line">  DEFAULT CHARSET &#x3D; utf8;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;user_role&#96;</span><br><span class="line">(</span><br><span class="line">    &#96;id&#96;      int(11) NOT NULL auto_increment,</span><br><span class="line">    &#96;user_id&#96; varchar(32) DEFAULT NULL,</span><br><span class="line">    &#96;role_id&#96; varchar(32) DEFAULT NULL,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">    KEY &#96;fk_ur_user_id&#96; (&#96;user_id&#96;),</span><br><span class="line">    KEY &#96;fk_ur_role_id&#96; (&#96;role_id&#96;),</span><br><span class="line">    CONSTRAINT &#96;fk_ur_role_id&#96; FOREIGN KEY (&#96;role_id&#96;) REFERENCES &#96;t_role&#96; (&#96;id&#96;) ON DELETE NO ACTION ON UPDATE NO ACTION,</span><br><span class="line">    CONSTRAINT &#96;fk_ur_user_id&#96; FOREIGN KEY (&#96;user_id&#96;) REFERENCES &#96;t_user&#96; (&#96;id&#96;) ON DELETE NO ACTION ON UPDATE NO ACTION</span><br><span class="line">) ENGINE &#x3D; InnoDB</span><br><span class="line">  DEFAULT CHARSET &#x3D; utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into &#96;t_user&#96; (&#96;id&#96;, &#96;username&#96;, &#96;password&#96;, &#96;name&#96;)</span><br><span class="line">values (&#39;1&#39;, &#39;super&#39;, &#39;$2a$10$TJ4TmCdK.X4wv&#x2F;tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe&#39;, &#39;超级管理员&#39;);</span><br><span class="line">insert into &#96;t_user&#96; (&#96;id&#96;, &#96;username&#96;, &#96;password&#96;, &#96;name&#96;)</span><br><span class="line">values (&#39;2&#39;, &#39;admin&#39;, &#39;$2a$10$TJ4TmCdK.X4wv&#x2F;tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe&#39;, &#39;系统管理员&#39;);</span><br><span class="line">insert into &#96;t_user&#96; (&#96;id&#96;, &#96;username&#96;, &#96;password&#96;, &#96;name&#96;)</span><br><span class="line">values (&#39;3&#39;, &#39;itcast&#39;, &#39;$2a$10$8qmaHgUFUAmPR5pOuWhYWOr291WJYjHelUlYn07k5ELF8ZCrW0Cui&#39;, &#39;test02&#39;);</span><br><span class="line">insert into &#96;t_user&#96; (&#96;id&#96;, &#96;username&#96;, &#96;password&#96;, &#96;name&#96;)</span><br><span class="line">values (&#39;4&#39;, &#39;stu1&#39;, &#39;$2a$10$pLtt2KDAFpwTWLjNsmTEi.oU1yOZyIn9XkziK&#x2F;y&#x2F;spH5rftCpUMZa&#39;, &#39;学生1&#39;);</span><br><span class="line">insert into &#96;t_user&#96; (&#96;id&#96;, &#96;username&#96;, &#96;password&#96;, &#96;name&#96;)</span><br><span class="line">values (&#39;5&#39;, &#39;stu2&#39;, &#39;$2a$10$nxPKkYSez7uz2YQYUnwhR.z57km3yqKn3Hr&#x2F;p1FR6ZKgc18u.Tvqm&#39;, &#39;学生2&#39;);</span><br><span class="line">insert into &#96;t_user&#96; (&#96;id&#96;, &#96;username&#96;, &#96;password&#96;, &#96;name&#96;)</span><br><span class="line">values (&#39;6&#39;, &#39;t1&#39;, &#39;$2a$10$TJ4TmCdK.X4wv&#x2F;tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe&#39;, &#39;老师 1&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;t_role&#96; (&#96;id&#96;, &#96;role_name&#96;, &#96;role_code&#96;, &#96;description&#96;)</span><br><span class="line">VALUES (&#39;5&#39;, &#39;学生&#39;, &#39;student&#39;, &#39;学生&#39;);</span><br><span class="line">INSERT INTO &#96;t_role&#96; (&#96;id&#96;, &#96;role_name&#96;, &#96;role_code&#96;, &#96;description&#96;)</span><br><span class="line">VALUES (&#39;7&#39;, &#39;老师&#39;, &#39;teacher&#39;, &#39;老师&#39;);</span><br><span class="line">INSERT INTO &#96;t_role&#96; (&#96;id&#96;, &#96;role_name&#96;, &#96;role_code&#96;, &#96;description&#96;)</span><br><span class="line">VALUES (&#39;8&#39;, &#39;教学管理员&#39;, &#39;teachmanager&#39;, &#39;教学管理员&#39;);</span><br><span class="line">INSERT INTO &#96;t_role&#96; (&#96;id&#96;, &#96;role_name&#96;, &#96;role_code&#96;, &#96;description&#96;)</span><br><span class="line">VALUES (&#39;9&#39;, &#39;管理员&#39;, &#39;admin&#39;, &#39;管理员&#39;);</span><br><span class="line">INSERT INTO &#96;t_role&#96; (&#96;id&#96;, &#96;role_name&#96;, &#96;role_code&#96;, &#96;description&#96;)</span><br><span class="line">VALUES (&#39;10&#39;, &#39;超级管理员&#39;, &#39;super&#39;, &#39;超级管理员&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO user_role(id, user_id, role_id)</span><br><span class="line">VALUES (NULL, &#39;1&#39;, &#39;5&#39;),</span><br><span class="line">       (NULL, &#39;1&#39;, &#39;7&#39;),</span><br><span class="line">       (NULL, &#39;2&#39;, &#39;8&#39;),</span><br><span class="line">       (NULL, &#39;3&#39;, &#39;9&#39;),</span><br><span class="line">       (NULL, &#39;4&#39;, &#39;8&#39;),</span><br><span class="line">       (NULL, &#39;5&#39;, &#39;10&#39;);</span><br></pre></td></tr></table></figure><h3 id="3、explain-之-id"><a href="#3、explain-之-id" class="headerlink" title="3、explain 之 id"></a>3、explain 之 id</h3><blockquote><p>id  字段是  select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。</p><p>id  情况有三种：</p></blockquote><ul><li> id  相同表示加载表的顺序是从上到下</li></ul><blockquote><p>这里以一条多表查询语句为例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT *</span><br><span class="line">FROM t_user u</span><br><span class="line">JOIN user_role ur ON u.id &#x3D; ur.user_id</span><br><span class="line">JOIN t_role tr ON ur.role_id &#x3D; tr.id;</span><br></pre></td></tr></table></figure><blockquote><p>查看结果，可以看到 <code>ur</code> 表的加载顺序高于 <code>tr</code> 表和 <code>u</code> 表，第一列不是 <code>id</code> 。。。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210308165156.png" alt="image-20210308165155913"></p><ul><li>id  不同id值越大，优先级越高</li></ul><blockquote><p>越先被执行，这里以一条子查询语句为例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT *</span><br><span class="line">FROM t_role</span><br><span class="line">WHERE id &#x3D; (</span><br><span class="line">SELECT role_id</span><br><span class="line">FROM user_role</span><br><span class="line">WHERE user_id &#x3D; (</span><br><span class="line">SELECT id</span><br><span class="line">FROM t_user</span><br><span class="line">WHERE username &#x3D; &#39;stu1&#39;</span><br><span class="line">)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>执行语句查看结果，最内层的子查询的执行优先级最高。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210308170831.png" alt="image-20210308170831240"></p><ul><li>id 有相同，也有不同，同时存在。</li></ul><blockquote><p>id相同的可以认为是一组，从上往下顺序执行；在所有的组中，id的值越大，优先级越高，越先执行。</p><p>这里以一条带子查询和连接查询的sql为例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT *</span><br><span class="line">FROM t_role r, (</span><br><span class="line">SELECT *</span><br><span class="line">FROM user_role ur</span><br><span class="line">WHERE ur.&#96;user_id&#96; &#x3D; &#39;2&#39;</span><br><span class="line">) a</span><br><span class="line">WHERE r.id &#x3D; a.role_id;</span><br></pre></td></tr></table></figure><blockquote><p>查看结果，发现先执行子查询，后执行连接查询。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210308171713.png" alt="image-20210308171713304"></p><h3 id="4、explain-之-select-type"><a href="#4、explain-之-select-type" class="headerlink" title="4、explain 之 select_type"></a>4、explain 之 select_type</h3><blockquote><p>表示 SELECT 的类型，常见的取值如下表，从上到下效率越来越低。</p></blockquote><table><thead><tr><th><strong>select_type</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>SIMPLE</td><td>简单的select查询，查询中不包含子查询或者UNION</td></tr><tr><td>PRIMARY</td><td><strong>查询中若包含任何复杂的子查询，最外层查询标记为该标识</strong></td></tr><tr><td>SUBQUERY</td><td>在SELECT 或 WHERE 列表中包含了子查询</td></tr><tr><td>DERIVED</td><td>在FROM 列表中包含的子查询，被标记为 DERIVED（衍生） MYSQL会递归执行这些子查询，把结果放在临时表中</td></tr><tr><td>UNION</td><td>若第二个SELECT出现在UNION之后，则标记为UNION ； 若UNION包含在FROM子句的子查询中，外层SELECT将被标记为  ：  DERIVED</td></tr><tr><td>UNION RESULT</td><td>从UNION表获取结果的SELECT</td></tr></tbody></table><h3 id="5、explain-之-table"><a href="#5、explain-之-table" class="headerlink" title="5、explain 之 table"></a>5、explain 之 table</h3><blockquote><p>展示这一行的数据是关于哪一张表的</p></blockquote><h3 id="6、explain-之-type"><a href="#6、explain-之-type" class="headerlink" title="6、explain 之 type"></a>6、explain 之 type</h3><blockquote><p>type  显示的是访问类型，是较为重要的一个指标，可取值为：</p></blockquote><table><thead><tr><th><strong>type</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>NULL</td><td>MySQL不访问任何表，索引，直接返回结果</td></tr><tr><td>system</td><td>表只有一行记录(等于系统表)，这是<code>const</code>类型的特例，一般不会出现</td></tr><tr><td><code>const</code></td><td>表示通过索引一次就找到了，<code>const</code>用于比较primary key 或者 unique 索引。因为只匹配一行数据，所以很快。如将主键置于where列表中，MySQL 就能将该查询转换为一个常亮。<code>const</code>于将”主键” 或 “唯一” 索引的所有部分与常量值进行比较</td></tr><tr><td><code>eq_ref</code></td><td>类似ref，区别在于使用的是唯一索引，使用主键的关联查询，关联查询出的记录只有一条。常见于主键或唯一索引扫描</td></tr><tr><td>ref</td><td>非唯一性索引扫描，返回匹配某个单独值的所有行。本质上也是一种索引访问，返回所有匹配某个单独值的所有行（多个）</td></tr><tr><td>range</td><td>只检索给定返回的行，使用一个索引来选择行。 where 之后出现 between ， &lt; , &gt; , in 等操作。</td></tr><tr><td>index</td><td>index 与 ALL的区别为 index 类型只是遍历了索引树， 通常比ALL 快， ALL 是遍历数据文件。</td></tr><tr><td>all</td><td>将遍历全表以找到匹配的行</td></tr></tbody></table><ul><li>type 为 <code>null</code> 的情况，例如使用 <code>select now() </code>访问当前时间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select now();</span><br></pre></td></tr></table></figure><blockquote><p>查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210308191128.png" alt="image-20210308191121013"></p><ul><li>type 为 <code>system</code> 的情况，数据源中只有一条数据时出现</li><li>type 为 <code>const</code> 的情况，使用 <code>t_user</code> 表中的 <strong>主键索引</strong> 和 <strong>唯一索引</strong> 查看</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t_user where username &#x3D; &#39;super&#39;;</span><br><span class="line">explain select * from t_user where id &#x3D; &#39;1&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210308192134.png" alt="image-20210308192134670"></p><ul><li><p>type为 <code> eq_ref</code> 的情况，使用主键的关联查询，关联查询出的记录只有一条；</p></li><li><p>type为 <code>index</code> 的情况，查询整个索引树，效率通常不高</p></li><li><p>type为 <code>all</code> 的情况，遍历整个数据文件。</p></li></ul><blockquote><p>一般来说，我们需要保证查询至少达到 <code>range</code> 级别，最好达到 <code>ref</code>。</p></blockquote><h3 id="7、explain-之-key"><a href="#7、explain-之-key" class="headerlink" title="7、explain 之 key"></a>7、explain 之 key</h3><ul><li>possible_keys : 显示可能应用在这张表的索引， 一个或多个。</li><li>key ：  实际使用的索引，  如果为NULL， 则没有使用索引。</li><li>key_len : 表示索引中使用的字节数，  该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下， 长度越短越好 。</li><li>possible_keys : 显示可能应用在这张表的索引， 一个或多个。</li><li>key ：  实际使用的索引，  如果为NULL， 则没有使用索引。</li></ul><h3 id="8、explain-之-rows"><a href="#8、explain-之-rows" class="headerlink" title="8、explain 之 rows"></a>8、explain 之 rows</h3><blockquote><p>扫描行的数量。</p></blockquote><h3 id="9、explain-之-extra"><a href="#9、explain-之-extra" class="headerlink" title="9、explain 之 extra"></a>9、explain 之 extra</h3><blockquote><p>其他的额外的执行计划信息，在该列展示  。</p><p>优化前两个，保持第三个。</p></blockquote><table><thead><tr><th>extra</th><th>含义</th></tr></thead><tbody><tr><td><code>using ﬁlesort</code></td><td>说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取，   称为“文件排序”, 效率低。</td></tr><tr><td>using temporary</td><td>使用了临时表保存中间结果，MySQL在对查询结果排序时使用临时表。常见于  order  by  和group by； 效率低</td></tr><tr><td>using index</td><td>表示相应的select操作使用了覆盖索引，  避免访问表的数据行，  效率不错。索引是高效找到行的一个方法，但是一般数据库也能使用索引找到一个列的数据，因此它不必读取整个行。毕竟索引叶子节点存储了它们索引的数据;当能通过读取索引就可以得到想要的数据，那就不需要读取行了。</td></tr><tr><td>Using where</td><td>表明使用了where过滤</td></tr><tr><td>using join buffer</td><td>使用了连接缓存：</td></tr><tr><td>impossible where</td><td>where子句的值总是false，不能用来获取任何元组</td></tr></tbody></table><h3 id="10、explain之case"><a href="#10、explain之case" class="headerlink" title="10、explain之case"></a>10、explain之case</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210312224222.png" alt="image-20210312224221780"></p><blockquote><p>执行顺序：4-3-2-1-NULL</p></blockquote><ul><li>执行顺序4</li></ul><h2 id="3-4、show-profile分析SQL"><a href="#3-4、show-profile分析SQL" class="headerlink" title="3.4、show profile分析SQL"></a>3.4、show profile分析SQL</h2><blockquote><p>Mysql从5.0.37版本开始增加了对 show proﬁles 和 show proﬁle 语句的支持。show proﬁles 能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。</p></blockquote><h3 id="1、查看当前MySQL是否支持profile"><a href="#1、查看当前MySQL是否支持profile" class="headerlink" title="1、查看当前MySQL是否支持profile"></a>1、查看当前MySQL是否支持profile</h3><blockquote><p>通过  have_proﬁling  参数，能够看到当前MySQL是否支持proﬁle：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@have_profiling;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210308195521.png" alt="image-20210308195521096"></p><blockquote><p>默认proﬁling是关闭的，可以通过set语句在Session级别开启proﬁling：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set profiling &#x3D; 1;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210308200027.png" alt="image-20210308200027227"></p><blockquote><p>此时查看 <code>profiling</code> 的值。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@profiling;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210308200142.png" alt="image-20210308200142645"></p><h3 id="2、使用-show-profiles-指令查看sql语句和耗时"><a href="#2、使用-show-profiles-指令查看sql语句和耗时" class="headerlink" title="2、使用 show profiles 指令查看sql语句和耗时"></a>2、使用 show profiles 指令查看sql语句和耗时</h3><blockquote><p>其中 <code>Query</code> 为执行的SQL语句，而 <code>Duration</code> 为该SQL执行耗费的时间。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210308201914.png" alt="image-20210308201913192"></p><blockquote><p>在上面查询出来的结果之上，可以通过 <code>show profile for query id值</code> 指令来查看某条sql语句的详细信息，例如查看<code>id</code>为5的查询语句的详细信息。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show profile for query 5;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210308202515.png" alt="image-20210308202515442"></p><blockquote><p>发现 <code>Sending data</code> 阶段花费了最多时间；</p><p>Sending data 状态表示<strong>MySQL线程开始访问数据行并把结果返回给客户端</strong>，而不仅仅是返回个客户端。</p><p><strong>由于在Sending data状态下，MySQL线程往往需要做大量的磁盘读取操作，所以经常是整个查询中耗时最长的状态。</strong></p></blockquote><h2 id="3-5、trace分析优化器执行计划"><a href="#3-5、trace分析优化器执行计划" class="headerlink" title="3.5、trace分析优化器执行计划"></a>3.5、trace分析优化器执行计划</h2><blockquote><p>MySQL5.6提供了对SQL的跟踪trace,  通过trace文件能够进一步了解为什么优化器选择A计划,  而不是选择B计划。</p></blockquote><h3 id="1、打开trace-并设置格式和内存大小"><a href="#1、打开trace-并设置格式和内存大小" class="headerlink" title="1、打开trace 并设置格式和内存大小"></a>1、打开trace 并设置格式和内存大小</h3><blockquote><p>打开trace ， 设置格式为 JSON，并设置trace最大能够使用的内存大小，避免解析过程中因为默认内存过小而不能够完整展示。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET  optimizer_trace&#x3D;&quot;enabled&#x3D;on&quot;,end_markers_in_json&#x3D;on;</span><br><span class="line">set  optimizer_trace_max_mem_size&#x3D;1000000;</span><br></pre></td></tr></table></figure><h3 id="2、执行SQL语句"><a href="#2、执行SQL语句" class="headerlink" title="2、执行SQL语句"></a>2、执行SQL语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from  where id &lt; 4;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309143138.png" alt="image-20210309143137932"></p><h3 id="3、查看Mysql如何执行上述的SQL语句"><a href="#3、查看Mysql如何执行上述的SQL语句" class="headerlink" title="3、查看Mysql如何执行上述的SQL语句"></a>3、查看Mysql如何执行上述的SQL语句</h3><blockquote><p>检查 <code>infomation_schema</code>.<code>optimizer_trace</code> 就可以知道<strong>MySQL</strong>是如何执行SQL的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from  information_schema.optimizer_trace\G;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309143751.png" alt="image-20210309143751852"></p><h1 id="四、索引的使用"><a href="#四、索引的使用" class="headerlink" title="四、索引的使用"></a>四、索引的使用</h1><blockquote><p><strong>索引是数据库优化最常用也是最重要的手段之一</strong>，通过索引通常可以帮助用户<strong>解决大多数的MySQL的性能优化问题。</strong></p></blockquote><h2 id="4-1、验证索引提升查询效率"><a href="#4-1、验证索引提升查询效率" class="headerlink" title="4.1、验证索引提升查询效率"></a>4.1、验证索引提升查询效率</h2><blockquote><p>在我们准备的表结构tb_item 中， 一共存储了 300 万记录；</p></blockquote><h3 id="1、根据ID查询"><a href="#1、根据ID查询" class="headerlink" title="1、根据ID查询"></a>1、根据ID查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tb_item where id &#x3D; 1999\G;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309160155.png" alt="image-20210309160155777"></p><blockquote><p>查询速度很快， 接近0s ， <strong>主要的原因是因为id为主键</strong>， 有索引；</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309160229.png" alt="image-20210309160229150"></p><h3 id="2、根据title进行精确查询"><a href="#2、根据title进行精确查询" class="headerlink" title="2、根据title进行精确查询"></a>2、根据title进行精确查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tb_item where title &#x3D; &#39;iphoneX 移动3G 32G941&#39;\G;</span><br></pre></td></tr></table></figure><blockquote><p>执行sql语句，发现返回时间长达9s</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309161840.png" alt="image-20210309161840351"></p><blockquote><p>使用 <code>explain</code> 查看SQL语句的执行计划 ：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309161912.png" alt="image-20210309161912903"></p><h3 id="3、优化查询，为title添加索引"><a href="#3、优化查询，为title添加索引" class="headerlink" title="3、优化查询，为title添加索引"></a>3、优化查询，为title添加索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create index idx_item_title on tb_item(title);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>创建索引可能会花费一些时间，这是因为MySQL底层正在为3000000条数据创建索引。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309162151.png" alt="image-20210309162151125"></p><blockquote><p>索引创建完成之后，再次进行查询</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309162222.png" alt="image-20210309162222355"></p><blockquote><p>再次通过explain查看SQL语句的执行计划，发现执行SQL时使用了刚才创建的索引</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309162714.png" alt="image-20210309162714413"></p><h2 id="4-2、索引的使用"><a href="#4-2、索引的使用" class="headerlink" title="4.2、索引的使用"></a>4.2、索引的使用</h2><h3 id="1、准备环境"><a href="#1、准备环境" class="headerlink" title="1、准备环境"></a>1、准备环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">use index_study;</span><br><span class="line">create table &#96;tb_seller&#96;</span><br><span class="line">(</span><br><span class="line">    &#96;sellerid&#96;   varchar(100),</span><br><span class="line">    &#96;name&#96;       varchar(100),</span><br><span class="line">    &#96;nickname&#96;   varchar(50),</span><br><span class="line">    &#96;password&#96;   varchar(60),</span><br><span class="line">    &#96;status&#96;     varchar(1),</span><br><span class="line">    &#96;address&#96;    varchar(100),</span><br><span class="line">    &#96;createtime&#96; datetime,</span><br><span class="line">    primary key (&#96;sellerid&#96;)</span><br><span class="line">) engine &#x3D; innodb</span><br><span class="line">  default charset &#x3D; utf8mb4;</span><br><span class="line"></span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;)</span><br><span class="line">values (&#39;alibaba&#39;, &#39;阿里巴巴&#39;, &#39;阿里小 店&#39;, &#39;e10adc3949ba59abbe56e057f20f883e&#39;, &#39;1&#39;, &#39;北京市&#39;, &#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;)</span><br><span class="line">values (&#39;baidu&#39;, &#39;百度科技有限公司&#39;, &#39;百度小 店&#39;, &#39;e10adc3949ba59abbe56e057f20f883e&#39;, &#39;1&#39;, &#39;北京市&#39;, &#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;)</span><br><span class="line">values (&#39;huawei&#39;, &#39;华为科技有限公司&#39;, &#39;华为小 店&#39;, &#39;e10adc3949ba59abbe56e057f20f883e&#39;, &#39;0&#39;, &#39;北京市&#39;, &#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;)</span><br><span class="line">values (&#39;itcast&#39;, &#39;传智播客教育科技有限公司&#39;, &#39;传智播 客&#39;, &#39;e10adc3949ba59abbe56e057f20f883e&#39;, &#39;1&#39;, &#39;北京市&#39;, &#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;)</span><br><span class="line">values (&#39;itheima&#39;, &#39;黑马程序员&#39;, &#39;黑马程序 员&#39;, &#39;e10adc3949ba59abbe56e057f20f883e&#39;, &#39;0&#39;, &#39;北京市&#39;, &#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;)</span><br><span class="line">values (&#39;luoji&#39;, &#39;罗技科技有限公司&#39;, &#39;罗技小 店&#39;, &#39;e10adc3949ba59abbe56e057f20f883e&#39;, &#39;1&#39;, &#39;北京市&#39;, &#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;)</span><br><span class="line">values (&#39;oppo&#39;, &#39;OPPO科技有限公司&#39;, &#39;OPPO官方旗舰 店&#39;, &#39;e10adc3949ba59abbe56e057f20f883e&#39;, &#39;0&#39;, &#39;北京市&#39;, &#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;)</span><br><span class="line">values (&#39;ourpalm&#39;, &#39;掌趣科技股份有限公司&#39;, &#39;掌趣小 店&#39;, &#39;e10adc3949ba59abbe56e057f20f883e&#39;, &#39;1&#39;, &#39;北京市&#39;, &#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;)</span><br><span class="line">values (&#39;qiandu&#39;, &#39;千度科技&#39;, &#39;千度小 店&#39;, &#39;e10adc3949ba59abbe56e057f20f883e&#39;, &#39;2&#39;, &#39;北京市&#39;, &#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;)</span><br><span class="line">values (&#39;sina&#39;, &#39;新浪科技有限公司&#39;, &#39;新浪官方旗舰 店&#39;, &#39;e10adc3949ba59abbe56e057f20f883e&#39;, &#39;1&#39;, &#39;北京市&#39;, &#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;)</span><br><span class="line">values (&#39;xiaomi&#39;, &#39;小米科技&#39;, &#39;小米官方旗舰 店&#39;, &#39;e10adc3949ba59abbe56e057f20f883e&#39;, &#39;1&#39;, &#39;西安市&#39;, &#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;)</span><br><span class="line">values (&#39;yijia&#39;, &#39;宜家家居&#39;, &#39;宜家家居旗舰 店&#39;, &#39;e10adc3949ba59abbe56e057f20f883e&#39;, &#39;1&#39;, &#39;北京市&#39;, &#39;2088-01-01 12:00:00&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create index idx_seller_name_sta_addr on tb_seller (name, status, address);</span><br></pre></td></tr></table></figure><h3 id="2、避免索引失效–全值匹配"><a href="#2、避免索引失效–全值匹配" class="headerlink" title="2、避免索引失效–全值匹配"></a>2、避免索引失效–全值匹配</h3><blockquote><p>全值匹配，<strong>对索引中的所有列都指定具体值。</strong></p><p>该情况下，索引生效，执行效率高。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain selectfrom tb_seller where name&#x3D;&#39;小米科技&#39; and status&#x3D;&#39;1&#39; and address&#x3D;&#39;北京市&#39;\G;</span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>explain</code> 查看上述SQL的执行计划：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309164955.png" alt="image-20210309164955128"></p><h3 id="3、避免索引失效–最左前缀法则"><a href="#3、避免索引失效–最左前缀法则" class="headerlink" title="3、避免索引失效–最左前缀法则"></a>3、避免索引失效–最左前缀法则</h3><blockquote><p>如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始，并且不跳过中间的列，</p><p>如果跳过中间列，那么只会使用最左列的索引。</p><p>上述的索引加在了(name, status, address)中，那么查询就必须从 <code>name</code> 开始且不能跳过 <code>status</code> 直接跳到<code>address</code></p></blockquote><ul><li>匹配最左前缀法则，走索引：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain  select * from tb_seller where name&#x3D;&#39;小米科技&#39; and status&#x3D;&#39;1&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309165331.png" alt="image-20210309165331229"></p><ul><li>违背最左前缀法则，索引失效</li></ul><blockquote><p>跳过name直接查询status/address，索引失效</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller where status &#x3D; &#39;1&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309165918.png" alt="image-20210309165918715"></p><blockquote><p>跳过索引列中间的status直接到address，此时只有最左边的索引列（name）生效</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller where name &#x3D; &#39;小米科技&#39; and address &#x3D; &#39;西安市&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309170240.png" alt="image-20210309170240416"></p><blockquote><p>不使用索引的最左列进行查询，索引失效</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller where status &#x3D; &#39;1&#39; and address &#x3D; &#39;西安市&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309170735.png" alt="image-20210309170735922"></p><blockquote><p>索引失效与否与 <code>where</code> 子句的组装顺序无关。</p></blockquote><h3 id="3、避免索引失效–范围查询右边的列，不能使用索引"><a href="#3、避免索引失效–范围查询右边的列，不能使用索引" class="headerlink" title="3、避免索引失效–范围查询右边的列，不能使用索引"></a>3、避免索引失效–范围查询右边的列，不能使用索引</h3><blockquote><p>范围查询右边的列将不走索引，例如<code>status</code>使用了范围查询，那么只走 <code>name</code> 和 <code>status</code> 的索引，不走 <code>address</code> 的索引。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller where name &#x3D; &#39;小米科技&#39; and status &gt; &#39;1&#39; and address &#x3D; &#39;西安市&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309173327.png" alt="image-20210309173327169"></p><h3 id="4、避免索引失效–不要在索引列上进行运算操作"><a href="#4、避免索引失效–不要在索引列上进行运算操作" class="headerlink" title="4、避免索引失效–不要在索引列上进行运算操作"></a>4、避免索引失效–不要在索引列上进行运算操作</h3><blockquote><p>如果在索引列上进行运算操作，那么索引将失效</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller where substring(name,3,2) &#x3D; &#39;科技&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309173718.png" alt="image-20210309173718913"></p><blockquote><p>在status列上进行运算</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller where name &#x3D; &#39;小米科技&#39; and status + 1 &#x3D; &#39;2&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309173901.png" alt="image-20210309173901729"></p><h3 id="5、避免索引失效–字符串必须加单引号"><a href="#5、避免索引失效–字符串必须加单引号" class="headerlink" title="5、避免索引失效–字符串必须加单引号"></a>5、避免索引失效–字符串必须加单引号</h3><blockquote><p>字符串不加单引号，造成索引失效。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller where name &#x3D; &#39;小米科技&#39; and status &#x3D; &#39;1&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309174606.png" alt="image-20210309174606023"></p><blockquote><p>演示不加单引号的情况</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller where name &#x3D; &#39;小米科技&#39; and status &#x3D; 1;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309174724.png" alt="image-20210309174724689"></p><blockquote><p>由于，在查询时没有对字符串加单引号，MySQL的查询优化器会自动的进行类型转换，造成索引失效。</p></blockquote><h3 id="6、尽量使用覆盖索引，避免select"><a href="#6、尽量使用覆盖索引，避免select" class="headerlink" title="6、尽量使用覆盖索引，避免select *"></a>6、尽量使用覆盖索引，避免select *</h3><blockquote><p>尽量使用覆盖索引（只访问索引的查询（索引列完全包含查询列）），减少select  *  </p><p>如果查询列，超出索引列，也会降低性能。（例如多查询了一个password会导致性能下降）</p><p>TIPS:</p></blockquote><ul><li>using index ：使用覆盖索引的时候就会出现</li><li>using  where：在查找使用索引的情况下，需要回表去查询所需的数据</li><li>using index condition：查找使用了索引，但是需要回表查询数据</li><li>using index ; using where：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据</li></ul><h3 id="7、or分隔的条件"><a href="#7、or分隔的条件" class="headerlink" title="7、or分隔的条件"></a>7、or分隔的条件</h3><blockquote><p>or分割开的条件， 如果<strong>or前的条件中的列有索引</strong>，而<strong>后面的列中没有索引</strong>，那么<strong>涉及的索引都不会被用到</strong>。</p><p>示例，name字段是索引列 ， 而<code>createtime</code>不是索引列，中间是or进行连接是不走索引的 ：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain selectfrom tb_seller where name&#x3D;&#39;黑马程序员&#39; or createtime &#x3D; &#39;2088-01-01 12:00:00&#39;\G;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309192548.png" alt="image-20210309192547979"></p><h3 id="8、以-开头的Like模糊查询，索引失效。"><a href="#8、以-开头的Like模糊查询，索引失效。" class="headerlink" title="8、以%开头的Like模糊查询，索引失效。"></a>8、以%开头的Like模糊查询，索引失效。</h3><blockquote><p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller where name like &#39;%黑马&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309192904.png" alt="image-20210309192904852"></p><blockquote><p>但右%不会导致索引失效</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller where name like &#39;黑马%&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309193636.png" alt="image-20210309193636267"></p><ul><li>解决方法</li></ul><blockquote><p>通过覆盖索引（尽量不要使用select * ，使用索引中的那些列）来解决</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select name,status,address from tb_seller where name like &#39;%黑马%&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309194114.png" alt="image-20210309194114849"></p><blockquote><p>如果查询的列中有不含索引的属性，那么索引将失效。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309194214.png" alt="image-20210309194214600"></p><h3 id="9、如果MySQL评估使用索引比全表更慢，则不使用索引。"><a href="#9、如果MySQL评估使用索引比全表更慢，则不使用索引。" class="headerlink" title="9、如果MySQL评估使用索引比全表更慢，则不使用索引。"></a>9、如果MySQL评估使用索引比全表更慢，则不使用索引。</h3><blockquote><p>为 <code>address</code> 创建一个单列索引</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index &#96;idx_address&#96; on tb_seller(address);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309195218.png" alt="image-20210309195217953"></p><blockquote><p>执行以下的 sql 语句</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller where address &#x3D; &#39;北京市&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309195502.png" alt="image-20210309195502240"></p><blockquote><p>将上述的条件修改为 <code>西安市</code>，再次执行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller where address &#x3D; &#39;西安市&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309200903.png" alt="image-20210309200903109"></p><ul><li>为什么？</li></ul><blockquote><p>因为在tb_seller表中 <code>address</code> 为 北京市 的数据占比非常大，使用索引不如进行全表扫描。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309201819.png" alt="image-20210309201819199"></p><h3 id="10、is-NULL、is-NOT-NULL-有时索引失效。"><a href="#10、is-NULL、is-NOT-NULL-有时索引失效。" class="headerlink" title="10、is NULL、is NOT NULL 有时索引失效。"></a>10、is NULL、is NOT NULL <code>有时</code>索引失效。</h3><blockquote><p>由于上面我们为 <code>address</code> 添加了单列索引，所以我们以 <code>address</code> 为例。</p></blockquote><ul><li>IS NULL</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller where address is null;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309202349.png" alt="image-20210309202349694"></p><blockquote><p>发现此时走了索引。</p></blockquote><ul><li>IS NOT NULL</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller where address is not null;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309202621.png" alt="image-20210309202621190"></p><blockquote><p>发现此时不走索引。</p></blockquote><ul><li>原因</li></ul><blockquote><p>这是因为在 tb_seller 表中绝大部分数据的 <code>address</code> 属性都不为空，那么当使用 <strong>IS NOT NULL</strong> 的时候，由于非空的数据太多，还不如直接扫描全表。</p><p>而使用 <strong>is null</strong> 时，由于为空的数据不多，所以使用索引速度快。</p></blockquote><h3 id="11、In、not-In-有时-不使用索引"><a href="#11、In、not-In-有时-不使用索引" class="headerlink" title="11、In、not In 有时 不使用索引"></a>11、In、not In <code>有时</code> 不使用索引</h3><blockquote><p>使用<code>in</code>进行测试</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller where sellerid in (&#39;oppo&#39;,&#39;xiaomi&#39;,&#39;sina&#39;);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309212907.png" alt="image-20210309212906507"></p><blockquote><p>使用 <code>not in</code> 进行测试，发现使用索引。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller where sellerid not in (&#39;oppo&#39;,&#39;xiaomi&#39;,&#39;sina&#39;);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309213506.png" alt="image-20210309213506912"></p><p><strong>In、not in 使不使用索引不是一刀切的。</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309214046.png" alt="image-20210309214046113"></p><h3 id="12、单列索引和复合索引"><a href="#12、单列索引和复合索引" class="headerlink" title="12、单列索引和复合索引"></a>12、单列索引和复合索引</h3><blockquote><p>尽量使用复合索引，而少使用单列索引。</p><p>创建复合索引：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index idx_name_sta_address on tb_seller(name, status, address);</span><br></pre></td></tr></table></figure><blockquote><p>相当于创建了三个索引：</p><p>name<br>name + status<br>name + status + address</p></blockquote><ul><li>创建单列索引，在我们使用多个带索引的字段进行搜索时，不会使用全部索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create index idx_seller_name on tb_seller(name);</span><br><span class="line">create index idx_seller_status on tb_seller(status);</span><br><span class="line">create index idx_seller_address on tb_seller(address);</span><br></pre></td></tr></table></figure><blockquote><p>数据库会选择一个最优索引来使用。</p></blockquote><ul><li>演示单列索引和复合索引的区别</li></ul><blockquote><p>删除上面为 <code>address</code> 创建的单列索引</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index &#96;idx_address&#96; on tb_seller;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309215039.png" alt="image-20210309215039873"></p><blockquote><p>此时使用复合索引进行数据查找</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller where name &#x3D; &#39;小米科技&#39; and status &#x3D; &#39;1&#39; and address &#x3D; &#39;西安市&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309215250.png" alt="image-20210309215250200"></p><blockquote><p>删除表中的复合索引</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index idx_seller_name_sta_addr on tb_seller;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309215443.png" alt="image-20210309215443870"></p><blockquote><p>创建三个单列索引</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create index idx_seller_name on tb_seller(name);</span><br><span class="line">create index idx_seller_status on tb_seller(status);</span><br><span class="line">create index idx_seller_address on tb_seller(address);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309215558.png" alt="image-20210309215558021"></p><blockquote><p>再次执行上面的查询语句</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller where name &#x3D; &#39;小米科技&#39; and status &#x3D; &#39;1&#39; and address &#x3D; &#39;西安市&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309215727.png" alt="image-20210309215727053"></p><blockquote><p>由于<code>name</code>列中的数据辨识度最高。</p></blockquote><h2 id="4-3、查看索引使用情况"><a href="#4-3、查看索引使用情况" class="headerlink" title="4.3、查看索引使用情况"></a>4.3、查看索引使用情况</h2><h3 id="1、查看当前连接（会话）的索引情况"><a href="#1、查看当前连接（会话）的索引情况" class="headerlink" title="1、查看当前连接（会话）的索引情况"></a>1、查看当前连接（会话）的索引情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show status like &#39;Handler_read%&#39;; </span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309221124.png" alt="image-20210309221124262"></p><h3 id="2、查看全局索引使用情况"><a href="#2、查看全局索引使用情况" class="headerlink" title="2、查看全局索引使用情况"></a>2、查看全局索引使用情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global status like &#39;Handler_read%&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309221157.png" alt="image-20210309221157356"></p><h3 id="3、属性说明"><a href="#3、属性说明" class="headerlink" title="3、属性说明"></a>3、属性说明</h3><ul><li><p>Handler_read_first：索引中第一条被读的次数。如果较高，表示服务器正执行大量全索引扫描（这个值越低<br>越好）。</p></li><li><p>Handler_read_key：如果索引正在工作，这个值代表一个行被索引值读的次数，如果值越低，表示索引得到的<br>性能改善不高，因为索引不经常使用（这个值越高越好）。</p></li><li><p>Handler_read_next   ：按照键顺序读下一行的请求数。如果你用范围约束或如果执行索引扫描来查询索引列，<br>该值增加。</p></li><li><p>Handler_read_prev：按照键顺序读前一行的请求数。该读方法主要用于优化ORDER BY … DESC。</p></li><li><p>Handler_read_rnd   ：根据固定位置读一行的请求数。如果你正执行大量查询并需要对结果进行排序该值较高。你可能使用了大量需要MySQL扫描整个表的查询或你的连接没有正确使用键。这个值较高，意味着运行效率低，应<br>该建立索引来补救。</p></li><li><p>Handler_read_rnd_next：在数据文件中读下一行的请求数。如果你正进行大量的表扫描，该值较高。通常说明你的表索引不正确或写入的查询没有利用索引。</p></li></ul><h2 id="4-4、综合案例"><a href="#4-4、综合案例" class="headerlink" title="4.4、综合案例"></a>4.4、综合案例</h2><h3 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">create table test03</span><br><span class="line">(</span><br><span class="line">    id int primary key not null auto_increment,</span><br><span class="line">    c1 char(10),</span><br><span class="line">    c2 char(10),</span><br><span class="line">    c3 char(10),</span><br><span class="line">    c4 char(10),</span><br><span class="line">    c5 char(10)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into test03(c1, c2, c3, c4, c5)</span><br><span class="line">values (&#39;a1&#39;, &#39;a2&#39;, &#39;a3&#39;, &#39;a4&#39;, &#39;a5&#39;);</span><br><span class="line">insert into test03(c1, c2, c3, c4, c5)</span><br><span class="line">values (&#39;b1&#39;, &#39;b2&#39;, &#39;b3&#39;, &#39;b4&#39;, &#39;b5&#39;);</span><br><span class="line">insert into test03(c1, c2, c3, c4, c5)</span><br><span class="line">values (&#39;c1&#39;, &#39;c2&#39;, &#39;c3&#39;, &#39;c4&#39;, &#39;c5&#39;);</span><br><span class="line">insert into test03(c1, c2, c3, c4, c5)</span><br><span class="line">values (&#39;d1&#39;, &#39;d2&#39;, &#39;d3&#39;, &#39;d4&#39;, &#39;d5&#39;);</span><br><span class="line">insert into test03(c1, c2, c3, c4, c5)</span><br><span class="line">values (&#39;e1&#39;, &#39;e2&#39;, &#39;e3&#39;, &#39;e4&#39;, &#39;e5&#39;);</span><br><span class="line"></span><br><span class="line">create index idx_test03_c1234 on test03(c1,c2,c3,c4);</span><br></pre></td></tr></table></figure><h3 id="2、案例1"><a href="#2、案例1" class="headerlink" title="2、案例1"></a>2、案例1</h3><blockquote><p>分析以下案例的索引使用情况</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from test03 where c1&#x3D;&#39;a1&#39; and c2&#x3D;&#39;a2&#39; and c4&#x3D;&#39;a4&#39; and c3&#x3D;&#39;a3&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313152742.png" alt="image-20210313152742780"></p><blockquote><p><strong>优化器会自动优化顺序</strong></p></blockquote><h3 id="3、案例2"><a href="#3、案例2" class="headerlink" title="3、案例2"></a>3、案例2</h3><blockquote><p>分析以下案例的索引使用情况</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from test03 where c1&#x3D;&#39;a1&#39; and c2&#x3D;&#39;a2&#39; and c4&gt;&#39;a4&#39; and c3&#x3D;&#39;a3&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>这里仍然用到了4个索引，因为MySQL优化器会优化顺序，将其变为a1,a2,a3,a4，虽然范围比较后的列不使用索引，但范围索引的列是使用索引的，所以使用了4个索引。</p><p>可以看到，此处的<code>key_len</code>与上面一致，都是164，所以使用了4个索引</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313153801.png" alt="image-20210313153801605"></p><h3 id="4、案例3"><a href="#4、案例3" class="headerlink" title="4、案例3"></a>4、案例3</h3><blockquote><p>分析以下案例的索引使用情况</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from test03 where c1&#x3D;&#39;a1&#39; and c2&#x3D;&#39;a2&#39; and c4&#x3D;&#39;a4&#39; order by c3;</span><br></pre></td></tr></table></figure><blockquote><p><strong>这里其实也使用了c3这个索引，只不过c3作用在排序而不是查找，所以没有统计进key中。</strong></p><p>没有使用C4索引</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313154442.png" alt="image-20210313154442619"></p><h3 id="5、案例4"><a href="#5、案例4" class="headerlink" title="5、案例4"></a>5、案例4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from test03 where c1&#x3D;&#39;a1&#39; and c2&#x3D;&#39;a2&#39; order by c4;</span><br></pre></td></tr></table></figure><blockquote><p>使用了索引，但出现了 <code>filesort</code>，因为此时没有c3，c4索引无法使用了。</p></blockquote><h3 id="6、案例5"><a href="#6、案例5" class="headerlink" title="6、案例5"></a>6、案例5</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from test03 where c1&#x3D;&#39;a1&#39; and c4 &#x3D; &#39;a4&#39; order by c3,c2;</span><br></pre></td></tr></table></figure><blockquote><p>这里使用了c1索引，但由于c3，c2顺序没有按建索引时的顺序排序，所以c3，c2所以失效，出现了 <code>filesort</code></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313155329.png" alt="image-20210313155329368"></p><h3 id="7、案例6"><a href="#7、案例6" class="headerlink" title="7、案例6"></a>7、案例6</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from test03 where c1=<span class="string">&#x27;a1&#x27;</span> and c2 = <span class="string">&#x27;a2&#x27;</span> and c5 = <span class="string">&#x27;a5&#x27;</span> order by c3,c2;</span><br></pre></td></tr></table></figure><blockquote><p>这里使用了c1，c2索引进行排序，由于c2已经有值了（已经是一个常量了），所以此时c3依然生效，此时c3索引用于排序</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313155621.png" alt="image-20210313155621217"></p><h1 id="五、SQL优化（二）"><a href="#五、SQL优化（二）" class="headerlink" title="五、SQL优化（二）"></a>五、SQL优化（二）</h1><h2 id="5-1、大批量插入数据"><a href="#5-1、大批量插入数据" class="headerlink" title="5.1、大批量插入数据"></a>5.1、大批量插入数据</h2><h3 id="1、环境准备-1"><a href="#1、环境准备-1" class="headerlink" title="1、环境准备"></a>1、环境准备</h3><blockquote><p>创建两张表，两张表结构相同，名字不同；</p><p><code>tb_user_1</code>和<code>tb_user_2</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;tb_user_2&#96;</span><br><span class="line">(</span><br><span class="line">    &#96;id&#96;          int(11)     NOT NULL AUTO_INCREMENT,</span><br><span class="line">    &#96;username&#96;    varchar(45) NOT NULL,</span><br><span class="line">    &#96;password&#96;    varchar(96) NOT NULL,</span><br><span class="line">    &#96;name&#96;        varchar(45) NOT NULL,</span><br><span class="line">    &#96;birthday&#96;    datetime    DEFAULT NULL,</span><br><span class="line">    &#96;sex&#96;         char(1)     DEFAULT NULL,</span><br><span class="line">    &#96;email&#96;       varchar(45) DEFAULT NULL,</span><br><span class="line">    &#96;phone&#96;       varchar(45) DEFAULT NULL,</span><br><span class="line">    &#96;qq&#96;          varchar(32) DEFAULT NULL,</span><br><span class="line">    &#96;status&#96;      varchar(32) NOT NULL COMMENT &#39;用户状态&#39;,</span><br><span class="line">    &#96;create_time&#96; datetime    NOT NULL,</span><br><span class="line">    &#96;update_time&#96; datetime    DEFAULT NULL,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">    UNIQUE KEY &#96;unique_user_username&#96; (&#96;username&#96;)</span><br><span class="line">) ENGINE &#x3D; InnoDB</span><br><span class="line">  DEFAULT CHARSET &#x3D; utf8;</span><br></pre></td></tr></table></figure><blockquote><p>对于  <code>InnoDB </code> 类型的表，有以下几种方式可以提高导入的效率：</p></blockquote><ul><li>主键顺序插入</li><li>关闭唯一性校验</li><li>手动提交事务</li></ul><h3 id="2、InnoDB引擎表插入优化-主键顺序插入"><a href="#2、InnoDB引擎表插入优化-主键顺序插入" class="headerlink" title="2、InnoDB引擎表插入优化 - 主键顺序插入"></a>2、InnoDB引擎表插入优化 - 主键顺序插入</h3><blockquote><p>因为InnoDB类型的表是按照主键的顺序保存的，所以将导入的数据按照主键的顺序排列，可以有效的提高导入数据的效率。如果InnoDB表没有主键，那么系统会自动默认创建一个内部列作为主键，所以如果可以给表创建一个主键，将可以利用这点，来提高导入数据的效率。</p><p>脚本文件介绍（大小相同） :</p></blockquote><ul><li><p>sql1.log    —-&gt; 主键有序</p></li><li><p>sql2.log    —-&gt; 主键无序</p></li></ul><blockquote><p>使用 <code>load data local infile 文件名 into 表名</code> 进行数据加载，查看结果</p></blockquote><ul><li>插入ID顺序排列数据：</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309223038.png" alt="image-20210309223038580"></p><ul><li>插入ID无序排列数据：</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309223954.png" alt="image-20210309223954068"></p><h3 id="2、InnoDB引擎表插入优化-关闭唯一性校验"><a href="#2、InnoDB引擎表插入优化-关闭唯一性校验" class="headerlink" title="2、InnoDB引擎表插入优化-关闭唯一性校验"></a>2、InnoDB引擎表插入优化-关闭唯一性校验</h3><blockquote><p>在导入数据前执行 <code>SET UNIQUE_CHECKS=0</code>，关闭唯一性校验，在导入结束后执行<code>SET UNIQUE_CHECKS=1</code>，恢复唯一性校验，可以提高导入的效率。</p></blockquote><h3 id="3、InnoDB引擎表插入优化-手动提交事务"><a href="#3、InnoDB引擎表插入优化-手动提交事务" class="headerlink" title="3、InnoDB引擎表插入优化-手动提交事务"></a>3、InnoDB引擎表插入优化-手动提交事务</h3><blockquote><p>如果应用使用自动提交的方式，建议在导入前执行 <code>SET AUTOCOMMIT=0</code>，关闭自动提交，导入结束后再执行 <code>SET AUTOCOMMIT=1</code>，打开自动提交，也可以提高导入的效率。</p></blockquote><h2 id="5-2、优化insert语句"><a href="#5-2、优化insert语句" class="headerlink" title="5.2、优化insert语句"></a>5.2、优化insert语句</h2><blockquote><p>当进行数据的insert操作的时候，可以考虑采用以下几种优化方案。</p></blockquote><h3 id="1、使用多个值表的insert语句"><a href="#1、使用多个值表的insert语句" class="headerlink" title="1、使用多个值表的insert语句"></a>1、使用多个值表的insert语句</h3><blockquote><p>如果需要同时对一张表插入很多行数据时，应该尽量使用多个值表的insert语句，这种方式将大大的缩减客户端与数据库之间的连接、关闭等消耗。使得效率比分开执行的单个insert语句快。</p></blockquote><ul><li>原始方案为：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">insert into tb_test values(1,&#39;Tom&#39;);</span><br><span class="line">insert into tb_test values(2,&#39;Cat&#39;);</span><br><span class="line">insert into tb_test values(3,&#39;Jerry&#39;);</span><br></pre></td></tr></table></figure><ul><li>优化后的方案为：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into tb_test values(1,&#39;Tom&#39;),(2,&#39;Cat&#39;)，(3,&#39;Jerry&#39;);</span><br></pre></td></tr></table></figure><h3 id="2、在执行大量的insert语句前使用事务的手动提交"><a href="#2、在执行大量的insert语句前使用事务的手动提交" class="headerlink" title="2、在执行大量的insert语句前使用事务的手动提交"></a>2、在执行大量的insert语句前使用事务的手动提交</h3><blockquote><p>如果数据量实在太大，建议分段提交。</p><p>每一万条数据 <code>insert</code> 一次。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">insert into tb_test values(1,&#39;Tom&#39;);</span><br><span class="line">insert into tb_test values(2,&#39;Cat&#39;);</span><br><span class="line">insert into tb_test values(3,&#39;Jerry&#39;);</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><h3 id="3、数据有序插入"><a href="#3、数据有序插入" class="headerlink" title="3、数据有序插入"></a>3、数据有序插入</h3><blockquote><p>按照主键顺序插入</p></blockquote><ul><li>优化前</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">insert into tb_test values(4,&#39;Tim&#39;);</span><br><span class="line">insert into tb_test values(1,&#39;Tom&#39;);</span><br><span class="line">insert into tb_test values(3,&#39;Jerry&#39;);</span><br><span class="line">insert into tb_test values(5,&#39;Rose&#39;);</span><br><span class="line">insert into tb_test values(2,&#39;Cat&#39;);</span><br></pre></td></tr></table></figure><ul><li>优化后</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">insertintotb_testvalues(1,&#39;Tom&#39;);</span><br><span class="line">insertintotb_testvalues(2,&#39;Cat&#39;);</span><br><span class="line">insertintotb_testvalues(3,&#39;Jerry&#39;);</span><br><span class="line">insertintotb_testvalues(4,&#39;Tim&#39;);</span><br><span class="line">insertintotb_testvalues(5,&#39;Rose&#39;);</span><br></pre></td></tr></table></figure><h2 id="5-3、优化order-by语句"><a href="#5-3、优化order-by语句" class="headerlink" title="5.3、优化order by语句"></a>5.3、优化order by语句</h2><h3 id="1、准备环境-1"><a href="#1、准备环境-1" class="headerlink" title="1、准备环境"></a>1、准备环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">use index_study;</span><br><span class="line">CREATE TABLE &#96;emp&#96;</span><br><span class="line">(</span><br><span class="line">    &#96;id&#96;     int(11)      NOT NULL AUTO_INCREMENT,</span><br><span class="line">    &#96;name&#96;   varchar(100) NOT NULL,</span><br><span class="line">    &#96;age&#96;    int(3)       NOT NULL,</span><br><span class="line">    &#96;salary&#96; int(11) DEFAULT NULL,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE &#x3D; InnoDB</span><br><span class="line">  DEFAULT CHARSET &#x3D; utf8mb4;</span><br><span class="line">  </span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;)</span><br><span class="line">values (&#39;1&#39;, &#39;Tom&#39;, &#39;25&#39;, &#39;2300&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;)</span><br><span class="line">values (&#39;2&#39;, &#39;Jerry&#39;, &#39;30&#39;, &#39;3500&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;)</span><br><span class="line">values (&#39;3&#39;, &#39;Luci&#39;, &#39;25&#39;, &#39;2800&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;)</span><br><span class="line">values (&#39;4&#39;, &#39;Jay&#39;, &#39;36&#39;, &#39;3500&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;)</span><br><span class="line">values (&#39;5&#39;, &#39;Tom2&#39;, &#39;21&#39;, &#39;2200&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;)</span><br><span class="line">values (&#39;6&#39;, &#39;Jerry2&#39;, &#39;31&#39;, &#39;3300&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;)</span><br><span class="line">values (&#39;7&#39;, &#39;Luci2&#39;, &#39;26&#39;, &#39;2700&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;)</span><br><span class="line">values (&#39;8&#39;, &#39;Jay2&#39;, &#39;33&#39;, &#39;3500&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;)</span><br><span class="line">values (&#39;9&#39;, &#39;Tom3&#39;, &#39;23&#39;, &#39;2400&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;)</span><br><span class="line">values (&#39;10&#39;, &#39;Jerry3&#39;, &#39;32&#39;, &#39;3100&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;)</span><br><span class="line">values (&#39;11&#39;, &#39;Luci3&#39;, &#39;26&#39;, &#39;2900&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;)</span><br><span class="line">values (&#39;12&#39;, &#39;Jay3&#39;, &#39;37&#39;, &#39;4500&#39;);</span><br><span class="line"></span><br><span class="line">create index idx_emp_age_salary on emp (age, salary);</span><br></pre></td></tr></table></figure><h3 id="2、MySQL支持的两种排序方式"><a href="#2、MySQL支持的两种排序方式" class="headerlink" title="2、MySQL支持的两种排序方式"></a>2、MySQL支持的两种排序方式</h3><ul><li>第一种是通过对返回数据进行排序，也就是通常说的 <code>ﬁlesort</code> 排序，所有不是通过索引直接返回排序结果的排序都叫  <code>FileSort</code> 排序。</li><li>第二种通过有序索引顺序扫描直接返回有序数据，这种情况即为  <code>using  index</code>，不需要额外排序，操作效率高。</li></ul><h3 id="3、查询所有字段进行的排序"><a href="#3、查询所有字段进行的排序" class="headerlink" title="3、查询所有字段进行的排序"></a>3、查询所有字段进行的排序</h3><ul><li>查询所有字段，根据 <code>age</code> 进行升序/降序排序。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from emp order by age;</span><br><span class="line">explain select * from emp order by age desc;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309225619.png" alt="image-20210309225619147"></p><blockquote><p>和根据 <code>salary</code> 进行排序一样，这里进行的都是文件排序 <code>filesort</code></p></blockquote><ul><li>查询所有字段，根据 <code>age</code> 和 <code>salary</code> 进行排序</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from emp order by age,salary;</span><br><span class="line">explain select * from emp order by age,salary desc;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309225748.png" alt="image-20210309225748259"></p><blockquote><p>此时仍然为 <code>filesort</code></p></blockquote><h3 id="4、查询索引字段进行的排序"><a href="#4、查询索引字段进行的排序" class="headerlink" title="4、查询索引字段进行的排序"></a>4、查询索引字段进行的排序</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210309230041.png" alt="image-20210309230041747"></p><blockquote><p>如果使用 <strong>覆盖索引</strong> ，那么就会使用索引排序。</p></blockquote><h3 id="5、查询字段中有非索引字段进行的排序"><a href="#5、查询字段中有非索引字段进行的排序" class="headerlink" title="5、查询字段中有非索引字段进行的排序"></a>5、查询字段中有非索引字段进行的排序</h3><blockquote><p>如果查询的字段中有非索引字段，例如 <code>name</code> ，那么将会使用 <code>filesort</code></p></blockquote><h3 id="6、优化目标"><a href="#6、优化目标" class="headerlink" title="6、优化目标"></a>6、优化目标</h3><blockquote><p>了解了MySQL的排序方式，优化目标就清晰了：</p></blockquote><ul><li>尽量减少额外的排序，通过索引直接返回有序数据。</li><li>where 条件和Order by 使用相同的索引，并且<strong>Order By 的顺序和索引顺序相同</strong>， 并且Order by 的字段<strong>都是升序，或者都是降序</strong>。否则肯定需要额外的操作，这样就会出现 <code>FileSort</code>。</li></ul><h3 id="7、举例"><a href="#7、举例" class="headerlink" title="7、举例"></a>7、举例</h3><blockquote><p>假设现有一复合索引 <code>idx_a_b_c</code>(a,b,c)，则以下情况可以避免<code>filesort</code></p></blockquote><ul><li><p>order by 能使用索引最左前缀</p><ul><li>order by a;</li><li>order by a,b;</li><li>order by a,b,c;</li><li>order by a desc,b desc,c desc;</li></ul></li><li><p>如果where使用索引的最左前缀定义为常量，则order by可以使用索引</p><ul><li>where a = const order by b,c;</li><li>where a = const and b = const order by c;</li><li>where a = const and b &gt; const order by c;</li></ul></li><li><p>不能使用索引进行排序的情况</p><ul><li>order by a asc,b desc,c desc</li></ul><blockquote><p>上述语句排序不一致，必须要么全为desc，要么全为asc</p></blockquote><ul><li>where g = const order by b,c</li></ul><blockquote><p>上述语句丢失a索引</p></blockquote><ul><li>where a = const order by c</li></ul><blockquote><p>上述语句丢失b索引</p></blockquote><ul><li>where a = const order by a,d</li></ul><blockquote><p>上述语句中，d不是索引的一部分</p></blockquote></li></ul><h3 id="8、FileSort的优化"><a href="#8、FileSort的优化" class="headerlink" title="8、FileSort的优化"></a>8、<code>FileSort</code>的优化</h3><blockquote><p>通过创建合适的索引，能够减少 <code>Filesort</code> 的出现，但是在某些情况下，条件限制不能让<code>Filesort</code>消失，那就需要加快 <code>Filesort</code> 的排序操作。对于 <code>Filesort</code> ， MySQL  有两种排序算法：</p></blockquote><ul><li><p>两次扫描算法 ：<strong>MySQL4.1 之前</strong>，使用该方式排序。首先根据条件取出排序字段和行指针信息，然后在排序区 sort buﬀer 中排序，如果sort buﬀer不够，则在临时表 temporary table 中存储排序结果。完成排序之后，再根据行指针回表读取记录，该操作可能会导致大量随机I/O操作。</p></li><li><p>一次扫描算法：一次性取出满足条件的所有字段，然后在排序区 sort buﬀer 中排序后直接输出结果集。排序时内存开销较大，但是排序效率比两次扫描算法要高。</p></li></ul><blockquote><p>MySQL 通过比较系统变量 max_length_for_sort_data 的大小和Query语句取出的字段总大小， 来判定是否那种排序算法，如果max_length_for_sort_data 更大，那么使用第二种优化之后的算法；否则使用第一种。</p><p>可以适当提高 sort_buﬀer_size 和 max_length_for_sort_data 系统变量，来增大排序区的大小，提高排序的效率。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310082831.png" alt="image-20210310082831825"></p><h2 id="5-4、优化group-by-语句"><a href="#5-4、优化group-by-语句" class="headerlink" title="5.4、优化group by 语句"></a>5.4、优化group by 语句</h2><blockquote><p>由于GROUP BY 实际上也同样会进行排序操作，而且与ORDER BY 相比，GROUP BY 主要只是<strong>多了排序之后的分组操作</strong>。当然，如果在分组的时候还使用了其他的一些聚合函数，那么还需要一些聚合函数的计算。</p><p>所以，在 GROUP BY 的实现过程中，与 ORDER BY 一样也可以利用到索引。</p><p>如果查询包含 group by 但是用户想要避免排序结果的消耗， 则可以执行<strong>order by null</strong>禁止排序。如下 ：</p></blockquote><h3 id="1、删除复合索引，查看group-by是否包含排序"><a href="#1、删除复合索引，查看group-by是否包含排序" class="headerlink" title="1、删除复合索引，查看group by是否包含排序"></a>1、删除复合索引，查看group by是否包含排序</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310083802.png" alt="image-20210310083801891"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select age,count(*) from emp group by age;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310084218.png" alt="image-20210310084218530"></p><h3 id="2、使用order-by-null优化group-by避免排序"><a href="#2、使用order-by-null优化group-by避免排序" class="headerlink" title="2、使用order by null优化group by避免排序"></a>2、使用order by null优化group by避免排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select age,count(*) from emp group by age order by null;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310084328.png" alt="image-20210310084328837"></p><blockquote><p>从上面的例子可以看出，第一个SQL语句需要进行”ﬁlesort”，而第二个SQL由于order  by  null 不需要进行</p><p>“ﬁlesort”，  而上文提过Filesort往往非常耗费时间。</p></blockquote><h3 id="3、使用索引优化Group-by"><a href="#3、使用索引优化Group-by" class="headerlink" title="3、使用索引优化Group by"></a>3、使用索引优化Group by</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create index idx_emp_age_salary on emp(age,salary);</span><br><span class="line">explain select age,count(*) from emp group by age order by null;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310084808.png" alt="image-20210310084808529"></p><h2 id="5-5、优化嵌套查询（子查询）"><a href="#5-5、优化嵌套查询（子查询）" class="headerlink" title="5.5、优化嵌套查询（子查询）"></a>5.5、优化嵌套查询（子查询）</h2><blockquote><p>Mysql4.1版本之后，开始支持SQL的子查询。这个技术可以使用SELECT语句来创建一个单列的查询结果，然后把这个结果作为过滤条件用在另一个查询中。使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死，并且写起来也很容易。但是，有些情况下，子查询是可以被更高效的连接（JOIN）替代。</p><p>示例  ，查找有角色的所有的用户信息 :</p></blockquote><h3 id="1、优化前"><a href="#1、优化前" class="headerlink" title="1、优化前"></a>1、优化前</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t_user where id in (select user_id from user_role );</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310085102.png" alt="image-20210310085102274"></p><h3 id="2、优化后"><a href="#2、优化后" class="headerlink" title="2、优化后"></a>2、优化后</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t_user u , user_role ur where u.id &#x3D; ur.user_id;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310085420.png" alt="image-20210310085420290"></p><blockquote><p>连接( Join)查询之所以更有效率一些 ，是因为MySQL不需要在内存中创建临时表来完成这个逻辑上需要两个步骤的查询工作。</p></blockquote><h2 id="5-6、优化OR条件"><a href="#5-6、优化OR条件" class="headerlink" title="5.6、优化OR条件"></a>5.6、优化OR条件</h2><blockquote><p>包含OR的查询子句，如果要利用索引，则OR之间的每个条件列都必须用到索引 ， 而且<strong>不能使用到复合索引</strong>；  如果没有索引，则应该考虑增加索引。</p></blockquote><h3 id="1、获取-emp-表中的所有的索引"><a href="#1、获取-emp-表中的所有的索引" class="headerlink" title="1、获取 emp 表中的所有的索引"></a>1、获取 emp 表中的所有的索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show index from emp;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310085646.png" alt="image-20210310085646370"></p><h3 id="2、使用union替换or"><a href="#2、使用union替换or" class="headerlink" title="2、使用union替换or"></a>2、使用union替换or</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from emp where id &#x3D; &#39;1&#39; or id &#x3D; &#39;10&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310085956.png" alt="image-20210310085956123"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from emp where id &#x3D; &#39;1&#39; union select * from emp where id &#x3D; &#39;10&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310090132.png" alt="image-20210310090132249"></p><ul><li>我们来比较下重要指标，发现主要差别是 type 和 ref 这两项</li></ul><blockquote><p>type   显示的是访问类型，是较为重要的一个指标，结果值从好到坏依次是：</p><p>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null    &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</p></blockquote><ul><li><p>UNION 语句的 type 值为 ref，OR 语句的 type 值为 range，可以看到这是一个很明显的差距</p></li><li><p>UNION 语句的 ref 值为 const，OR 语句的 type 值为 null，const 表示是常量值引用，非常快这两项的差距就说明了  UNION  要优于  OR 。</p></li></ul><h2 id="5-7、优化分页查询"><a href="#5-7、优化分页查询" class="headerlink" title="5.7、优化分页查询"></a>5.7、优化分页查询</h2><blockquote><p>一般分页查询时，通过创建覆盖索引能够比较好地提高性能。一个常见又非常头疼的问题就是 limit 2000000,10 ，此时需要MySQL排序前2000010 记录，仅仅返回2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大  。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310092303.png" alt="image-20210310092303106"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310092325.png" alt="image-20210310092325129"></p><h3 id="1、优化思路一"><a href="#1、优化思路一" class="headerlink" title="1、优化思路一"></a>1、优化思路一</h3><blockquote><p><strong>在索引上完成排序分页操作</strong>，最后根据主键关联回原表查询其他所需要的列的内容</p></blockquote><ul><li>常规写法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tb_item limit 200000,10;</span><br></pre></td></tr></table></figure><ul><li>优化后写法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select t.* from tb_item as t join (select id from tb_seller order by id limit 200000,10) as a on a.id &#x3D; t.id;</span><br></pre></td></tr></table></figure><ul><li>查看优化后写法的执行计划</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310092839.png" alt="image-20210310092839341"></p><h3 id="2、优化思路二"><a href="#2、优化思路二" class="headerlink" title="2、优化思路二"></a>2、优化思路二</h3><blockquote><p>该方案适用于<strong>主键自增</strong>的表，可以把Limit  查询转换成某个位置的查询 。（自增的主键还不能出现断层。）</p></blockquote><ul><li>优化后写法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_item where id &gt; 200000 limit 10;</span><br></pre></td></tr></table></figure><blockquote><p>由于使用了索引，所以非常快</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310184441.png" alt="image-20210310184417566"></p><h2 id="5-8、使用SQL提示"><a href="#5-8、使用SQL提示" class="headerlink" title="5.8、使用SQL提示"></a>5.8、使用SQL提示</h2><blockquote><p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p></blockquote><h3 id="1、USE-INDEX"><a href="#1、USE-INDEX" class="headerlink" title="1、USE INDEX"></a>1、USE INDEX</h3><blockquote><p>在查询语句中表名的后面，添加 use index 来提供希望MySQL去参考的索引列表，就可以让MySQL不再考虑其他可用的索引。</p></blockquote><ul><li>查看表中的索引</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310185045.png" alt="image-20210310185045284"></p><blockquote><p>假设现在有如下SQL</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tb_seller where name &#x3D; &#39;小米科技&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>那么可能会使用两个索引，即 <code>idx_seller_name</code> 和 <code>idx_seller_name_sta_adds</code> </p></blockquote><ul><li>查看上述SQL的执行计划，发现其使用了 <code>idx_seller_name</code>索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller where name &#x3D; &#39;小米科技&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310185703.png" alt="image-20210310185702745"></p><ul><li>使用 use index 人为干预</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller use index(idx_seller_name_sta_adds) where name &#x3D; &#39;小米科技&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310185814.png" alt="image-20210310185814793"></p><h3 id="2、IGNORE-INDEX"><a href="#2、IGNORE-INDEX" class="headerlink" title="2、IGNORE INDEX"></a>2、IGNORE INDEX</h3><blockquote><p>如果用户只是单纯的想让MySQL忽略一个或者多个索引，则可以使用 ignore  index  作为 提示</p></blockquote><ul><li>从上面可知，如果不加以干预，Mysql使用的是 <code>idx_seller_name</code> 索引，我们可以使用 <code>IGNORE INDEX</code> 让MySQL忽略 <code>idx_seller_name</code> 索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller ignore index(idx_seller_name) where name &#x3D; &#39;小米科技&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310190055.png" alt="image-20210310190055316"></p><h3 id="3、FORCE-INDEX"><a href="#3、FORCE-INDEX" class="headerlink" title="3、FORCE INDEX"></a>3、FORCE INDEX</h3><blockquote><p>为强制MySQL使用一个特定的索引，可在查询中使用  force  index  作为提示 。</p></blockquote><ul><li>为 <code>address</code> 属性添加一个单列索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index idx_address on tb_seller(address);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310191208.png" alt="image-20210310191208771"></p><ul><li>在 <code>tb_seller</code> 表中执行以下语句，MySQL不会使用索引</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310190830.png" alt="image-20210310190830900"></p><blockquote><p>这是因为表中 <code>address</code> 属性为北京市的数据占绝大多数，使用索引不如全表扫描</p></blockquote><ul><li>这里我们可以使用 <code>force index</code> 强制MySQL使用索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller force index(idx_address)  where address &#x3D; &#39;北京市&#39;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210310191304.png" alt="image-20210310191304530"></p><h3 id="4、force-和-use的区别"><a href="#4、force-和-use的区别" class="headerlink" title="4、force 和 use的区别"></a>4、force 和 use的区别</h3><blockquote><p>use index 更多的是建议，而force index是强制使用索引。</p><p>如果MySQL觉得你使用 <code>use index</code> 建议的索引效率比全表扫描慢，那么仍然不会走索引。</p><p>如果你使用 <code>force index</code> 强制MySQL使用你给的索引，那么即使你给的索引执行效率低，那么MySQL也会使用你给的索引。</p></blockquote><h2 id="5-9、分解关联查询"><a href="#5-9、分解关联查询" class="headerlink" title="5.9、分解关联查询"></a>5.9、分解关联查询</h2><blockquote><p>许多高性能的应用都会对关联查询进行分解。</p><p>即可以对每一个表进行一次 <strong>单表查询</strong> ，然后将结果在应用程序中进行关联。</p><p>例如，下面这个查询中</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">  *</span><br><span class="line">from</span><br><span class="line">  tag as t</span><br><span class="line">  join tag_post as tp on tp.tag_id &#x3D; t.id</span><br><span class="line">  join post as p on p.id &#x3D; tp.post_id</span><br><span class="line">where</span><br><span class="line">  t.tag &#x3D; &#39;mysql&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>可以分解为下列这些查询来代替</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from tag where tag &#x3D; &#39;mysql&#39;;</span><br><span class="line">select * from tag_post where tag_id &#x3D; 1234;</span><br><span class="line">select * from post where post.id in (123,456,678,9097);</span><br></pre></td></tr></table></figure><blockquote><p>这样做地原因？</p></blockquote><ul><li>让缓存的效率更高。</li></ul><blockquote><p>许多应用程序可以方便地缓存单表查询对应的结果对象。</p><p>例如，上面查询中的 <code>tag</code> 已经被缓存了，那么应用就可以跳过第一个对象。</p><p>再例如，应用中已经缓存了 <code>post.id</code> 为 123、456 的内容，那么第三个查询的 <code>in</code> 就可以少几个 <code>ID</code>.</p><p>另外，对于MySQL的查询缓存来说，如果关联的中的每个表发生了变化，那么就无法是哟查询缓存了，而拆分后，如果某个表很少改变，那么基于此表的查询就可以重复利用查询缓存。</p></blockquote><ul><li>将查询分解后，执行单个查询可以减少锁的竞争。</li><li>在应用层做关联，可以更容易对数据库进行拆分，更容易做到高性能和可拓展。</li><li>查询本身效率可能有所提升</li></ul><blockquote><p>这个例子中，使用 <code>in</code> 代替 关联查询，可以让MySQL按照 <code>ID</code> 顺序进行查询，这比随机的关联要更高效。</p></blockquote><ul><li>可以减少冗余记录的查询。</li></ul><blockquote><p>在应用层做关联查询,意味着对于某条记录应用只需要查询一次,而在数据库中做关联查询,则可能需要重复地访问一部分数据。从这点看,这样的重构还可能会减少网络和内存的消耗。</p></blockquote><h1 id="六、补充-尚硅谷索引优化"><a href="#六、补充-尚硅谷索引优化" class="headerlink" title="六、补充-尚硅谷索引优化"></a>六、补充-尚硅谷索引优化</h1><h2 id="6-1、索引单表查询优化案例"><a href="#6-1、索引单表查询优化案例" class="headerlink" title="6.1、索引单表查询优化案例"></a>6.1、索引单表查询优化案例</h2><h3 id="1、环境搭建"><a href="#1、环境搭建" class="headerlink" title="1、环境搭建"></a>1、环境搭建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS &#96;article&#96;</span><br><span class="line">(</span><br><span class="line">    &#96;id&#96;          INT(10) UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    &#96;author_id&#96;   INT(10) UNSIGNED NOT NULL,</span><br><span class="line">    &#96;category_id&#96; INT(10) UNSIGNED NOT NULL,</span><br><span class="line">    &#96;views&#96;       INT(10) UNSIGNED NOT NULL,</span><br><span class="line">    &#96;comments&#96;    INT(10) UNSIGNED NOT NULL,</span><br><span class="line">    &#96;title&#96;       VARBINARY(255)   NOT NULL,</span><br><span class="line">    &#96;content&#96;     TEXT             NOT NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;article&#96;</span><br><span class="line">    (&#96;author_id&#96;, &#96;category_id&#96;, &#96;views&#96;, &#96;comments&#96;, &#96;title&#96;, &#96;content&#96;)</span><br><span class="line">VALUES</span><br><span class="line">       (1, 1, 1, 1, &#39;1&#39;, &#39;1&#39;),</span><br><span class="line">       (2, 2, 2, 2, &#39;2&#39;, &#39;2&#39;),</span><br><span class="line">       (1, 1, 3, 3, &#39;3&#39;, &#39;3&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT * FROM article;</span><br></pre></td></tr></table></figure><h3 id="2、案例"><a href="#2、案例" class="headerlink" title="2、案例"></a>2、案例</h3><blockquote><p>查询 category_id 为1 且 comments 大于 1 的情况下, views 最多的 <code>article_id</code>。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT id,</span><br><span class="line">author_id</span><br><span class="line">FROM article</span><br><span class="line">WHERE category_id &#x3D; 1</span><br><span class="line">AND comments &gt; 1</span><br><span class="line">ORDER BY  views DESC LIMIT 1;</span><br></pre></td></tr></table></figure><blockquote><p>使用explain 分析以上<code>sql</code>的执行计划，发现<code>type</code>为 ALL，即最坏的情况，<code>Extra</code>中还出现了 <code>Using FileSort</code> 的情况，这个时候必须进行优化。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313125325.png" alt="image-20210313125318090"></p><blockquote><p>开始优化</p></blockquote><ul><li>为 <code>category_id</code>、<code>comments</code>和<code>views</code>新建一个复合索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table &#96;article&#96; add index idx_cate_comm_views (&#96;category_id&#96;,&#96;comments&#96;,&#96;views&#96;);</span><br></pre></td></tr></table></figure><ul><li>再次使用 explain 分析上面的<code>sql</code>，发现使用了索引，但 <code>using filesort</code> 依然存在</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313130956.png" alt="image-20210313130955997"></p><blockquote><p>由于 范围比较 后的列索引会失效，所以 <code>sql</code> 的执行计划中出现了 文件排序，我们需要删除上面这个不怎么合适的索引，重新再建一个。</p></blockquote><ul><li> 删除上面的索引。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index idx_cate_comm_views on &#96;article&#96;;</span><br></pre></td></tr></table></figure><ul><li>绕过 <code>comments</code> 字段，为 <code>category_id</code> 和 <code>views</code> 字段建一个复合索引。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table &#96;article&#96; add index &#96;idx_article_cate_views&#96;(&#96;category_id&#96;,&#96;views&#96;);</span><br></pre></td></tr></table></figure><ul><li>再次运行SQL语句，查看执行计划</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain SELECT id,author_id FROM article WHERE category_id &#x3D; 1 AND comments &gt; 1 ORDER BY  views DESC LIMIT 1;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313134241.png" alt="image-20210313134241862"></p><h2 id="6-2、索引关联查询优化案例"><a href="#6-2、索引关联查询优化案例" class="headerlink" title="6.2、索引关联查询优化案例"></a>6.2、索引关联查询优化案例</h2><h3 id="1、环境准备-2"><a href="#1、环境准备-2" class="headerlink" title="1、环境准备"></a>1、环境准备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS &#96;class&#96;</span><br><span class="line">(</span><br><span class="line">    &#96;id&#96;   INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">    &#96;card&#96; INT(10) UNSIGNED NOT NULL,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">);</span><br><span class="line">CREATE TABLE IF NOT EXISTS &#96;book&#96;</span><br><span class="line">(</span><br><span class="line">    &#96;bookid&#96; INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">    &#96;card&#96;   INT(10) UNSIGNED NOT NULL,</span><br><span class="line">    PRIMARY KEY (&#96;bookid&#96;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO class(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO class(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO class(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO class(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO class(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO class(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO class(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO class(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO class(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO class(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO class(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO class(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO class(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO class(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO class(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO class(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO class(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO class(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO class(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO class(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO book(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO book(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO book(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO book(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO book(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO book(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO book(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO book(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO book(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO book(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO book(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO book(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO book(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO book(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO book(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO book(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO book(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO book(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO book(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO book(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br></pre></td></tr></table></figure><h3 id="2、两表案例"><a href="#2、两表案例" class="headerlink" title="2、两表案例"></a>2、两表案例</h3><blockquote><p>下面开始explain分析</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM class LEFT JOIN book ON class.card &#x3D; book.card;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313134918.png" alt="image-20210313134918533"></p><ul><li>给book表的card字段创建一个索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table book add index &#96;idx_book_card&#96; (&#96;card&#96;);</span><br></pre></td></tr></table></figure><ul><li>此时再次进行explain分析</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313135304.png" alt="image-20210313135304463"></p><blockquote><p>左连接在右表中创建索引</p></blockquote><ul><li>删除原有的book表中的索引，为class表的card字段创建一个索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drop index &#96;idx_book_card&#96; on book;</span><br><span class="line">alter table class add index &#96;idx_book_card&#96; (&#96;card&#96;);</span><br></pre></td></tr></table></figure><ul><li>再次进行explain分析</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313140207.png" alt="image-20210313140206959"></p><blockquote><p>可以看到，此时的type为index，index的效率比ref低。</p><p>左连接以左表作为主表，左边数据是一定都有的，<strong>左连接从右表中选择数据添加到左表中</strong>，右边是我们的关键点，所以必须对右表建索引。</p><p>右连接同理需要对左表的字段建索引。</p></blockquote><h3 id="3、三表案例"><a href="#3、三表案例" class="headerlink" title="3、三表案例"></a>3、三表案例</h3><blockquote><p>添加新表，插入数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS &#96;phone&#96;</span><br><span class="line">(</span><br><span class="line">    &#96;phoneid&#96; INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">    &#96;card&#96;   INT(10) UNSIGNED NOT NULL,</span><br><span class="line">    PRIMARY KEY (&#96;phoneid&#96;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO phone(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO phone(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO phone(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO phone(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO phone(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO phone(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO phone(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO phone(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO phone(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO phone(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO phone(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO phone(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO phone(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO phone(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO phone(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO phone(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO phone(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO phone(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO phone(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br><span class="line">INSERT INTO phone(card)</span><br><span class="line">VALUES (FLOOR(1 + (RAND() * 20)));</span><br></pre></td></tr></table></figure><ul><li>先删去上面为class创建的索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index &#96;idx_book_card&#96; on class;</span><br></pre></td></tr></table></figure><ul><li>编写三表查询SQL</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM class</span><br><span class="line">LEFT JOIN book</span><br><span class="line">ON class.card &#x3D; book.card</span><br><span class="line">LEFT JOIN phone</span><br><span class="line">ON book.card &#x3D; phone.card;</span><br></pre></td></tr></table></figure><ul><li>使用explain分析执行计划</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313143428.png" alt="image-20210313143427954"></p><ul><li>给 <code>phone</code> 表和 <code>book</code> 表各自建一个索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table &#96;phone&#96; add index &#96;idx_phone_card&#96;(&#96;card&#96;);</span><br><span class="line">alter table &#96;book&#96; add index &#96;idx_book_card&#96;(&#96;card&#96;);</span><br></pre></td></tr></table></figure><ul><li>再次使用explain分析执行计划</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210313143737.png" alt="image-20210313143737877"></p><h3 id="4、结论"><a href="#4、结论" class="headerlink" title="4、结论"></a>4、结论</h3><ul><li>永远用小表（结果集）驱动大表（结果集）</li></ul><blockquote><p>先了解在join连接时，哪个表是驱动表，哪个是被驱动表</p><ol><li>当使用left join时，左表是驱动表，右表是被驱动表</li><li>当使用right join时，右表时驱动表，左表是驱动表</li><li>当使用join时，<code>mysql</code>会选择数据量比较小的表作为驱动表，大表作为被驱动表</li></ol></blockquote><ul><li>子查询尽量不要放在被驱动表，有可能使用不到索引。</li></ul><blockquote><p>join查询在有索引条件下</p><ol><li><p>驱动表有索引不会使用到索引</p></li><li><p>被驱动表建立索引会使用到索引</p></li></ol><p>在以小表驱动大表的情况下，再给大表建立索引会大大提高执行速度</p></blockquote><ul><li>在无法保证被驱动表的Join条件字段被索引且内存资源充足的情况下，不要太吝惜<code>JoinButter</code> 的设置</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL高级学习（一）-初识索引、复习视图、存储过程和函数以及触发器的学习</title>
      <link href="posts/1389856525.html"/>
      <url>posts/1389856525.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、索引"><a href="#一、索引" class="headerlink" title="一、索引"></a>一、索引</h1><h2 id="1-1、索引概述"><a href="#1-1、索引概述" class="headerlink" title="1.1、索引概述"></a>1.1、索引概述</h2><p>MySQL官方对索引的定义为：</p><blockquote><p>索引（index）是<strong>帮助MySQL高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护者满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。如下面的示意图所示 :</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306190926.png" alt="image-20210306190926182"></p><blockquote><p>左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上也并不是一定物理相邻的）。为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找快速获取到相应数据。</p><p>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以<strong>索引文件</strong>的形式存储在磁盘上。</p><p><strong>索引是数据库中用来提高性能的最常用的工具。</strong></p></blockquote><h2 id="1-2、索引优势劣势"><a href="#1-2、索引优势劣势" class="headerlink" title="1.2、索引优势劣势"></a>1.2、索引优势劣势</h2><h3 id="1、优势"><a href="#1、优势" class="headerlink" title="1、优势"></a>1、优势</h3><ul><li>类似于书籍的目录索引，提高数据检索的效率，<strong>降低数据库的IO成本</strong></li><li>通过索引对数据结构进行排序，降低数据排序的成本，<strong>降低CPU的消耗</strong></li></ul><blockquote><p>以下是 <strong>《高性能MySQL》</strong> 中的补充</p></blockquote><ul><li>索引大大减少了服务器需要扫描的数据量。</li><li>索引可以帮助服务器避免排序和临时表</li><li>索引可以将随机 <code>I/O</code> 变为顺序 <code>I/O</code></li></ul><h3 id="2、劣势"><a href="#2、劣势" class="headerlink" title="2、劣势"></a>2、劣势</h3><ul><li>实际上索引也是一张表，该表中保存了主键和索引字段，并指向实体类的记录，<strong>索引索引列也是需要占用空间的。</strong></li><li>虽然索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT、UPDATE、DELETE。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。</li></ul><h2 id="1-3、索引结构"><a href="#1-3、索引结构" class="headerlink" title="1.3、索引结构"></a>1.3、索引结构</h2><blockquote><p>索引是在MySQL的<strong>存储引擎层</strong>中实现的，而<strong>不是在服务器层实现的</strong>。所以每种存储引擎的索引都不一定完全相同，也不是所有的存储引擎都支持所有的索引类型的。MySQL目前提供了以下4种索引：</p></blockquote><ul><li>BTREE 索引（重点介绍）</li></ul><blockquote><p>最常见的索引类型，大部分索引都支持 B 树索引。</p></blockquote><ul><li>HASH 索引</li></ul><blockquote><p>只有Memory引擎支持 ， 使用场景简单 。</p></blockquote><ul><li>R-tree 索引（空间索引）</li></ul><blockquote><p>空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少，不做特别介绍。</p></blockquote><ul><li>Full-text（全文索引）</li></ul><blockquote><p>全文索引也是MyISAM的一个特殊索引类型，主要用于全文索引，InnoDB从Mysql5.6版本开始支持全文索引。</p></blockquote><center>MyISAM、nnoDB、Memory三种存储引擎对各种索引类型的支持</center><table><thead><tr><th><strong>索引</strong></th><th><strong>InnoDB引擎</strong></th><th><strong>MyISAM引擎</strong></th><th><strong>Memory引擎</strong></th></tr></thead><tbody><tr><td>BTREE索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>HASH  索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-tree  索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6版本之后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><blockquote><p>我们平常所说的索引，如果没有特别指明，都是指B+树（多路搜索树，并不一定是二叉的）结构组织的索引。其中聚集索引、复合索引、前缀索引、唯一索引默认都是使用 B+tree 索引，统称为 索引。</p></blockquote><h3 id="1、BTREE-结构"><a href="#1、BTREE-结构" class="headerlink" title="1、BTREE 结构"></a>1、BTREE 结构</h3><blockquote><p><strong>BTree又叫多路平衡搜索树</strong>，一棵 <code>m</code> 叉的BTree特性如下：</p></blockquote><ul><li>树中每个节点最多包含 <code>m</code> 个孩子。</li><li>除根节点和叶子节点外，每个节点至少有 <code>[ceil(m / 2)]</code> 个孩子节点。（ceil：向上取整）</li><li>若根节点不是叶子节点，则至少有两个孩子。</li><li>所有的叶子节点都在同一层。</li><li>每个非叶子节点由n个key（存储元素）与n+1个指针组成，其中 <code>[ceil(m/2)-1] &lt;= n &lt;= m-1</code></li></ul><blockquote><p>这里以 <strong>5叉BTree为例</strong>，由 <code>m = 5</code> 可推出  <code>[ceil(m/2)-1] &lt;= n &lt;= m-1</code> 。</p><p>即 <code>2 &lt;= n &lt;= 4</code>。</p><p>当 <code>n &gt; 4</code> 时，<strong>中间节点分裂到父节点，然后两边节点分开。</strong></p></blockquote><center>插入 C N G A H E K Q M F W L T Z D P R X Y S 数据为例</center><blockquote><p>演变过程如下</p></blockquote><ul><li>插入前四个字母 C N G A</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306161148.png" alt="image-20210306161147934"> </p><ul><li>插入 H ，此时 <code>n&gt;4</code>，中间元素 G 字母会向上分裂到新的节点，同时G两边的元素会分裂成两块</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306162051.png" alt="image-20210306162051558"></p><ul><li>插入E，K，Q不需要分裂</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306162122.png" alt="image-20210306162122287"></p><ul><li>插入M，中间元素M字母向上分裂到父节点G</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306162145.png" alt="image-20210306162145688"></p><ul><li>插入F，W，L，T不需要分裂</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306162216.png" alt="image-20210306162216615"></p><ul><li>插入Z，中间元素T向上分裂到父节点中</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306162245.png" alt="image-20210306162245821"></p><ul><li>插入D，中间元素D向上分裂到父节点中。然后插入P，R，X，Y不需要分裂</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306162311.png" alt="image-20210306162311645"></p><ul><li>最后插入S，NPQR节点n&gt;5，中间节点Q向上分裂，但分裂后父节点DGMT的n&gt;5，中间节点M向上分裂</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306162345.png" alt="image-20210306162345542"></p><blockquote><p>到此，该BTREE树就已经构建完成了， BTREE树 和 二叉树 相比， <strong>查询数据的效率更高</strong>， 因为<strong>对于相同的数据量来说，BTREE的层级结构比二叉树小</strong>，因此搜索速度快。</p></blockquote><h3 id="2、B-TREE-结构"><a href="#2、B-TREE-结构" class="headerlink" title="2、B+TREE 结构"></a>2、B+TREE 结构</h3><blockquote><p>B+Tree为BTree的变种，B+Tree与BTree的区别为：</p></blockquote><ul><li><p>n叉B+Tree最多含有n个key，而BTree最多含有n-1个key。</p></li><li><p><strong>B+Tree的叶子节点保存所有的key信息，依key大小顺序排列。</strong> B+Tree的所有数据都保存在叶子节点中。</p></li><li><p>所有的非叶子节点都可以看作是key的索引部分。</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306162838.png" alt="image-20210306162838426"></p><blockquote><p>由于B+Tree只有叶子节点保存key信息，查询任何key都要从root走到叶子。所以<strong>B+Tree的查询效率更加稳定</strong>。</p></blockquote><h3 id="3、MySQL中的B-Tree"><a href="#3、MySQL中的B-Tree" class="headerlink" title="3、MySQL中的B+Tree"></a>3、MySQL中的B+Tree</h3><blockquote><p>MySql索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的B+Tree，<strong>提高区间访问的性能。</strong></p><p>MySQL中的 B+Tree 索引结构示意图:</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306163507.png" alt="image-20210306163507780"></p><h2 id="1-4、索引分类"><a href="#1-4、索引分类" class="headerlink" title="1.4、索引分类"></a>1.4、索引分类</h2><h3 id="1、单值索引"><a href="#1、单值索引" class="headerlink" title="1、单值索引"></a>1、单值索引</h3><blockquote><p>即一个索引只包含单个列，一个表可以有多个单列索引</p></blockquote><h3 id="2、唯一索引"><a href="#2、唯一索引" class="headerlink" title="2、唯一索引"></a>2、唯一索引</h3><blockquote><p>索引列的值必须唯一，但允许有空值。</p></blockquote><h3 id="3、复合索引"><a href="#3、复合索引" class="headerlink" title="3、复合索引"></a>3、复合索引</h3><blockquote><p>即一个索引包含多个列。</p></blockquote><h3 id="4、主键索引"><a href="#4、主键索引" class="headerlink" title="4、主键索引"></a>4、主键索引</h3><blockquote><p>一种特殊的唯一索引，不允许有空值。</p><p><strong>一般是在建表的时候指定了主键，就会创建主键索引</strong>， CREATE INDEX不能用来创建主键索引，使用 ALTER TABLE来代替。</p></blockquote><h3 id="5、普通索引"><a href="#5、普通索引" class="headerlink" title="5、普通索引"></a>5、普通索引</h3><blockquote><p>又称辅助索引、二级索引。</p></blockquote><h2 id="1-5、索引语法"><a href="#1-5、索引语法" class="headerlink" title="1.5、索引语法"></a>1.5、索引语法</h2><blockquote><p>索引可以在创建表时同时创建，也可以随时添加新的索引。</p></blockquote><h3 id="1、准备环境"><a href="#1、准备环境" class="headerlink" title="1、准备环境"></a>1、准备环境</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">use index_study;</span><br><span class="line">CREATE TABLE `city`</span><br><span class="line">(</span><br><span class="line">    `city_id`    <span class="keyword">int</span>(<span class="number">11</span>)     NOT NULL AUTO_INCREMENT,</span><br><span class="line">    `city_name`  varchar(<span class="number">50</span>) NOT NULL,</span><br><span class="line">    `country_id` <span class="keyword">int</span>(<span class="number">11</span>)     NOT NULL,</span><br><span class="line">    <span class="function">PRIMARY <span class="title">KEY</span> <span class="params">(`city_id`)</span></span></span><br><span class="line"><span class="function">) ENGINE </span>= InnoDB</span><br><span class="line">  DEFAULT CHARSET = utf8;</span><br><span class="line">CREATE TABLE `country`</span><br><span class="line">(</span><br><span class="line">    `country_id`   <span class="keyword">int</span>(<span class="number">11</span>)      NOT NULL AUTO_INCREMENT,</span><br><span class="line">    `country_name` varchar(<span class="number">100</span>) NOT NULL,</span><br><span class="line"></span><br><span class="line">    <span class="function">PRIMARY <span class="title">KEY</span> <span class="params">(`country_id`)</span></span></span><br><span class="line"><span class="function">) ENGINE </span>= InnoDB</span><br><span class="line">  DEFAULT CHARSET = utf8;</span><br><span class="line"></span><br><span class="line">insert into `city` (`city_id`, `city_name`, `country_id`)</span><br><span class="line">values (<span class="number">1</span>, <span class="string">&#x27;西安&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">insert into `city` (`city_id`, `city_name`, `country_id`)</span><br><span class="line">values (<span class="number">2</span>, <span class="string">&#x27;NewYork&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">insert into `city` (`city_id`, `city_name`, `country_id`)</span><br><span class="line">values (<span class="number">3</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">insert into `city` (`city_id`, `city_name`, `country_id`)</span><br><span class="line">values (<span class="number">4</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">insert into `country` (`country_id`, `country_name`)</span><br><span class="line">values (<span class="number">1</span>, <span class="string">&#x27;China&#x27;</span>);</span><br><span class="line">insert into `country` (`country_id`, `country_name`)</span><br><span class="line">values (<span class="number">2</span>, <span class="string">&#x27;America&#x27;</span>);</span><br><span class="line">insert into `country` (`country_id`, `country_name`)</span><br><span class="line">values (<span class="number">3</span>, <span class="string">&#x27;Japan&#x27;</span>);</span><br><span class="line">insert into `country` (`country_id`, `country_name`)</span><br><span class="line">values (<span class="number">4</span>, <span class="string">&#x27;UK&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、创建索引"><a href="#2、创建索引" class="headerlink" title="2、创建索引"></a>2、创建索引</h3><blockquote><p>语法：</p><p>CREATE [UNIQUE | FULLTEXT | SPATIAL] INDEX index_name</p><p>[USING index_type]</p><p>on tbl_name(index_col_name,…)</p><p>index_col_name : column_name[(length)] [ASC | DESC]</p></blockquote><ul><li>[UNIQUE | FULLTEXT | SPATIAL]</li></ul><blockquote><p>UNIQUE：唯一索引</p><p>FULLTEXT：全文索引</p><p>SPATIAL：空间索引</p></blockquote><ul><li>[index_type]</li></ul><blockquote><p>可选，如果不指定默认使用BTree索引</p></blockquote><ul><li>tbl_name(index_col_name,…)</li></ul><blockquote><p>为哪张表的那些字段创建索引。</p></blockquote><ul><li>为city表的 city_name 字段创建索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX idx_city_name ON &#96;city&#96; (city_name);</span><br></pre></td></tr></table></figure><h3 id="2、查看索引"><a href="#2、查看索引" class="headerlink" title="2、查看索引"></a>2、查看索引</h3><ul><li>语法如下</li></ul><blockquote><p>show index from 要查看的表;</p></blockquote><ul><li>查看city表中的索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show index from &#96;city&#96;;</span><br></pre></td></tr></table></figure><blockquote><p>执行 sql语句，结果如下，可以看到city表下有两个索引。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306171002.png" alt="image-20210306171001423"></p><h3 id="3、删除索引"><a href="#3、删除索引" class="headerlink" title="3、删除索引"></a>3、删除索引</h3><ul><li>语法如下</li></ul><blockquote><p>drop index 索引名 on 表名;</p></blockquote><ul><li>删除我们刚才在city表中为 city_name 创建的索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index idx_city_name on &#96;city&#96;;</span><br></pre></td></tr></table></figure><ul><li>再次运行查看索引指令，查看结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show index from &#96;city&#96;;</span><br></pre></td></tr></table></figure><blockquote><p>此时可以发现只剩下 PRIMARY 索引</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306171442.png" alt="image-20210306171441899"></p><h3 id="4、使用ALTER命令来创建索引"><a href="#4、使用ALTER命令来创建索引" class="headerlink" title="4、使用ALTER命令来创建索引"></a>4、使用ALTER命令来创建索引</h3><ul><li>使用 <strong>ALTER</strong> 命令创建一个主键索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table &#96;tb_name&#96; add primary key(字段列表);</span><br></pre></td></tr></table></figure><blockquote><p>该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL</p></blockquote><ul><li>使用 <strong>ALTER</strong> 命令创建一个唯一索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table &#96;tb_name&#96; add unique 索引名(字段列表);</span><br></pre></td></tr></table></figure><blockquote><p>这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）</p></blockquote><ul><li>使用 <strong>ALTER</strong> 命令创建一个普通索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table &#96;tb_name&#96; add index 索引名(字段列表);</span><br></pre></td></tr></table></figure><blockquote><p>添加普通索引， 索引值可以出现多次。</p></blockquote><ul><li>使用 <strong>ALTER</strong> 命令创建一个全文索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tb_nameaddfulltext 索引名(字段列表);</span><br></pre></td></tr></table></figure><blockquote><p>该语句指定了索引为FULLTEXT， 用于全文索引</p></blockquote><h3 id="5、如何查看一个索引是不是唯一索引"><a href="#5、如何查看一个索引是不是唯一索引" class="headerlink" title="5、如何查看一个索引是不是唯一索引"></a>5、如何查看一个索引是不是唯一索引</h3><blockquote><p>查看该表的索引</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use index_study;</span><br><span class="line">create index idx_city_name on &#96;city&#96;(city_name);</span><br><span class="line">show index from &#96;city&#96;;</span><br></pre></td></tr></table></figure><blockquote><p>执行结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306172658.png" alt="image-20210306172658202"></p><h2 id="1-6、索引设计原则"><a href="#1-6、索引设计原则" class="headerlink" title="1.6、索引设计原则"></a>1.6、索引设计原则</h2><blockquote><p>​       索引的设计可以遵循一些已有的原则，创建索引的时候请尽量考虑符合这些原则，便于提升索引的使用效率，更高效的使用索引。</p></blockquote><ul><li><p>对<strong>查询频次较高，且数据量比较大的表</strong>建立索引。</p></li><li><p>索引字段的选择，最佳候选列应当从where子句的条件中提取，如果where子句中的组合比较多，那么应当挑选最常用、过滤效果最好的列的组合（<strong>针对查询字段设计索引</strong>）</p></li><li><p>使用唯一索引，区分度越高，使用索引的效率越高。</p></li><li><p>索引可以有效的提升查询数据的效率，但索引数量不是多多益善，索引越多，维护索引的代价自然也就水涨船高。对于插入、更新、删除等DML操作比较频繁的表来说，索引过多，会引入相当高的维护代价，降低</p></li><li><p>DML（如insert、update、delete）操作的效率，增加相应操作的时间消耗。另外索引过多的话，MySQL也会犯选择困难病，虽然最终仍然会找到一个可用的索引，但无疑提高了选择的代价。</p></li><li><p><strong>使用短索引</strong>，索引创建之后也是使用硬盘来存储的，因此提升索引访问的I/O效率，也可以提升总体的访问效率。假如构成索引的字段总长度比较短，那么在给定大小的存储块内可以存储更多的索引值，相应的可以有效的提升MySQL访问索引的I/O效率。</p></li><li><p>（针对复合索引）利用最左前缀，N个列组合而成的组合索引，那么相当于是创建了N个索引，如果查询时where子句中使用了组成该索引的前几个字段，那么这条查询SQL可以利用组合索引来提升查询效率。</p></li></ul><blockquote><p>如果创建复合索引idx，这个索引作用于 NAME、EMAIL和STATUS上，那么：</p><p>相当于对NAME创建了索引。</p><p>对NAME、EMAIL创建了索引</p><p>对NAME、EMAIL和STATUS创建了索引。</p><p><strong>只要在查询时包含了第一个字段NAME，那么查询就会走索引。</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306173547.png" alt="image-20210306173547319"></p><h3 id="1、哪些情况下需要创建索引"><a href="#1、哪些情况下需要创建索引" class="headerlink" title="1、哪些情况下需要创建索引"></a>1、哪些情况下需要创建索引</h3><ul><li><p>主键自动建立唯一索引</p></li><li><p>频繁作为查询条件的字段应该创建索引(where 后面的语句)</p></li><li><p>查询中与其它表关联的字段，外键关系建立索引</p></li><li><p><strong>查询中排序的字段</strong>，排序字段若通过索引去访问将大大提高排序速度</p></li><li><p>查询中统计或者分组字段</p></li><li><p>对于单键和组合索引，在高并发条件下倾向于创建组合索引</p></li></ul><h3 id="2、哪些情况下不需要创建索引"><a href="#2、哪些情况下不需要创建索引" class="headerlink" title="2、哪些情况下不需要创建索引"></a>2、哪些情况下不需要创建索引</h3><ul><li>数据量不大的表</li><li>经常增删改的表</li></ul><blockquote><p>提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。</p><p>因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件</p></blockquote><ul><li>数据重复且分布平均的表字段</li></ul><blockquote><p>因此应该只为最经常查询和最经常排序的数据列建立索引。</p><p>注意，如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果。</p><p>如：性别和国籍</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210312213446.png" alt="img"></p><h2 id="1-7、关于MySQL中BTree索引的一些补充"><a href="#1-7、关于MySQL中BTree索引的一些补充" class="headerlink" title="1.7、关于MySQL中BTree索引的一些补充"></a>1.7、关于MySQL中BTree索引的一些补充</h2><blockquote><p>我们使用术语 <code>B-Tree</code> ，是因为 MySQL 在CREATE TABLE 和其他语句时也是用该关键字。</p><p>不过，底层的存储引擎也可能使用不同的存储结构</p><p>例如， <code>NOB</code> 集群存储引擎内部时机上使用了 <code>T-Tree</code> 结构存储这种索引，即使其名字为 <code>BTree</code> ；</p><p><code>InnoDB</code> 则使用的是 <code>B+Tree</code> 。</p></blockquote><h3 id="1、创建一张数据表"><a href="#1、创建一张数据表" class="headerlink" title="1、创建一张数据表"></a>1、创建一张数据表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE table People (</span><br><span class="line">    &#96;last_name&#96; varchar(50) not null,</span><br><span class="line">    &#96;first_name&#96; varchar(50) not null,</span><br><span class="line">    &#96;birthday&#96; date not null,</span><br><span class="line">    &#96;gender&#96; enum(&#39;m&#39;,&#39;f&#39;) not null,</span><br><span class="line">    key(last_name,first_name,birthday) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>对于表中的每一行数据，索引中包含了 <code>last_name</code> 、<code>first_name</code> 和 <code>birthday</code> 列的值，下图显示了索引是如何组织数据的存储的。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210308104848.png" alt="image-20210308104834889"></p><h3 id="2、索引有效的查询"><a href="#2、索引有效的查询" class="headerlink" title="2、索引有效的查询"></a>2、索引有效的查询</h3><ul><li>全值匹配</li></ul><blockquote><p>全值匹配指的是和索引中的所有列（上表是<code>last_name,first_name,birthday</code>），例如前面提到的索引可以用于查找 姓名为 <strong>李小明</strong>、出生于2000-10-31的人。</p></blockquote><ul><li>匹配最左前缀</li></ul><blockquote><p>前面提到的索引可以用于查找所有姓为 <strong>刘</strong> 的人，即使用索引的第一列。</p></blockquote><ul><li>匹配列前缀</li></ul><blockquote><p>也可以只匹配某一列的开头部分，如前面提到的索引可以用于可以用于查找所有以 <strong>J</strong> 开头的姓的人。这里也使用了索引的第一列。</p></blockquote><ul><li>匹配范围值</li></ul><blockquote><p>例如前面提到的索引可用于查找姓在 <code>Allen</code> 和 <code>Barrymore</code> 之间的人。这里使用了索引的第一列。</p></blockquote><ul><li>精确匹配某一列而范围匹配另一列</li></ul><blockquote><p>查找条件与索引第一列 <code>last_name</code> 全匹配，与索引第二列 <code>last_name</code> 范围匹配</p></blockquote><h3 id="3、B-Tree索引的限制"><a href="#3、B-Tree索引的限制" class="headerlink" title="3、B-Tree索引的限制"></a>3、B-Tree索引的限制</h3><ul><li>如果不是按照索引的最左列开始查找,则无法使用索引。</li></ul><blockquote><p>例如上面例子中的索引无法用于查找名字为Bill人,也无法查找某个特定生日的人,因为这两列都不是最左数据列。类似地,也无法查找姓氏以某个字母结尾的人。</p></blockquote><ul><li>不能跳过索引中的列。</li></ul><blockquote><p>也就是说,前面所述的索引无法用于查找姓为 Smith并且在某个特定日期出生的人。如果不指定名( first name),则 MySQL只能使用索引的第一列</p></blockquote><ul><li>如果查询中有某个列的范围查询,则其右边所有列都无法使用索引优化查找。</li></ul><blockquote><p>例如有查询 WHERE Last name=’ Smith’ AND first name LIKE ‘%J%’  and birthday=’1976-12-23’,这个查询只能使用索引的前两列,因为这里LIKE是一个范围条件(但是服务器可以把其余列用于其他目的)。如果范围查询列值的数量有限,那么可以通过使用多个等于条件来代替范围条件.</p></blockquote><h1 id="二、视图"><a href="#二、视图" class="headerlink" title="二、视图"></a>二、视图</h1><h2 id="2-1、视图概述"><a href="#2-1、视图概述" class="headerlink" title="2.1、视图概述"></a>2.1、视图概述</h2><blockquote><p><strong>视图（View）是一种虚拟存在的表</strong>。视图并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。通俗的讲，<strong>视图就是一条SELECT语句执行后返回的结果集。</strong>所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。</p><p>视图相对于普通的表的优势主要包括以下几项。</p></blockquote><ul><li><p>简单：使用视图的用户完全不需要关心后面对应的表的结构、关联条件和筛选条件，对用户来说已经是过滤好的复合条件的结果集。</p></li><li><p>安全：使用视图的用户只能访问他们被允许查询的结果集，对表的权限管理并不能限制到某个行某个列，但是通过视图就可以简单的实现。</p></li><li><p>数据独立：一旦视图的结构确定了，可以屏蔽表结构变化对用户的影响，源表增加列对视图没有影响；源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响。</p></li></ul><h2 id="2-2、创建或者修改视图"><a href="#2-2、创建或者修改视图" class="headerlink" title="2.2、创建或者修改视图"></a>2.2、创建或者修改视图</h2><h3 id="1、创建视图的语法"><a href="#1、创建视图的语法" class="headerlink" title="1、创建视图的语法"></a>1、创建视图的语法</h3><blockquote><p>CREATE [OR REPLACE] [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}] </p><p>VIEW view_name [(column_list)] </p><p>AS select_statement </p><p>[WITH [CASCADED | LOCAL] CHECK OPTION]</p></blockquote><ul><li>创建一个视图，展示城市和国家的相关信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create view view_country ASSELECT c1.*,</span><br><span class="line">        c2.country_name</span><br><span class="line">FROM city AS c1</span><br><span class="line">JOIN country AS c2</span><br><span class="line">    ON c1.country_id &#x3D; c2.country_id; </span><br></pre></td></tr></table></figure><ul><li>视图是一张虚<strong>表</strong>，我们可以使用操作表的语句来操作视图</li><li>查询表中所有数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from view_country;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306194224.png" alt="image-20210306194217169"></p><h3 id="2、通过视图更新基表数据"><a href="#2、通过视图更新基表数据" class="headerlink" title="2、通过视图更新基表数据"></a>2、通过视图更新基表数据</h3><blockquote><p>如果视图包含下述结构中的任何一种，那么它就是不可更新的：</p></blockquote><ul><li>聚合函数；</li><li>DISTINCT关键字；</li><li>GROUP BY子句；</li><li>ORDER BY子句；</li><li>HAVING子句；</li><li>UNION运算符；</li><li>位于选择列表中的子查询；</li><li>FROM子句中包含多个表；</li><li>SELECT语句中引用了不可更新视图；</li><li>WHERE子句中的子查询，引用FROM子句中的表；</li><li>ALGORITHM 选项指定为TEMPTABLE（使用临时表总会使视图成为不可更新的）。</li></ul><blockquote><p><strong>不建议更新视图。</strong></p></blockquote><h3 id="3、修改视图的语法"><a href="#3、修改视图的语法" class="headerlink" title="3、修改视图的语法"></a>3、修改视图的语法</h3><blockquote><p>ALTER [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}]</p><p>VIEW view_name [(column_list)] </p><p>AS select_statement </p><p>[WITH [CASCADED | LOCAL] CHECK OPTION]</p></blockquote><ul><li>修改上面创建的视图，改为查询city表中的<code>city_id</code> 和 <code>city_name</code> 字段</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ALTER VIEW view_country</span><br><span class="line">AS</span><br><span class="line">SELECT city_id, city_name</span><br><span class="line">FROM city;</span><br></pre></td></tr></table></figure><ul><li>查询修改后的视图</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from view_country;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306195645.png" alt="image-20210306195645056"></p><h3 id="4、查看视图"><a href="#4、查看视图" class="headerlink" title="4、查看视图"></a>4、查看视图</h3><blockquote><p>从 MySQL 5.1 版本开始，使用 SHOW TABLES 命令的时候不仅显示表的名字，同时也会显示视图的名字，而不存在单独显示视图的 SHOW  VIEWS 命令。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306200016.png" alt="image-20210306200016218"></p><blockquote><p>同样，在使用 SHOW TABLE STATUS 命令的时候，不但可以显示表的信息，同时也可以显示视图的信息。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306200047.png" alt="image-20210306200047809"></p><blockquote><p>如果需要查询某个视图的定义，可以使用 SHOW CREATE VIEW 命令进行查看 ：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306200114.png" alt="image-20210306200114777"></p><ul><li>查看创建视图时使用的SQL语句</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create view view_country;</span><br></pre></td></tr></table></figure><blockquote><p>查看结果，在结果的Create View那一列中可以看到执行的sql语句：</p><p>CREATE ALGORITHM=UNDEFINED DEFINER=<code>root</code>@<code>localhost</code> SQL SECURITY DEFINER VIEW <code>view_country</code> AS select <code>city</code>.<code>city_id</code> AS <code>city_id</code>,<code>city</code>.<code>city_name</code> AS <code>city_name</code> from <code>city</code></p></blockquote><h3 id="5、删除视图"><a href="#5、删除视图" class="headerlink" title="5、删除视图"></a>5、删除视图</h3><blockquote><p>语法：</p><p>DROP VIEW [IF EXISTS] view_name [, view_name] …[RESTRICT | CASCADE]</p></blockquote><ul><li>删除视图 view_country</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop view if exists view_country;</span><br></pre></td></tr></table></figure><blockquote><p>此时执行show tables，发现视图已经被删除</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306201859.png" alt="image-20210306201859079"></p><h1 id="三、存储过程和函数"><a href="#三、存储过程和函数" class="headerlink" title="三、存储过程和函数"></a>三、存储过程和函数</h1><h2 id="3-1、存储过程和函数概述"><a href="#3-1、存储过程和函数概述" class="headerlink" title="3.1、存储过程和函数概述"></a>3.1、存储过程和函数概述</h2><blockquote><p>​       存储过程和函数是<strong>事先经过编译并存储在数据库中的一段 SQL 语句的集合</strong>，调用存储过程和函数可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。</p><p>存储过程和函数的区别在于函数必须有返回值，而存储过程没有。</p></blockquote><ul><li><p>函数 ： 是一个有返回值的存储过程 ；</p></li><li><p>存储过程 ： 是一个没有返回值的函数 ；</p></li></ul><h2 id="3-2、创建存储过程"><a href="#3-2、创建存储过程" class="headerlink" title="3.2、创建存储过程"></a>3.2、创建存储过程</h2><blockquote><p>语法如下：</p><p>CREATE PROCEDURE procedure_name ([proc_parameter[,…]])</p><p>begin</p><p>– SQL语句</p><p>end ;</p></blockquote><ul><li>示例</li></ul><blockquote><p>这里需要先指定分隔符，将分隔符定义为 “$”</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line">create procedure myprodure ()</span><br><span class="line">begin</span><br><span class="line">    select &#39;芜湖起飞&#39;;</span><br><span class="line">end$</span><br></pre></td></tr></table></figure><h2 id="3-3、调用存储过程"><a href="#3-3、调用存储过程" class="headerlink" title="3.3、调用存储过程"></a>3.3、调用存储过程</h2><blockquote><p>语法如下：</p><p>call 存储过程名() 定义的分隔符</p></blockquote><ul><li>调用上面定义的存储过程myprodure</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line">call myprodure()$</span><br></pre></td></tr></table></figure><blockquote><p>执行结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306205245.png" alt="image-20210306205245227"></p><h2 id="3-4、查询存储过程"><a href="#3-4、查询存储过程" class="headerlink" title="3.4、查询存储过程"></a>3.4、查询存储过程</h2><blockquote><p>– 查询db_name数据库中的所有的存储过程</p><p>select name from mysql.proc where db=’db_name’; </p><p>– 查询存储过程的状态信息</p><p>show procedure status; </p><p>– 查询某个存储过程的定义</p><p>show create procedure test.pro_test1 \G;</p></blockquote><ul><li>查看存储过程的状态</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show procedure status;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306221935.png" alt="image-20210306221934288"></p><ul><li>查看<code>myprocedure</code>存储过程的定义</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create procedure myprodure;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306222219.png" alt="image-20210306222219461"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE DEFINER&#x3D;&#96;root&#96;@&#96;localhost&#96; PROCEDURE &#96;myprodure&#96;()</span><br><span class="line">begin</span><br><span class="line">    select &#39;芜湖起飞&#39;;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li>和视图一样，可以使用数据库可视化工具查询存储过程，这里使用的数据库可视化工具是 <code>DataGrip</code></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306222533.png" alt="image-20210306222533214"></p><h2 id="3-5、删除存储过程"><a href="#3-5、删除存储过程" class="headerlink" title="3.5、删除存储过程"></a>3.5、删除存储过程</h2><blockquote><p>DROP PROCEDURE [IF EXISTS] 存储过程名字 ；</p></blockquote><ul><li>删除上面创建的存储过程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop procedure if exists index_study.myprodure;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306224444.png" alt="image-20210306224444718"></p><h2 id="3-6、存储过程传递参数"><a href="#3-6、存储过程传递参数" class="headerlink" title="3.6、存储过程传递参数"></a>3.6、存储过程传递参数</h2><h3 id="1、语法结构"><a href="#1、语法结构" class="headerlink" title="1、语法结构"></a>1、语法结构</h3><blockquote><p>create procedure procedure_name([in/out/inout] 参数名  参数类型</p><p>…</p><p>IN :    该参数可以作为输入，也就是需要调用方传入值 , 默认</p><p>OUT:    该参数作为输出，也就是该参数可以作为返回值</p><p>INOUT: 既可以作为输入参数，也可以作为输出参数</p></blockquote><h3 id="2、示例"><a href="#2、示例" class="headerlink" title="2、示例"></a>2、示例</h3><ul><li>根据传入的身高变量，获取当前身高的所属的身材类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line">create procedure myprocedure(in height int,out &#96;desc&#96; varchar(100))</span><br><span class="line">begin</span><br><span class="line">    if height &gt;&#x3D; 180 then</span><br><span class="line">        set &#96;desc&#96; &#x3D; &#39;身材高挑&#39;;</span><br><span class="line">    elseif height &gt;&#x3D; 170 and height &lt; 180 then</span><br><span class="line">        set &#96;desc&#96; &#x3D; &#39;身材标准&#39;;</span><br><span class="line">    else</span><br><span class="line">        set &#96;desc&#96; &#x3D; &#39;身材一般&#39;;</span><br><span class="line">    end if;</span><br><span class="line">end$</span><br></pre></td></tr></table></figure><blockquote><p>调用存储过程</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call myprocedure(175,@desc);</span><br><span class="line">select @&#96;desc&#96;;</span><br></pre></td></tr></table></figure><blockquote><p>查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306232054.png" alt="image-20210306232047574"></p><blockquote><p>@description : 这种变量要在变量名称前面加上“@”符号，叫做用户会话变量，代表整个会话过程他都是有作用的，这个类似于全局变量一样。</p><p>@@global.sort_buﬀer_size : 这种在变量前加上 “@@” 符号, 叫做 系统变量</p></blockquote><h2 id="3-7、存储函数"><a href="#3-7、存储函数" class="headerlink" title="3.7、存储函数"></a>3.7、存储函数</h2><h3 id="1、语法结构-1"><a href="#1、语法结构-1" class="headerlink" title="1、语法结构"></a>1、语法结构</h3><blockquote><p>CREATE FUNCTION function_name([param type … ])</p><p>RETURNS type</p><p>BEGIN    </p><p>…</p><p>END;</p></blockquote><h3 id="2、示例-1"><a href="#2、示例-1" class="headerlink" title="2、示例"></a>2、示例</h3><ul><li>定义一个函数，获取满足条件（city）的总记录数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create function fun1(countryId int)</span><br><span class="line">returns int</span><br><span class="line">begin</span><br><span class="line">    declare cnum int;</span><br><span class="line">    select count(*) into cnum from city where country_id &#x3D; countryId;</span><br><span class="line">    return cnum;</span><br><span class="line">end$</span><br></pre></td></tr></table></figure><blockquote><p>由于函数有返回值，所以可以使用<code>select</code> 输出结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select fun1(1)$</span><br></pre></td></tr></table></figure><blockquote><p>结果为：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210306234131.png" alt="image-20210306234131066"></p><h1 id="四、触发器"><a href="#四、触发器" class="headerlink" title="四、触发器"></a>四、触发器</h1><h2 id="4-1、介绍"><a href="#4-1、介绍" class="headerlink" title="4.1、介绍"></a>4.1、介绍</h2><blockquote><p>触发器是与表有关的数据库对象，<strong>指在 insert/update/delete 之前或之后，触发并执行触发器中定义的SQL语句集合。</strong>触发器的这种特性可以协助应用在数据库端确保数据的完整性 , 日志记录 , 数据校验等操作 。</p><p>使用别名 OLD 和 NEW 来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发，不支持语句级触发。</p></blockquote><table><thead><tr><th><strong>触发器类型</strong></th><th>NEW和OLD的使用</th></tr></thead><tbody><tr><td>INSERT 型触发器</td><td>NEW  表示将要或者已经新增的数据</td></tr><tr><td>UPDATE 型触发器</td><td>OLD 表示修改之前的数据 , NEW 表示将要或已经修改后的数据</td></tr><tr><td>DELETE 型触发器</td><td>OLD  表示将要或者已经删除的数据</td></tr></tbody></table><h2 id="4-2、创建触发器"><a href="#4-2、创建触发器" class="headerlink" title="4.2、创建触发器"></a>4.2、创建触发器</h2><h3 id="1、语法结构："><a href="#1、语法结构：" class="headerlink" title="1、语法结构："></a>1、语法结构：</h3><blockquote><p>create  trigger  trigger_name</p><p>before/after  insert/update/delete</p><p>on tbl_name</p><p>[ for each row ]    – 行级触发器</p><p>begin</p><p>​    要执行的语句</p><p>end;</p></blockquote><h3 id="2、示例-2"><a href="#2、示例-2" class="headerlink" title="2、示例"></a>2、示例</h3><blockquote><p>需求：通过触发器记录 <code>emp</code> 表的数据变更日志 <code>emp_logs</code>，包括增加，修改和删除</p></blockquote><h3 id="3、准备emp脚本"><a href="#3、准备emp脚本" class="headerlink" title="3、准备emp脚本"></a>3、准备<code>emp</code>脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">create table emp</span><br><span class="line">(</span><br><span class="line">    id     int(11)     not null auto_increment,</span><br><span class="line">    name   varchar(50) not null comment &#39;姓名&#39;,</span><br><span class="line">    age    int(11) comment &#39;年龄&#39;,</span><br><span class="line">    salary int(11) comment &#39;薪水&#39;,</span><br><span class="line">    primary key (&#96;id&#96;)</span><br><span class="line">) engine &#x3D; innodb</span><br><span class="line">  default charset &#x3D; utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into emp(id, name, age, salary)</span><br><span class="line">values (null, &#39;金毛狮王&#39;, 55, 3800),</span><br><span class="line">       (null, &#39;白眉鹰王&#39;, 60, 4000),</span><br><span class="line">       (null, &#39;青翼蝠王&#39;, 38, 2800),</span><br><span class="line">       (null, &#39;紫衫龙王&#39;, 42, 1800);</span><br></pre></td></tr></table></figure><h3 id="4、创建一张日志表"><a href="#4、创建一张日志表" class="headerlink" title="4、创建一张日志表"></a>4、创建一张日志表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table emp_logs</span><br><span class="line">(</span><br><span class="line">    id             int(11)     not null auto_increment,</span><br><span class="line">    operation      varchar(20) not null comment &#39;操作类型, insert&#x2F;update&#x2F;delete&#39;,</span><br><span class="line">    operate_time   datetime    not null comment &#39;操作时间&#39;,</span><br><span class="line">    operate_id     int(11)     not null comment &#39;操作表的ID&#39;,</span><br><span class="line">    operate_params varchar(500) comment &#39;操作参数&#39;,</span><br><span class="line">    primary key (&#96;id&#96;)</span><br><span class="line">) engine &#x3D; innodb</span><br><span class="line">  default charset &#x3D; utf8;</span><br></pre></td></tr></table></figure><h3 id="5、创建-insert-触发器"><a href="#5、创建-insert-触发器" class="headerlink" title="5、创建 insert 触发器"></a>5、创建 <code>insert</code> 触发器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create trigger emp_logs_insert_trigger</span><br><span class="line">    after insert</span><br><span class="line">    on &#96;emp&#96;</span><br><span class="line">    for each row</span><br><span class="line">begin</span><br><span class="line">    insert into emp_logs (id, operation, operate_time, operate_id, operate_params)</span><br><span class="line">    values (null, &#39;insert&#39;, now(), new.id,</span><br><span class="line">            concat(&#39;插入后(id:&#39;, new.id, &#39;, name:&#39;, new.name, &#39;, age:&#39;, new.age, &#39;,  salary:&#39;, new.salary, &#39;)&#39;));</span><br><span class="line">end$</span><br></pre></td></tr></table></figure><ul><li>测试触发器，执行一条 <code>insert</code> 语句</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into emp(id,name,age,salary) values(null, &#39;光明右使&#39;,33,3200); </span><br></pre></td></tr></table></figure><ul><li>现在查看 <code>emp_logs</code> 表，发现有了一条记录</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210307003100.png" alt="image-20210307003100615"></p><h3 id="6、创建-update-触发器"><a href="#6、创建-update-触发器" class="headerlink" title="6、创建 update 触发器"></a>6、创建 <code>update</code> 触发器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">create trigger emp_logs_update_trigger</span><br><span class="line">    after update</span><br><span class="line">    on &#96;emp&#96;</span><br><span class="line">    for each row</span><br><span class="line">begin</span><br><span class="line">    insert into emp_logs (id, operation, operate_time, operate_id, operate_params)</span><br><span class="line">    values (null, &#39;update&#39;, now(), new.id,</span><br><span class="line">            concat(&#39;更新前(id:&#39;, OLD.id,</span><br><span class="line">                        &#39;, name:&#39;, OLD.name,</span><br><span class="line">                        &#39;, age:&#39;, OLD.age,</span><br><span class="line">                        &#39;,  salary:&#39;, OLD.salary, &#39;),&#39;</span><br><span class="line">                   &#39;更新后(id:&#39;, NEW.id,</span><br><span class="line">                        &#39;, name:&#39;, NEW.name,</span><br><span class="line">                        &#39;, age:&#39;, NEW.age,</span><br><span class="line">                        &#39;,  salary:&#39;, NEW.salary, &#39;)&#39;</span><br><span class="line">                ));</span><br><span class="line">end$</span><br></pre></td></tr></table></figure><ul><li>测试触发器，更新一条数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update emp set age &#x3D; 39 where id &#x3D; 3;</span><br></pre></td></tr></table></figure><ul><li>查看 <code>emp_logs</code> 表</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210307004444.png" alt="image-20210307004443553"></p><blockquote><p>emp_logs表中operate_params记录如下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210307004554.png" alt="image-20210307004554610"></p><h3 id="7、创建删除触发器"><a href="#7、创建删除触发器" class="headerlink" title="7、创建删除触发器"></a>7、创建删除触发器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">create trigger emp_logs_delete_trigger</span><br><span class="line">    after delete</span><br><span class="line">    on &#96;emp&#96;</span><br><span class="line">    for each row</span><br><span class="line">begin</span><br><span class="line">    insert into emp_logs (id, operation, operate_time, operate_id, operate_params)</span><br><span class="line">    values (null, &#39;delete&#39;, now(), OLD.id,</span><br><span class="line">            concat(&#39;删除前(id:&#39;, OLD.id,</span><br><span class="line">                        &#39;, name:&#39;, OLD.name,</span><br><span class="line">                        &#39;, age:&#39;, OLD.age,</span><br><span class="line">                        &#39;,  salary:&#39;, OLD.salary, &#39;)&#39;</span><br><span class="line">                ));</span><br><span class="line">end$</span><br></pre></td></tr></table></figure><ul><li>测试触发器，删除一条数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from emp where id &#x3D; 3;</span><br></pre></td></tr></table></figure><ul><li>查看 <code>emp_logs</code> 表</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210307005623.png" alt="image-20210307005623544"></p><h2 id="4-3、查看触发器"><a href="#4-3、查看触发器" class="headerlink" title="4.3、查看触发器"></a>4.3、查看触发器</h2><blockquote><p>可以通过执行 <code>SHOW TRIGGERS</code> 命令来查看触发器的状态、语法等信息。</p></blockquote><h3 id="1、语法结构-2"><a href="#1、语法结构-2" class="headerlink" title="1、语法结构"></a>1、语法结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show triggers;</span><br></pre></td></tr></table></figure><h3 id="2、示例-3"><a href="#2、示例-3" class="headerlink" title="2、示例"></a>2、示例</h3><blockquote><p>查看上面创建的触发器</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210315215150.png" alt="image-20210315215150402"></p><blockquote><p>在<code>Statement</code>中封装了定义语句，这里以插入触发器为例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">begin</span><br><span class="line">    insert into emp_logs (id, operation, operate_time, operate_id, operate_params)</span><br><span class="line">    values (null, &#39;insert&#39;, now(), new.id,</span><br><span class="line">            concat(&#39;插入后(id:&#39;, new.id, &#39;, name:&#39;, new.name, &#39;, age:&#39;, new.age, &#39;,  salary:&#39;, new.salary, &#39;)&#39;));</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="4-4、删除触发器"><a href="#4-4、删除触发器" class="headerlink" title="4.4、删除触发器"></a>4.4、删除触发器</h2><h3 id="1、语法"><a href="#1、语法" class="headerlink" title="1、语法"></a>1、语法</h3><blockquote><p>drop trigger [数据库名.]触发器名</p><p>如果不指定数据库名，那么默认删除当前表的触发器。</p></blockquote><h3 id="2、示例-4"><a href="#2、示例-4" class="headerlink" title="2、示例"></a>2、示例</h3><blockquote><p>删除<code>emp</code>表中的<code>insert</code>触发器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop trigger index_study.emp_logs_insert_trigger;</span><br></pre></td></tr></table></figure><blockquote><p>此时再次使用 <strong>show triggers</strong> 查看触发器</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210315215134.png" alt="image-20210315215134287"></p><blockquote><p>笔记主要参考来源如下：</p></blockquote><ul><li>[1]  <a href="https://www.bilibili.com/video/BV1UQ4y1P7Xr">黑马程序员-MySQL高级</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🤓数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法学习（七）-ConcurrentHashMap源码解读</title>
      <link href="posts/2912697261.html"/>
      <url>posts/2912697261.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、JDK8ConcurrentHashMap初始化"><a href="#一、JDK8ConcurrentHashMap初始化" class="headerlink" title="一、JDK8ConcurrentHashMap初始化"></a>一、JDK8ConcurrentHashMap初始化</h1><h2 id="1-1、源码分析"><a href="#1-1、源码分析" class="headerlink" title="1.1、源码分析"></a>1.1、源码分析</h2><blockquote><p>在 <strong>JDK8</strong> 的 ConcurrentHashMap 中一个有五个构造方法，和 JDK8 的 HashMap 一样，这五个构造方法中都没有对 Map 内部的 <strong>Node</strong> 数组进行初始化，只是对一些变量的初始值做了处理。</p><p><strong>JDK8 的 ConcurrentHashMap 的 Node 数组初始化是在第一次添加元素时完成的。</strong></p></blockquote><h3 id="1、无参构造函数"><a href="#1、无参构造函数" class="headerlink" title="1、无参构造函数"></a>1、无参构造函数</h3><blockquote><p>创建一个<strong>新</strong>的、<strong>空</strong>的，<strong>数组长度为初始化长度（16）</strong>的ConcurrentHashMap对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new, empty map with the default initial table size (16).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ConcurrentHashMap的数组默认初始化长度为 <code>16</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default initial table capacity.  Must be a power of 2</span></span><br><span class="line"><span class="comment"> * (i.e., at least 1) and at most MAXIMUM_CAPACITY.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">16</span>;</span><br></pre></td></tr></table></figure><h3 id="2、传入初始容量的构造函数"><a href="#2、传入初始容量的构造函数" class="headerlink" title="2、传入初始容量的构造函数"></a>2、传入初始容量的构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new, empty map with an initial table size</span></span><br><span class="line"><span class="comment"> * accommodating the specified number of elements without the need</span></span><br><span class="line"><span class="comment"> * to dynamically resize.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> initialCapacity The implementation performs internal</span></span><br><span class="line"><span class="comment"> * sizing to accommodate this many elements.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity of</span></span><br><span class="line"><span class="comment"> * elements is negative</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">int</span> cap = ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ?</span><br><span class="line">               MAXIMUM_CAPACITY :</span><br><span class="line">               tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">this</span>.sizeCtl = cap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>ConcurrentHashMap</strong> 会基于传入的 <code>initialCapacity</code> 计算一个<strong>比这个值大且为2的幂次方的整数</strong>作为 ConcurrentHashMap 的<strong>初始容量</strong>。</p><p>和 <strong>HashMap</strong> 一样，这个功能由 <code>tableSizeFor</code> 方法完成</p><p>但在ConcurrentHashMap中，即使传入的初始容量 <code>initialCapacity</code> 为2的幂次方，在经过 <code>tableSizeFor</code> 方法后也会返回一个比 <code>initialCapacity</code> 大的且为2的幂次方的值。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210304220258.png" alt="image-20210304220256402"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a power of two table size for the given desired capacity.</span></span><br><span class="line"><span class="comment"> * See Hackers Delight, sec 3.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = c - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>类比上面的 <code>tableSizeFor</code> 方法和  <strong>构造方法</strong> 进行测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentHashMapStudy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(getCapacity(<span class="number">32</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tableSizeFor(n + (n &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = c - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210304221040.png" alt="image-20210304221040912"></p><h3 id="3、含有三个参数的构造方法"><a href="#3、含有三个参数的构造方法" class="headerlink" title="3、含有三个参数的构造方法"></a>3、含有三个参数的构造方法</h3><blockquote><p>这三个参数分别为：<code>initialCapacity</code> （初始容量）、 <code>loadFactor</code> （负载因子） 和 <code>concurrencyLevel</code> </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new, empty map with an initial table size based on</span></span><br><span class="line"><span class="comment"> * the given number of elements (&#123;<span class="doctag">@code</span> initialCapacity&#125;), table</span></span><br><span class="line"><span class="comment"> * density (&#123;<span class="doctag">@code</span> loadFactor&#125;), and number of concurrently</span></span><br><span class="line"><span class="comment"> * updating threads (&#123;<span class="doctag">@code</span> concurrencyLevel&#125;).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> initialCapacity the initial capacity. The implementation</span></span><br><span class="line"><span class="comment"> * performs internal sizing to accommodate this many elements,</span></span><br><span class="line"><span class="comment"> * given the specified load factor.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> loadFactor the load factor (table density) for</span></span><br><span class="line"><span class="comment"> * establishing the initial table size</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> concurrencyLevel the estimated number of concurrently</span></span><br><span class="line"><span class="comment"> * updating threads. The implementation may use this value as</span></span><br><span class="line"><span class="comment"> * a sizing hint.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity is</span></span><br><span class="line"><span class="comment"> * negative or the load factor or concurrencyLevel are</span></span><br><span class="line"><span class="comment"> * nonpositive</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">float</span> loadFactor, <span class="keyword">int</span> concurrencyLevel)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0.0f</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; concurrencyLevel)   <span class="comment">// Use at least as many bins</span></span><br><span class="line">        initialCapacity = concurrencyLevel;   <span class="comment">// as estimated threads</span></span><br><span class="line">    <span class="keyword">long</span> size = (<span class="keyword">long</span>)(<span class="number">1.0</span> + (<span class="keyword">long</span>)initialCapacity / loadFactor);</span><br><span class="line">    <span class="keyword">int</span> cap = (size &gt;= (<span class="keyword">long</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">        MAXIMUM_CAPACITY : tableSizeFor((<span class="keyword">int</span>)size);</span><br><span class="line">    <span class="keyword">this</span>.sizeCtl = cap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>含有两个参数的构造函数实际上调用了此构造函数，且 concurrencyLevel 为1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, loadFactor, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、传入一个Map的构造函数"><a href="#4、传入一个Map的构造函数" class="headerlink" title="4、传入一个Map的构造函数"></a>4、传入一个Map的构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sizeCtl = DEFAULT_CAPACITY;</span><br><span class="line">    putAll(m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2、-sizeCtl-含义解释"><a href="#1-2、-sizeCtl-含义解释" class="headerlink" title="1.2、 sizeCtl 含义解释"></a>1.2、 sizeCtl 含义解释</h2><blockquote><p><strong>注意：以上这些构造方法中，都涉及到一个变量 <code>sizeCtl</code> ，这个变量是一个非常重要的变量，而且具有非常丰富的含义，它的值不同，对应的含义也不一样，这里我们先对这个变量不同的值的含义做一下说明，后续源码分析过程中，进一步解释</strong></p><p><code>sizeCtl</code>为0，代表数组未初始化， 且数组的初始容量为16</p><p><code>sizeCtl</code>为正数，如果数组未初始化，那么其记录的是数组的初始容量，如果数组已经初始化，那么其记录的是数组的扩容阈值</p><p><code>sizeCtl</code>为-1，表示数组正在进行初始化</p><p><code>sizeCtl</code>小于0，并且不是-1，表示数组正在扩容， -(1+n)，表示此时有n个线程正在共同完成数组的扩容操作</p></blockquote><ul><li><code>sizeCtl</code>是一个被 <strong>volatile</strong> 修饰的变量，保证其可见性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> sizeCtl;</span><br></pre></td></tr></table></figure><h1 id="二、JDK8添加安全"><a href="#二、JDK8添加安全" class="headerlink" title="二、JDK8添加安全"></a>二、JDK8添加安全</h1><h2 id="2-1、put方法和putVal方法"><a href="#2-1、put方法和putVal方法" class="headerlink" title="2.1、put方法和putVal方法"></a>2.1、put方法和putVal方法</h2><blockquote><p>和HashMap一样，ConcurrentHashMap底层同样调用了putVal方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(key, value, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果有空值或者空键，直接抛异常</span></span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="comment">//基于key计算hash值，并进行一定的扰动</span></span><br><span class="line">    <span class="keyword">int</span> hash = spread(key.hashCode());</span><br><span class="line">    <span class="comment">//记录某个桶上元素的个数，如果超过8个，会转成红黑树</span></span><br><span class="line">    <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">        <span class="comment">//如果数组还未初始化，先对数组进行初始化</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            tab = initTable();</span><br><span class="line">    <span class="comment">//如果hash计算得到的桶位置没有元素，利用cas将元素添加</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//cas+自旋（和外侧的for构成自旋循环），保证元素添加安全</span></span><br><span class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                         <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">                <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果hash计算得到的桶位置元素的hash值为MOVED，证明正在扩容，那么协助扩容</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">            tab = helpTransfer(tab, f);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//hash计算的桶位置元素不为空，且当前没有处于扩容操作，进行元素添加</span></span><br><span class="line">            V oldVal = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//对当前桶进行加锁，保证线程安全，执行元素添加操作</span></span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    <span class="comment">//普通链表节点</span></span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        binCount = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                            K ek;</span><br><span class="line">                            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                ((ek = e.key) == key ||</span><br><span class="line">                                 (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                oldVal = e.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    e.val = value;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            Node&lt;K,V&gt; pred = e;</span><br><span class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                          value, <span class="keyword">null</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//树节点，将元素添加到红黑树中</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                        Node&lt;K,V&gt; p;</span><br><span class="line">                        binCount = <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                       value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            oldVal = p.val;</span><br><span class="line">                            <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                p.val = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//链表长度大于/等于8，将链表转成红黑树</span></span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                    treeifyBin(tab, i);</span><br><span class="line">                <span class="comment">//如果是重复键，直接将旧值返回</span></span><br><span class="line">                <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> oldVal;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加的是新元素，维护集合长度，并判断是否要进行扩容操作</span></span><br><span class="line">    addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>putVal</code>方法中可以发现，<strong>ConcurrentHashMap</strong>在第一次<code>put</code>的时候才初始化Node数组，这一点和<strong>HashMap</strong>类似</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果数组还未初始化，先对数组进行初始化</span></span><br><span class="line"><span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">    tab = initTable();</span><br></pre></td></tr></table></figure><h3 id="1、initTable初始化数组方法"><a href="#1、initTable初始化数组方法" class="headerlink" title="1、initTable初始化数组方法"></a>1、initTable初始化数组方法</h3><blockquote><p>初始化 <strong>Node</strong> 数组的方法，这里使用CAS自旋保证线程安全</p></blockquote><ul><li>如果当前 <code>sizeCtl &lt; 0</code> ，那么根据表示有线程正在对 <strong>Node</strong> 数组进行初始化，当前线程需要让出cpu调度权给正在进行初始化数组的线程</li><li>如果  <code>sizeCtl != 0</code> ，那么当前线程可以对 <strong>Node</strong> 数组进行初始化，这里使用CAS自选来对 <code>sizeCtl</code> 进行修改，如果修改成功就继续初始化，否则继续自旋</li><li>如果修改 <code>sizeCtl</code> 成功，此时先对 <strong>Node</strong> 数组进行判空检查</li><li>如果 <strong>Node</strong> 数组为空，就new 一个 <strong>Node</strong> 数组，同时计算扩容阈值</li></ul><blockquote><p>由于<strong>ConcurrentHashMap的默认负载因子为 0.75</strong> ，而 n 右移两位的值刚好等于原值n的四分之一，<strong>故 n - (n &gt;&gt;&gt; 2) 正好为原值n的 0.75 倍</strong>，这里使用了位运算来避免除法提高效率。</p></blockquote><ul><li>在计算完阈值之后，使用break跳出循环。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; <span class="keyword">int</span> sc;</span><br><span class="line">    <span class="comment">//cas+自旋，保证线程安全，对数组进行初始化操作</span></span><br><span class="line">    <span class="keyword">while</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//如果sizeCtl的值（-1）小于0，说明此时正在初始化， 让出cpu</span></span><br><span class="line">        <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>)</span><br><span class="line">            Thread.yield(); <span class="comment">// lost initialization race; just spin</span></span><br><span class="line">        <span class="comment">//cas修改sizeCtl的值为-1，修改成功，进行数组初始化，失败，继续自旋</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//sizeCtl为0，取默认长度16，否则去sizeCtl的值</span></span><br><span class="line">                    <span class="keyword">int</span> n = (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    <span class="comment">//基于初始长度，构建数组对象</span></span><br><span class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</span><br><span class="line">                    table = tab = nt;</span><br><span class="line">                    <span class="comment">//计算扩容阈值，并赋值给sc</span></span><br><span class="line">                    sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//将扩容阈值，赋值给sizeCtl</span></span><br><span class="line">                sizeCtl = sc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、计算键值对添加的位置"><a href="#2、计算键值对添加的位置" class="headerlink" title="2、计算键值对添加的位置"></a>2、计算键值对添加的位置</h3><blockquote><p>在初始化完数组之后，会使用<code>tabAt</code> 函数计算要添加的<code>Entry</code> 对象在数组中的位置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果hash计算得到的桶位置没有元素，利用cas将元素添加</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//cas+自旋（和外侧的for构成自旋循环），保证元素添加安全</span></span><br><span class="line">    <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                 <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">        <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>tabAt</code>函数底层使用了CAS</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function">Node&lt;K,V&gt; <span class="title">tabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果<strong>table</strong>数组中计算出来的位置元素为空，那么直接将直接创建一个<strong>Node</strong>节点并添加到该位置即可。</p></blockquote><h3 id="3、多线程协助扩容"><a href="#3、多线程协助扩容" class="headerlink" title="3、多线程协助扩容"></a>3、多线程协助扩容</h3><blockquote><p>如果计算出来<strong>Node</strong>数组中要插入位置的元素的hash值为<code>MOVED</code> ，那么证明当前 <strong>Node</strong> 数组中要插入位置的元素为 <strong>forwarding</strong> 节点，这个节点的hash值为1。</p><p><strong>forwarding</strong> 节点和 <strong>多线程协助扩容</strong> 有关。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">    tab = helpTransfer(tab, f);</span><br></pre></td></tr></table></figure><blockquote><p><strong>ConcurrentHashMap</strong> 中 <code>MOVED</code> 的定义如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVED     = -<span class="number">1</span>; <span class="comment">// hash for forwarding nodes</span></span><br></pre></td></tr></table></figure><h3 id="4、put方法加锁图解"><a href="#4、put方法加锁图解" class="headerlink" title="4、put方法加锁图解"></a>4、put方法加锁图解</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210305142810.jpg" alt="Snipaste_2020-05-16_12-04-08"></p><blockquote><p>上面的 <code>if/else-if</code> 分别对应 <strong>Node</strong> 数组<strong>未初始化</strong>、<strong>Node</strong> 数组要添加的<strong>位置元素为空</strong>、<strong>Node</strong> 数组要添加的位置<strong>正在扩容</strong>的情况。</p><p>下面的 <code>else</code> 表示要添加的位置元素已经存在元素了，此时对该位置上的元素加锁。</p><p><strong>ConcurrentHashMap</strong> 在添加元素时，<strong>只会对要加入的桶加锁</strong>，不会影响其他桶位的线程操作。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//hash计算的桶位置元素不为空，且当前没有处于扩容操作，进行元素添加</span></span><br><span class="line">    V oldVal = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//对当前桶进行加锁，保证线程安全，执行元素添加操作</span></span><br><span class="line">    <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">            <span class="comment">//普通链表节点</span></span><br><span class="line">            <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                binCount = <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//遍历链表，逐个比较链表元素的key和待插入节点的key是否相等</span></span><br><span class="line">                <span class="comment">//如果不是，就使用尾插法插入元素，否则就覆盖旧值</span></span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                    K ek;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((ek = e.key) == key ||</span><br><span class="line">                         (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                        oldVal = e.val;</span><br><span class="line">                        <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                            e.val = value;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    Node&lt;K,V&gt; pred = e;</span><br><span class="line">                    <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                  value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//树节点，将元素添加到红黑树中</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                Node&lt;K,V&gt; p;</span><br><span class="line">                binCount = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                               value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    oldVal = p.val;</span><br><span class="line">                    <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                        p.val = value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//链表长度大于/等于8，将链表转成红黑树</span></span><br><span class="line">        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">            treeifyBin(tab, i);</span><br><span class="line">        <span class="comment">//如果是重复键，直接将旧值返回</span></span><br><span class="line">        <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> oldVal;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、添加完元素后进行链表长度判断"><a href="#5、添加完元素后进行链表长度判断" class="headerlink" title="5、添加完元素后进行链表长度判断"></a>5、添加完元素后进行链表长度判断</h3><blockquote><p>和 <strong>HashMap</strong> 类似，在添加完一个元素后需要对<strong>桶元素个数</strong>及<strong>数组长度</strong>进行判断，如果有一个桶中<strong>链表长度大于8</strong>且<strong>数组长度大于64</strong>，就将该桶上的链表<strong>转换</strong>为一棵红黑树。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//链表长度大于/等于8，将链表转成红黑树</span></span><br><span class="line">    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">        treeifyBin(tab, i);</span><br><span class="line">    <span class="comment">//如果是重复键，直接将旧值返回</span></span><br><span class="line">    <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> oldVal;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>树化方法 <code>treeifyBin</code> 只有当<strong>数组长度大于等于64</strong>的时候才会选择树化，且树化时的加锁过程也是对单一桶加锁。</p><p>如果数组长度小于64，会进行数组扩容。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       Node&lt;K,V&gt; b; <span class="keyword">int</span> n, sc;</span><br><span class="line">       <span class="keyword">if</span> (tab != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">               tryPresize(n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((b = tabAt(tab, index)) != <span class="keyword">null</span> &amp;&amp; b.hash &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">synchronized</span> (b) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (tabAt(tab, index) == b) &#123;</span><br><span class="line">                       TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">                       <span class="keyword">for</span> (Node&lt;K,V&gt; e = b; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                           TreeNode&lt;K,V&gt; p =</span><br><span class="line">                               <span class="keyword">new</span> TreeNode&lt;K,V&gt;(e.hash, e.key, e.val,</span><br><span class="line">                                                 <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                           <span class="keyword">if</span> ((p.prev = tl) == <span class="keyword">null</span>)</span><br><span class="line">                               hd = p;</span><br><span class="line">                           <span class="keyword">else</span></span><br><span class="line">                               tl.next = p;</span><br><span class="line">                           tl = p;</span><br><span class="line">                       &#125;</span><br><span class="line">                       setTabAt(tab, index, <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hd));</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="2-2、ConcurrentHashMap-空值和空键问题"><a href="#2-2、ConcurrentHashMap-空值和空键问题" class="headerlink" title="2.2、ConcurrentHashMap 空值和空键问题"></a>2.2、ConcurrentHashMap 空值和空键问题</h2><blockquote><p><strong>HashMap</strong>是允许<em>空键空值</em>的，其中空键只允许有一个，空值允许有多个，但 <strong>ConcurrentHashMap</strong> 不允许有空键空值。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210304223605.png" alt="image-20210304223605030"></p><blockquote><p><code>spread</code>方法是 <strong>ConcurrentHashMap</strong> 中的<strong>扰动方法</strong> ，用于增加散列性，且保证 <code>spread</code> 方法返回的值一定为正数。</p><p>在HashMap的hash方法计算结果的基础上，让得到的值与 <code>0x7fffffff</code> 进行一个与运算。</p><p>将 <code>0x7fffffff</code> 放入计算器中计算，得到的二进制值为</p><p><code>01111111111111111111111111111111</code></p><p>任何数与 <code>01111111111111111111111111111111</code> 可以保证该数的第一位为0，在二进制中，第一位为0的数为正数。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_BITS = <span class="number">0x7fffffff</span>; <span class="comment">// usable bits of normal node hash    </span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">spread</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> (h ^ (h &gt;&gt;&gt; <span class="number">16</span>)) &amp; HASH_BITS;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC学习笔记（五）-ThreadLocal学习</title>
      <link href="posts/1275843529.html"/>
      <url>posts/1275843529.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="十三、ThreadLocal"><a href="#十三、ThreadLocal" class="headerlink" title="十三、ThreadLocal"></a>十三、ThreadLocal</h1><h2 id="13-1、ThreadLocal-简介"><a href="#13-1、ThreadLocal-简介" class="headerlink" title="13.1、ThreadLocal 简介"></a>13.1、ThreadLocal 简介</h2><h3 id="1、ThreadLocal-是什么"><a href="#1、ThreadLocal-是什么" class="headerlink" title="1、ThreadLocal 是什么?"></a>1、ThreadLocal 是什么?</h3><blockquote><p>​       <strong>ThreadLocal 能提供线程局部变量</strong>，这些变量与正常的变量不同，因为每一个线程在访问 ThreadLocal 实例的时候（通过 get 或 set 方法）都有自己独立初始化的变量副本，ThreadLocal 实例通常是类中的<strong>私有静态</strong>字段，使用它的目的是希望将状态（例如，用户 ID 或者事务 ID）关联起来。</p></blockquote><p>总结：</p><ul><li>线程并发</li></ul><blockquote><p>ThreadLocal运用于多线程环境下</p></blockquote><ul><li>传递数据</li></ul><blockquote><p>我们可以通过ThreadLocal在同一线程，不同组件中传递公共变量</p></blockquote><ul><li>线程隔离</li></ul><blockquote><p>每个线程的变量都是独立的，不会相互影响</p></blockquote><h3 id="2、ThreadLocal-能干什么？"><a href="#2、ThreadLocal-能干什么？" class="headerlink" title="2、ThreadLocal 能干什么？"></a>2、ThreadLocal 能干什么？</h3><blockquote><p>​       ThreadLocal 能实现每一个线程都有自己专属的本地变量副本，主要解决了让每个线程绑定自己的值，通过使用 get(）和 set() 方法，获取默认值或将其值更改为当前线程所存的副本的值从而避免了线程安全问题。</p></blockquote><h3 id="3、ThreadLocal-常用API介绍"><a href="#3、ThreadLocal-常用API介绍" class="headerlink" title="3、ThreadLocal 常用API介绍"></a>3、ThreadLocal 常用API介绍</h3><blockquote><p>​       返回该线程局部变量在当前线程副本中的值。如果该变量对于当前线程没有值，它首先被初始化调用 initialValue 方法得到返回的值。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​       返回当前线程的这个线程局部变量的“初始值”。该方法将在线程第一次使用 get 方法访问变量时被调用<br>除非线程之前调用了set 方法，在这种情况下，initialValue 方法将不会被线程调用。<br>​        通常，这个方法在每个线程中最多调用一次，但是在后续调用 remove 和 get 的情况下，它可能会被再次调用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​       删除当前线程局部变量的值。如果这个线程局部变量随后被当前线程调用了 get ，它的值将通过调用它的 initialValue 方法重新初始化，除非它的值在过渡期间被当前线程调用了 set 。这可能导致在当前线程中多次调用 initialValue 方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​       将当前线程的这个线程局部变量的副本设置为指定的值。大多数子类将不需要覆盖这个方法，仅仅依靠 initialValue 方法来设置线程局部变量的值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​       创建线程局部变量。变量的初始值是通过方法上 Supplier 的 get 方法来确定的。jdk1.8 才有的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">ThreadLocal&lt;S&gt; <span class="title">withInitial</span><span class="params">(Supplier&lt;? extends S&gt; supplier)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="13-2、ThreadLocal-简单使用"><a href="#13-2、ThreadLocal-简单使用" class="headerlink" title="13.2、ThreadLocal 简单使用"></a>13.2、ThreadLocal 简单使用</h2><h3 id="1、问题引出"><a href="#1、问题引出" class="headerlink" title="1、问题引出"></a>1、问题引出</h3><blockquote><p>需求：线程隔离</p><ul><li>在多线程并发场景下，每个线程中的变量都是相互独立的</li><li>线程A，设置变量1，获取变量1</li><li>线程B，设置变量2，获取变量2</li></ul><p>在没有引入ThreadLocal之前</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDemo01</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyDemo01 demo = <span class="keyword">new</span> MyDemo01();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                demo.setContent(Thread.currentThread().getName() + <span class="string">&quot;的数据&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&gt;&quot;</span> + demo.getContent());</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行程序，发现线程间没有实现隔离，有线程拿到了自己以外的线程资源。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210303151207.png" alt="image-20210303151200139"></p><h3 id="2、引入ThreadLocal"><a href="#2、引入ThreadLocal" class="headerlink" title="2、引入ThreadLocal"></a>2、引入ThreadLocal</h3><blockquote><p>set()：将变量绑定到当前线程中</p><p>get()：获取当前线程绑定的变量</p><p>在上面的程序中使用ThreadLocal代替<code>content</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDemo01</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal threadLocal = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyDemo01 demo = <span class="keyword">new</span> MyDemo01();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                threadLocal.set(Thread.currentThread().getName() + <span class="string">&quot;的数据&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&gt;&quot;</span> + threadLocal.get());</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>再次运行程序，发现已经实现线程隔离</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210303152441.png" alt="image-20210303152441357"></p><h2 id="13-3、ThreadLocal-和-synchronized的区别"><a href="#13-3、ThreadLocal-和-synchronized的区别" class="headerlink" title="13.3、ThreadLocal 和 synchronized的区别"></a>13.3、ThreadLocal 和 synchronized的区别</h2><table><thead><tr><th></th><th>synchronized</th><th>ThreadLocal</th></tr></thead><tbody><tr><td>原理</td><td>同步机制采用<strong>以时间换空间</strong>的方式。只提供一份变量，让不同的线程排队访问。</td><td>ThreadLocal采用了<strong>以空间换时间</strong>的方式，为每一个线程都提供了一份变量的<strong>副本</strong>，从而实现同时访问而互不干扰</td></tr><tr><td>侧重点</td><td>多个线程之间访问资源的同步</td><td>多线程中让每个线程之间的数据相互隔离</td></tr></tbody></table><blockquote><p>总结：在上面的案例中，使用<code>synchronized</code> 和 <code>ThreadLocal</code> 都可以解决问题，但使用 <code>ThreadLocal</code> 更为合适，因为这样可以使程序拥有更高的并发性。</p></blockquote><h2 id="13-4、ThreadLocal-的内部结构"><a href="#13-4、ThreadLocal-的内部结构" class="headerlink" title="13.4、ThreadLocal 的内部结构"></a>13.4、ThreadLocal 的内部结构</h2><blockquote><p>探究实现线程数据隔离原理</p></blockquote><h3 id="1、常见的误解"><a href="#1、常见的误解" class="headerlink" title="1、常见的误解"></a>1、常见的误解</h3><blockquote><p>​       如果我们不去看源代码的话，可能会猜测ThreadLocal是这样子设计的：每个ThreadLocal类都创建一个<code>Map</code>，然后用线程作为<code>Map</code>的<code>key</code>，要存储的局部变量作为<code>Map</code>的<code>value</code>，这样就能达到各个线程的局部变量隔离的效果。这是最简单的设计方法，<strong>JDK最早期的ThreadLocal就是这样设计的</strong>。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210303204948.png" alt="image-20210303204947445"></p><h3 id="2、现在的设计"><a href="#2、现在的设计" class="headerlink" title="2、现在的设计"></a>2、现在的设计</h3><blockquote><p>​       JDK后面优化了设计方案，在JDK8 中 <code>ThreadLocal</code> 的设计是：每个 <code>Thread</code> 都维护一个 <code>ThreadLocalMap</code> ，这个Map的 <code>key</code> 是 <code>ThreadLocal</code> 实例本身，<code>value</code> 才是真正要存储的值 <code>Object</code> 。</p><p>​       具体过程如下：</p></blockquote><ul><li>每个Thread线程内部都有一个Map (ThreadLocalMap)</li><li>Map里面存储ThreadLocal对象（key）和线程的变量副本（value）</li><li>Thread内部的Map是由ThreadLocal维护的，由ThreadLocal负责向map获取和设置线程的变量值。</li><li>对于不同的线程，每次获取副本值时，别的线程并不能获取到当前线程的副本值，形成了副本的隔离，互不干扰。</li></ul><blockquote><p>JDK8中ThreadLocal设计图</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210303205447.png" alt="image-20210303205447468"></p><h3 id="3、这样设计的好处"><a href="#3、这样设计的好处" class="headerlink" title="3、这样设计的好处"></a>3、这样设计的好处</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210303210524.png" alt="image-20210303210524365"></p><blockquote><p>从上图可以看出，JDK8后的设计和我们一开始猜测的设计正好相反，这样设计有如下优势：</p></blockquote><ul><li>这样设计之后每个<code>Map</code>存储的<code>Entry</code>数量就会变少，因为之前的存储数量由<code>Thread</code>的数量决定，现在是由<code>ThreadLocal</code>的数量决定。</li><li>当<code>Thread</code>销毁之后，对应的<code>ThreadLocalMap</code>也会随之销毁，能减少内存的使用。</li></ul><h2 id="13-5、ThreadLocal的核心方法源码"><a href="#13-5、ThreadLocal的核心方法源码" class="headerlink" title="13.5、ThreadLocal的核心方法源码"></a>13.5、ThreadLocal的核心方法源码</h2><blockquote><p>除了构造方法外，ThreadLocal还有以下4个对外暴露的方法</p></blockquote><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>protected T initialValue()</td><td>返回当前线程局部变量的初始值</td></tr><tr><td>public void set( T value)</td><td>设置当前线程绑定的局部变量</td></tr><tr><td>public T get()</td><td>获取当前线程绑定的局部变量</td></tr><tr><td>public void remove()</td><td>移除当前线程绑定的局部变量</td></tr></tbody></table><h3 id="1、ThreadLocalMap相关方法"><a href="#1、ThreadLocalMap相关方法" class="headerlink" title="1、ThreadLocalMap相关方法"></a>1、ThreadLocalMap相关方法</h3><blockquote><p><strong>ThreadLocal</strong>中有一个静态内部类<code>ThreadLocalMap</code>，其中<code>ThreadLocalMap</code>内部维护了一个<strong>Entry</strong> 数组；</p><p>除此之外，<strong>ThreadLocal</strong>中还有<code>getMap</code>、<code>createMap</code>等一系列方法，这些方法与<code>ThreadLocalMap</code>息息相关。</p></blockquote><ul><li>ThreadLocalMap静态内部类</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210303212211.png" alt="image-20210303212211603"></p><ul><li>ThreadLocalMap中的静态内部类Entry</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">        Object value;</span><br><span class="line"></span><br><span class="line">        Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">            <span class="keyword">super</span>(k);</span><br><span class="line">            value = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The initial capacity -- MUST be a power of two.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The table, resized as necessary.</span></span><br><span class="line"><span class="comment">     * table.length MUST always be a power of two.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Entry[] table;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ThreadLocal中的getMap方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前线程Thread对应维护的ThreadLocalMap </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  t the current thread 当前线程</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the map 对应维护的ThreadLocalMap </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ThreadLocal中的createMap方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *创建当前线程Thread对应维护的ThreadLocalMap </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> t 当前线程</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> firstValue 存放到map中第一个entry的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里的this是调用此方法的threadLocal</span></span><br><span class="line">    t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>setInitialValue方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * set的变样实现，用于初始化值initialValue，</span></span><br><span class="line"><span class="comment"> * 用于代替防止用户重写set()方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the initial value 初始化后的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用initialValue获取初始化的值</span></span><br><span class="line">    T value = initialValue();</span><br><span class="line">    <span class="comment">// 获取当前线程对象</span></span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    <span class="comment">// 获取此线程对象中维护的ThreadLocalMap对象</span></span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="comment">// 如果此map存在</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">// 存在则调用map.set设置此实体entry</span></span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 1）当前线程Thread 不存在ThreadLocalMap对象</span></span><br><span class="line">        <span class="comment">// 2）则调用createMap进行ThreadLocalMap对象的初始化</span></span><br><span class="line">        <span class="comment">// 3）并将此实体entry作为第一个值存放至ThreadLocalMap中</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">    <span class="comment">// 返回设置的值value</span></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、set方法"><a href="#2、set方法" class="headerlink" title="2、set方法"></a>2、set方法</h3><blockquote><p>源码及中文注释</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置当前线程对应的ThreadLocal的值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 将要保存在当前线程对应的ThreadLocal的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前线程对象</span></span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    <span class="comment">// 获取此线程对象中维护的ThreadLocalMap对象</span></span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="comment">// 如果此map存在</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">// 存在则调用map.set设置此实体entry</span></span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 1）当前线程Thread 不存在ThreadLocalMap对象</span></span><br><span class="line">        <span class="comment">// 2）则调用createMap进行ThreadLocalMap对象的初始化</span></span><br><span class="line">        <span class="comment">// 3）并将此实体entry作为第一个值存放至ThreadLocalMap中</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>set方法代码执行流程如下</strong></p></blockquote><ul><li><p>首先获取当前线程，并根据当前线程获取一个Map</p></li><li><p>如果获取的Map不为空，则将参数设置到Map中（当前ThreadLocal的引用作为key）</p></li><li><p>如果Map为空，则给该线程创建 Map，并设置初始值</p></li></ul><h3 id="3、get方法"><a href="#3、get方法" class="headerlink" title="3、get方法"></a>3、get方法</h3><blockquote><p>源码及中文注释</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回当前线程中保存ThreadLocal的值</span></span><br><span class="line"><span class="comment"> * 如果当前线程没有此ThreadLocal变量，</span></span><br><span class="line"><span class="comment"> * 则它会通过调用&#123;<span class="doctag">@link</span> #initialValue&#125; 方法进行初始化值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回当前线程对应此ThreadLocal的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前线程对象</span></span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    <span class="comment">// 获取此线程对象中维护的ThreadLocalMap对象</span></span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="comment">// 如果此map存在</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 以当前的ThreadLocal 为 key，调用getEntry获取对应的存储实体e</span></span><br><span class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 找到对应的存储实体 e </span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            <span class="comment">// 获取存储实体 e 对应的 value值</span></span><br><span class="line">            <span class="comment">// 即为我们想要的当前线程对应此ThreadLocal的值</span></span><br><span class="line">            T result = (T)e.value;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果map不存在，则证明此线程没有维护的ThreadLocalMap对象</span></span><br><span class="line">    <span class="comment">// 调用setInitialValue进行初始化</span></span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码执行流程</p></blockquote><ul><li><p>首先获取当前线程，根据当前线程获取一个Map</p></li><li><p>如果获取的Map不为空，则在Map中以ThreadLocal的引用作为key来在Map中获取对应的value e，否则转到E</p></li><li><p>如果e不为null，则返回e.value，否则执行下一步操作</p></li><li><p>Map为空或者e为空，则通过initialValue函数获取初始值value，然后用ThreadLocal的引用和value作为firstKey和firstValue创建一个新的Map</p></li></ul><blockquote><p>get方法总结: 先获取当前线程的 ThreadLocalMap 变量，如果存在则返回值，不存在则创建并返回初始值。</p></blockquote><h3 id="4、remove方法"><a href="#4、remove方法" class="headerlink" title="4、remove方法"></a>4、remove方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除当前线程中保存的ThreadLocal对应的实体entry</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前线程对象中维护的ThreadLocalMap对象</span></span><br><span class="line">     ThreadLocalMap m = getMap(Thread.currentThread());</span><br><span class="line">    <span class="comment">// 如果此map存在</span></span><br><span class="line">     <span class="keyword">if</span> (m != <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">// 存在则调用map.remove</span></span><br><span class="line">        <span class="comment">// 以当前ThreadLocal为key删除对应的实体entry</span></span><br><span class="line">         m.remove(<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码执行流程</p></blockquote><ul><li><p>首先获取当前线程，并根据当前线程获取一个Map</p></li><li><p>如果获取的Map不为空，则移除当前ThreadLocal对象对应的entry</p></li></ul><h3 id="5、initialValue方法"><a href="#5、initialValue方法" class="headerlink" title="5、initialValue方法"></a>5、initialValue方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 返回当前线程对应的ThreadLocal的初始值</span></span><br><span class="line"><span class="comment">  * 此方法的第一次调用发生在，当线程通过&#123;<span class="doctag">@link</span> #get&#125;方法访问此线程的ThreadLocal值时</span></span><br><span class="line"><span class="comment">  * 除非线程先调用了 &#123;<span class="doctag">@link</span> #set&#125;方法，在这种情况下，</span></span><br><span class="line"><span class="comment">  * &#123;<span class="doctag">@code</span> initialValue&#125; 才不会被这个线程调用。</span></span><br><span class="line"><span class="comment">  * 通常情况下，每个线程最多调用一次这个方法。</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * &lt;p&gt;这个方法仅仅简单的返回null &#123;<span class="doctag">@code</span> null&#125;;</span></span><br><span class="line"><span class="comment">  * 如果程序员想ThreadLocal线程局部变量有一个除null以外的初始值，</span></span><br><span class="line"><span class="comment">  * 必须通过子类继承&#123;<span class="doctag">@code</span> ThreadLocal&#125; 的方式去重写此方法</span></span><br><span class="line"><span class="comment">  * 通常, 可以通过匿名内部类的方式实现</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 当前ThreadLocal的初始值</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此方法的作用是 返回该线程局部变量的初始值。</p></blockquote><ul><li><p>这个方法是一个延迟调用方法，从上面的代码我们得知，在set方法还未调用而先调用了get方法时才执行，并且仅执行1次。</p></li><li><p>这个方法缺省实现直接返回一个null。</p></li><li><p>如果想要一个除null之外的初始值，可以重写此方法。（备注： 该方法是一个protected的方法，显然是为了让子类覆盖而设计的）</p></li></ul><h2 id="13-6、ThreadLocalMap源码分析"><a href="#13-6、ThreadLocalMap源码分析" class="headerlink" title="13.6、ThreadLocalMap源码分析"></a>13.6、ThreadLocalMap源码分析</h2><h3 id="1、基本结构"><a href="#1、基本结构" class="headerlink" title="1、基本结构"></a>1、基本结构</h3><blockquote><p>​       ThreadLocalMap是ThreadLocal的内部类，<strong>没有实现Map接口</strong>，<strong>用独立的方式实现了Map的功能</strong>，其<strong>内部的Entry也是独立实现</strong>。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210303214447.png" alt="image-20210303214447305"></p><h3 id="2、成员变量"><a href="#2、成员变量" class="headerlink" title="2、成员变量"></a>2、成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始容量 —— 必须是2的整次幂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存放数据的table，Entry类的定义在下面分析</span></span><br><span class="line"><span class="comment"> * 同样，数组长度必须是2的冥。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Entry[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组里面entrys的个数，可以用于判断table当前使用量是否超过负因子。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 进行扩容的阈值，表使用量大于它的时候进行扩容。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> threshold; <span class="comment">// Default to 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阈值设置为长度的2/3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setThreshold</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    threshold = len * <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​       与<strong>HashMap</strong>类似，<code>INITIAL_CAPACITY</code>代表这个<strong>Map</strong>数组的初始容量，<code>table</code>是一个<strong>Entry</strong>类型的数组，用于存储数据，<code>size</code>代表表中存储的数目，<code>threshold</code>代表扩容时对于size的阈值。</p></blockquote><h3 id="3、ThreadLocalMap中的存储结构Entry"><a href="#3、ThreadLocalMap中的存储结构Entry" class="headerlink" title="3、ThreadLocalMap中的存储结构Entry"></a>3、ThreadLocalMap中的存储结构Entry</h3><blockquote><p><strong>ThreadLocalMap</strong>中的Entry类继承自<code>WeakReference</code>(弱引用)，也就是<code>key</code>(ThreadLocal) 是弱引用，其目的是将<strong>ThreadLocal</strong> 对象的生命周期和线程生命周期解绑。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在ThreadLocalMap中，也是用Entry来保存K-V结构数据的。但是Entry中key只能是ThreadLocal对象，这点被Entry的构造方法已经限定死了</span></span><br><span class="line"><span class="comment">// 另外，Entry继承WeakReference,使用弱引用，可以将ThreadLocal对象的生命周期和线程生命周期解绑，持有对ThreadLocal的弱引用，可以使得ThreadLocal在没有其他强引用的时候被回收掉，这样可以避免因为线程得不到销毁导致ThreadLocal对象无法被回收</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">    Object value;</span><br><span class="line"></span><br><span class="line">    Entry(ThreadLocal k, Object v) &#123;</span><br><span class="line">        <span class="keyword">super</span>(k);</span><br><span class="line">        value = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、弱引用和内存泄漏"><a href="#4、弱引用和内存泄漏" class="headerlink" title="4、弱引用和内存泄漏"></a>4、弱引用和内存泄漏</h3><blockquote><p>​       有些程序员在使用ThreadLocal的过程中会发现有内存泄漏的情况发生,就猜测这个内存泄漏跟Entry中使用了弱引用的key有关系。这个理解其实是不对的。</p></blockquote><p>我们先来回顾这个问题中涉及的几个名词概念，再来分析问题</p><blockquote><p>内存泄漏相关概念</p></blockquote><ul><li><strong>Memory overflow</strong>:内存溢出,没有足够的内存提供申请者使用。</li><li><strong>Memory leak</strong>:内存泄漏是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放,造成系统内存的浪费,导致程序运行速度减慢甚至系统崩溃等严重后果。内存泄漏的堆积终将导致内存溢出。</li></ul><blockquote><p>弱引用相关概念</p></blockquote><ul><li><p>Java中的引用有4种类型: 强、软、弱、虚。当前这个问题主要涉及到强引用和弱引用:</p></li><li><p><strong>强引用(StrongReference)</strong>, 就是我们最常见的普通对象引用,只要还有强引用指向一个对象,就能表明对象还“活着”,垃圾回收器就不会回收这种对象。</p></li><li><p><strong>弱引用(WeakReference)</strong>,垃圾回收器一旦发现了 只具有弱弓|用的对象,不管当前内存空间足够与否,都会回收它的内存。</p></li></ul><blockquote><p>如果key使用强引用</p></blockquote><ul><li>假设ThreadLocalMap中的key使用了强引用,那么会出现内存泄漏吗?<br>此时ThreadLocal的内存图(实线表示强引用)如下：</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210303220758.png" alt="image-20210303220758608"></p><blockquote><p>如果key使用弱引用</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210303221126.png" alt="image-20210303221126771"></p><h3 id="5、ThreadLocal内存泄漏总结"><a href="#5、ThreadLocal内存泄漏总结" class="headerlink" title="5、ThreadLocal内存泄漏总结"></a>5、ThreadLocal内存泄漏总结</h3><ul><li><p>如果ThreadLocalMap中的key使用强引用，那么当指向ThreadLocal的引用被回收后，key指向的ThreadLocal实例将无法被回收（因为key为强引用），此时无法避免内存泄漏</p></li><li><p>如果ThreadLocalMap中的key使用弱引用，那么当指向ThreadLocal的引用被回收后，key指向的ThreadLocal实例直接被gc回收（因为key为弱引用），但由于此时Entry中的value不会被回收，因此仍然可能造成内存泄漏</p></li></ul><blockquote><p>​       根据刚才的分析,我们知道了：<strong>无论使用ThreadLocalMap中的key使用哪种类型引用都无法完全避免内存泄漏</strong>，<strong>跟使用弱引用没有关系</strong>。</p><p>​        ThreadLocal造成内存泄漏的根本原因是：<em>由于ThreadLocalMap的生命周期和Thread一样长，如果没有手动删除对应Entry就会造成内存泄漏。</em></p><p>​       要避免内存泄漏有两种方式：</p></blockquote><ul><li>使用完ThreadLocal ，调用其remove方法删除对应的Entry，就能避免内存泄漏</li><li>使用完ThreadLocal ，当前Thread也随之运行结束相对第一种方式， 第二种方式显然更不好控制，特别是使用线程池的时候，线程结束是不会销毁的。</li></ul><blockquote><p>也就是说，<strong>只要记得在使用完ThreadLocal及时的调用remove</strong> ，无论key是强引用还是弱引用都不会有问题。</p></blockquote><h3 id="6、key使用弱引用的原因"><a href="#6、key使用弱引用的原因" class="headerlink" title="6、key使用弱引用的原因"></a>6、key使用弱引用的原因</h3><blockquote><p>​       事实上，在ThreadLocalMap中的set/getEntry方法中，<strong>会对key为null (也即是ThreadLocal为null )进行判断</strong>，<strong>如果key为nul的话</strong>，那么是会<strong>将value置为null</strong>的。<br>​       这就意味着使用完ThreadLocal ， CurrentThread依然运行的前提下，就算忘记调用remove方法，<strong>弱引用比强引用可以多一层保障：弱引用的ThreadLocal会被回收，对应的value在下一次ThreadLocalMap调用set，get，remove中的任一方法的时候会被清除</strong>，从而避免内存泄漏。</p></blockquote><h2 id="13-7、ThreadLocalMap解决hash冲突的方法"><a href="#13-7、ThreadLocalMap解决hash冲突的方法" class="headerlink" title="13.7、ThreadLocalMap解决hash冲突的方法"></a>13.7、ThreadLocalMap解决hash冲突的方法</h2><blockquote><p>ThreadLocal使用的是<strong>自定义的ThreadLocalMap</strong>，接下来我们来探究一下ThreadLocalMap的hash冲突解决方式。</p></blockquote><h3 id="1、回顾ThreadLocal的set方法"><a href="#1、回顾ThreadLocal的set方法" class="headerlink" title="1、回顾ThreadLocal的set方法"></a>1、回顾ThreadLocal的set方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocal.ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ThreadLocal.<span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">    t.threadLocals = <span class="keyword">new</span> ThreadLocal.ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取当前线程，并获取当前线程的ThreadLocalMap实例（从getMap(Thread t)中很容易看出来）。</li><li>如果获取到的map实例不为空，调用map.set()方法，否则调用构造函数 ThreadLocal.ThreadLocalMap(this, firstValue)实例化map。</li></ul><blockquote><p>可以看出来线程中的ThreadLocalMap使用的是<strong>延迟初始化</strong>，在第一次调用get()或者set()方法的时候才会进行初始化。</p></blockquote><h3 id="2、ThreadLocalMap构造方法"><a href="#2、ThreadLocalMap构造方法" class="headerlink" title="2、ThreadLocalMap构造方法"></a>2、ThreadLocalMap构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">    <span class="comment">//初始化table</span></span><br><span class="line">    table = <span class="keyword">new</span> ThreadLocal.ThreadLocalMap.Entry[INITIAL_CAPACITY];</span><br><span class="line">    <span class="comment">//计算索引</span></span><br><span class="line">    <span class="keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//设置值</span></span><br><span class="line">    table[i] = <span class="keyword">new</span> ThreadLocal.ThreadLocalMap.Entry(firstKey, firstValue);</span><br><span class="line">    size = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//设置阈值</span></span><br><span class="line">    setThreshold(INITIAL_CAPACITY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>主要说一下计算索引，<code>firstKey.threadLocalHashCode</code> &amp; <code>(INITIAL_CAPACITY - 1)</code></p></blockquote><ul><li>关于<code>&amp; (INITIAL_CAPACITY - 1)</code>,这是取模的一种方式，对于2的幂作为模数取模，用此代替<code>%(2^n)</code>，这也就是为啥容量必须为2的幂，在这个地方也得到了解答。</li><li>关于<code>firstKey.threadLocalHashCode</code>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> threadLocalHashCode = nextHashCode();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextHashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger nextHashCode =  <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_INCREMENT = <span class="number">0x61c88647</span></span><br></pre></td></tr></table></figure><blockquote><p>这里定义了一个<strong>AtomicInteger</strong>类型，每次获取当前值并加上<code>HASH_INCREMENT</code>，<code>HASH_INCREMENT</code> = 0x61c88647,这个值和斐波那契散列有关（这是一种乘数散列法，只不过这个乘数比较特殊，是32位整型上限2^32-1乘以黄金分割比例0.618…的值2654435769，用有符号整型表示就是-1640531527，去掉符号后16进制表示为0x61c88647），其主要目的就是为了让哈希码能均匀的分布在2的n次方的数组里, 也就是<code>Entry[] table</code>中，这样做可以尽量避免hash冲突。</p></blockquote><h3 id="3、ThreadLocalMap中的set方法"><a href="#3、ThreadLocalMap中的set方法" class="headerlink" title="3、ThreadLocalMap中的set方法"></a>3、ThreadLocalMap中的set方法</h3><blockquote><p>​       <strong>ThreadLocalMap</strong>使用<strong>开发地址-线性探测法</strong>来解决哈希冲突，线性探测法的地址增量di = 1, 2, … 其中，i为探测次数。</p><p>​       <em>该方法一次探测下一个地址，直到有空的地址后插入</em>，<strong>若整个空间都找不到空余的地址，则产生溢出</strong>。假设当前table长度为16，也就是说如果计算出来key的hash值为14，如果table[14]上已经有值，并且其key与当前key不一致，那么就发生了hash冲突，这个时候将14加1得到15，取table[15]进行判断，这个时候如果还是冲突会回到0，取table[0],以此类推，直到可以插入。</p><p>按照上面的描述，可以把table看成一个环形数组。</p><p>先看一下线性探测相关的代码，从中也可以看出来table实际是一个环：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</span><br><span class="line">    ThreadLocal.ThreadLocalMap.Entry[] tab = table;</span><br><span class="line">    <span class="keyword">int</span> len = tab.length;</span><br><span class="line">    <span class="comment">//计算索引</span></span><br><span class="line">    <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用线性探测法查找元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">for</span> (ThreadLocal.ThreadLocalMap.Entry e = tab[i];</span><br><span class="line">         e != <span class="keyword">null</span>;</span><br><span class="line">         e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">        <span class="comment">//table[i]上key不为空，并且和当前key相同，更新value</span></span><br><span class="line">        <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">            e.value = value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * table[i]上的key为空，说明被回收了</span></span><br><span class="line"><span class="comment">         * 这个时候说明改table[i]可以重新使用，用新的key-value将其替换,并删除其他无效的entry</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">        replaceStaleEntry(key, value, i);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>笔记参考来源如下：</p></blockquote><ul><li>[1]  <a href="https://www.bilibili.com/video/av98868538/">黑马程序员-Java基础教程由浅入深全面解析ThreadLocal</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC学习笔记（四）-分支合并框架、CAS和volatile</title>
      <link href="posts/3341669189.html"/>
      <url>posts/3341669189.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="十、分支合并框架"><a href="#十、分支合并框架" class="headerlink" title="十、分支合并框架"></a>十、分支合并框架</h1><h2 id="10-1、ForkJoinPool"><a href="#10-1、ForkJoinPool" class="headerlink" title="10.1、ForkJoinPool"></a>10.1、ForkJoinPool</h2><blockquote><p><code>Fork</code>：把一个复杂任务进行分拆，大事化小</p><p><code>Join</code>：把分拆任务的结果进行合并</p></blockquote><h2 id="10-2、原理"><a href="#10-2、原理" class="headerlink" title="10.2、原理"></a>10.2、原理</h2><blockquote><p>类似归并算法，采取分而治之的思想</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302152043.jpg" alt="未命名文件 (3)"></p><h2 id="10-3、相关类"><a href="#10-3、相关类" class="headerlink" title="10.3、相关类"></a>10.3、相关类</h2><h3 id="1、ForkJoinPool"><a href="#1、ForkJoinPool" class="headerlink" title="1、ForkJoinPool"></a>1、ForkJoinPool</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302153214.png" alt="img"></p><blockquote><p><strong>分支合并池</strong> 类比=&gt;  <strong>线程池</strong></p></blockquote><h3 id="2、ForkJoinTask"><a href="#2、ForkJoinTask" class="headerlink" title="2、ForkJoinTask"></a>2、ForkJoinTask</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302153333.png" alt="img"></p><blockquote><p><strong>ForkJoinTask</strong>  类比=&gt;  <strong>FutureTask</strong></p></blockquote><h3 id="3、RecursiveTask"><a href="#3、RecursiveTask" class="headerlink" title="3、RecursiveTask"></a>3、RecursiveTask</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302153938.png" alt="img"></p><blockquote><p>递归任务：继承后可以实现递归(自己调自己)调用的任务</p></blockquote><ul><li>以斐波那契数列为例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> n;</span><br><span class="line">  Fibonacci(<span class="keyword">int</span> n) &#123; <span class="keyword">this</span>.n = n; &#125;</span><br><span class="line">  <span class="function">Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n </span><br><span class="line">      <span class="keyword">return</span> n;</span><br><span class="line">    Fibonacci f1 = <span class="keyword">new</span> Fibonacci(n - <span class="number">1</span>);</span><br><span class="line">    f1.fork();</span><br><span class="line">    Fibonacci f2 = <span class="keyword">new</span> Fibonacci(n - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> f2.compute() + f1.join();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-4、实例"><a href="#10-4、实例" class="headerlink" title="10.4、实例"></a>10.4、实例</h2><blockquote><p>使用RecursiveTask计算从begin乘到end，其中begin、end均由用户输入且begin &lt; end</p></blockquote><h3 id="1、创建一个MyTask类"><a href="#1、创建一个MyTask类" class="headerlink" title="1、创建一个MyTask类"></a>1、创建一个MyTask类</h3><blockquote><p>这个类定义继承至 <strong>RecursiveTask</strong> </p><p>在compute方法中创建两个MyTask对象，然后调用MyTask对象的fork方法开启重新开启两个线程，再次调用compute方法计算。</p><p>如果传入那两个MyTask对象 的end - begin &gt; 10，那么会在该对象中重新开启线程调用compute方法进行计算。</p><p>调用MyTask对象的join方法可以获得该对象<strong>compute</strong> 方法得到的结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer ADJUST_VALUE = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> begin;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> end;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(<span class="keyword">int</span> begin,<span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.begin = begin;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((end - begin) &lt;= ADJUST_VALUE) &#123;</span><br><span class="line">            <span class="comment">//如果end和begin的差值小于10，那么证明数据计算量小，此时不使用分支合并框架，直接计算</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = begin; i &lt;= end; i++) &#123;</span><br><span class="line">                result = result * i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> middle = (end + begin) / <span class="number">2</span>;</span><br><span class="line">        MyTask task01 = <span class="keyword">new</span> MyTask(begin,middle);</span><br><span class="line">        MyTask task02 = <span class="keyword">new</span> MyTask(middle + <span class="number">1</span>,end);</span><br><span class="line">        task01.fork();</span><br><span class="line">        task02.fork();</span><br><span class="line">        result = task01.join() + task02.join();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、使用ForkJoinPool调用MyTask中的compute方法"><a href="#2、使用ForkJoinPool调用MyTask中的compute方法" class="headerlink" title="2、使用ForkJoinPool调用MyTask中的compute方法"></a>2、使用ForkJoinPool调用MyTask中的compute方法</h3><ul><li>创建一个MyTask对象</li><li>创建一个ForkJoinPool对象</li><li>调用ForkJoinPool对象的submit方法，传入上面的MyTask对象，submit方法返回一个<strong>ForkJoinTask</strong> 对象</li><li>根据<strong>ForkJoinTask</strong>的get方法获取<code>MyTask</code>对象的<code>compute</code>方法的计算结果</li><li>关闭ForkJoinPool对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">    MyTask task = <span class="keyword">new</span> MyTask(<span class="number">1</span>,<span class="number">11</span>);</span><br><span class="line">    ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">    ForkJoinTask&lt;Integer&gt; joinTask = pool.submit(task);</span><br><span class="line">    Integer result = joinTask.get();</span><br><span class="line">    System.out.println(<span class="string">&quot;计算结果为:&quot;</span> + result);</span><br><span class="line">    pool.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、运行程序，查看结果"><a href="#3、运行程序，查看结果" class="headerlink" title="3、运行程序，查看结果"></a>3、运行程序，查看结果</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302161846.png" alt="image-20210302161845167"></p><h1 id="十一、悲观锁、乐观锁和CAS"><a href="#十一、悲观锁、乐观锁和CAS" class="headerlink" title="十一、悲观锁、乐观锁和CAS"></a>十一、悲观锁、乐观锁和CAS</h1><h2 id="11-1、悲观锁"><a href="#11-1、悲观锁" class="headerlink" title="11.1、悲观锁"></a>11.1、悲观锁</h2><blockquote><p>​       总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次<strong>在拿数据的时候都会上锁</strong>，这样别人想拿这个数据就会阻塞直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。再比如Java里面的同步原语<strong>synchronized关键字的实现就是悲观锁，volatile关键字虽然是synchronized关键字的轻量级实现，但是其无法保证原子性，所以一般也要搭配锁使用。</strong></p></blockquote><h2 id="11-2、乐观锁"><a href="#11-2、乐观锁" class="headerlink" title="11.2、乐观锁"></a>11.2、乐观锁</h2><blockquote><p>​       顾名思义，就是很乐观，每次去<strong>拿数据的时候都认为别人不会修改</strong>，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库提供的类似于write_condition机制，其实都是提供的乐观锁。在Java中java.util.concurrent.atomic包下面的原子变量类就是使用了乐观锁的一种实现方式CAS实现的。</p></blockquote><h2 id="11-3、CAS-Compare-And-Swap"><a href="#11-3、CAS-Compare-And-Swap" class="headerlink" title="11.3、CAS(Compare And Swap)"></a>11.3、CAS(Compare And Swap)</h2><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><blockquote><p>CAS就是根据<strong>乐观锁</strong>的设计思想来实现，在取数据的时候，判断一下在此期间是否有人修改，如果没有修改，则直接使用。</p><p><strong>CAS</strong> 是由硬件实现的</p><p>CAS可以将read-modify-write这类的操作（如i++）转换为原子操作</p><p>例如：AtomicInteger中的 <code>incrementAndGet()</code>就使用了CAS自旋锁</p></blockquote><ul><li>比如说有一个值0，我们需要对它进行递增，原本为保证数据一致性，我们需要对它加一把锁，但现在为了提高效率，我们使用自旋锁来完成。</li><li>读取当前值，当前需要递增的值<code>X</code>为0；计算结果值，<code>X</code> 的结果值应为1，在将1赋给<code>X</code> 之前，我们再次读取<code>X</code> 的值，看看<code>X</code>的值是否和第一次读取的内存值相同，如果相同，就将1赋给<code>X</code>。</li><li>如果当前读取到的值和第一次读取到的值不同，假设内存中<code>X</code>的值已经由0变为2，那么此时再次读取2，计算结果，得到3，在将3写给<code>X</code>之前，读取内存值，看看这次读取到的内存值是否和上一次读取到的值（2）相等，如果相等，将3赋给<code>X</code>，否则继续自旋，直到修改成功或者放弃操作。</li></ul><h3 id="2、CAS原理"><a href="#2、CAS原理" class="headerlink" title="2、CAS原理"></a>2、CAS原理</h3><blockquote><p><strong>CAS原理：</strong>CAS有三个操作数，即<strong>内存值v,旧的操作数a,新的操作数b</strong>。当我们需要更新v值为b时，首先我们判断v值是否和我们之前的所见值a相同，若相同则将v赋值为b，若不同，则什么都不做。是一种非阻塞算法**（non-blocking algorithm）.**在java中可以通过锁和循环CAS的方式来实现原子操作。</p><p><strong>Java中的实现：</strong>Java中 java.util.concurrent.atomic包相关类就是CAS的实现，通过自旋转CAS来尝试获得锁。</p><p>CAS自旋锁适用于锁使用者保持锁时间比较短的情况中，因为自旋锁使用者一般保持锁的时间很短，所以才选择自旋而不是睡眠。</p><p>Java通过<strong>锁</strong>和循环<strong>CAS</strong>的方式实现<strong>原子操作。</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302183545.png" alt="image-20210302183544760"></p><blockquote><p>CAS最终通过 <code>lock cmpxchg</code> 指令来实现</p></blockquote><h3 id="3、CAS存在的问题"><a href="#3、CAS存在的问题" class="headerlink" title="3、CAS存在的问题"></a>3、CAS存在的问题</h3><ul><li>ABA问题：</li></ul><blockquote><p>​        因为CAS在进行操作的时候，总是需要比较新的操作数和旧的操作数，如果相同则更新。但是<strong>如果新的操作数经过两次修改之后返回原来的值</strong>，那么久出现了ABA问题。<strong>解决问题的方法就是增加一个版本号</strong>，不仅仅通过检查值得变化来确定是否更新。</p><p>比如两个线程</p></blockquote><ul><li>线程1 查询A的值为a，与旧值a比较，</li><li>线程2 查询A的值为a，与旧值a比较，相等，更新为b值</li><li>线程2 查询A的值为b，与旧值b比较，相等，更新为a值</li><li>线程1 相等，更新B的值为c</li></ul><blockquote><p>可以看到这样的情况下，线程1 可以正常 进行CAS操作，将值从a变为c 但是在这之间，实际A值已经发了a-&gt;b  b-&gt;a的转换</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302182802.png" alt="image-20210302182801422"></p><h3 id="4、使用CAS实现线程安全的计数器"><a href="#4、使用CAS实现线程安全的计数器" class="headerlink" title="4、使用CAS实现线程安全的计数器"></a>4、使用CAS实现线程安全的计数器</h3><blockquote><p>编写一个CASCounter类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CASCounter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expectedValue 期望值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">compareAndSwap</span><span class="params">(<span class="keyword">long</span> expectedValue,<span class="keyword">long</span> newValue)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果当前value的值与期望的expectValue值一样，就把当前value字段的值换为newValue值</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(value == expectedValue) &#123;</span><br><span class="line">                value = newValue;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incrementAndGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> oldValue;</span><br><span class="line">        <span class="keyword">long</span> newValue;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            oldValue = value;</span><br><span class="line">            newValue = oldValue + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(!compareAndSwap(oldValue,newValue));</span><br><span class="line">        <span class="keyword">return</span> newValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建100个线程，运行程序，查看结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASCounter casCounter = <span class="keyword">new</span> CASCounter();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        System.out.println(casCounter.incrementAndGet());</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302225835.png" alt="image-20210302225833762"></p><h2 id="11-4、CAS的ABA问题"><a href="#11-4、CAS的ABA问题" class="headerlink" title="11.4、CAS的ABA问题"></a>11.4、CAS的ABA问题</h2><blockquote><p>​        CAS实现原子操作背后有一个假设：共享变量的当前值和当前线程提供的期望值相同，就认为这个变量没有被其他线程修改过。</p><p>​        实际上这种假设不一定总是成立，设有共享变量 <code>count</code> = 0</p><ul><li>A线程对 <code>count</code> 值修改为10</li><li>B线程对 <code>count</code> 值修改为20</li><li>C线程对 <code>count</code> 值修改为0</li></ul><p>​        当前线程看到 <code>count</code> 变量的值现在为0，现在能否认为 <code>count</code> 变量的值没有被其他线程更新呢？这样的结果能不能被接受？</p><p>​        如果想要规避ABA问题，可以为共享变量引入一个修订号（版本号、时间戳），每次修改共享变量时，相应的修订号就会增加一。</p></blockquote><h2 id="11-5、原子变量类"><a href="#11-5、原子变量类" class="headerlink" title="11.5、原子变量类"></a>11.5、原子变量类</h2><blockquote><p>​       原子变量类基于CAS实现，当对共享变量进行 <strong>read-modify-write</strong> 更新操作时，使用原子变量类可以保障操作的原子性和可见性。对变量的 <strong>read-modify-write</strong> 更新操作是指当前的操作不是一个简单的复制，而是变量的新值依赖于变量的旧值，如自增操作i++.</p><p>​        原子变量类有十二个</p></blockquote><table><thead><tr><th>分组</th><th>原子变量类</th></tr></thead><tbody><tr><td>基础数据型</td><td>AtomicInteger、AtomicLong、AtomicBoolean</td></tr><tr><td>数组型</td><td>AtomicIntegerArray、AtomicLongArray、AtomicReferenceArray</td></tr><tr><td>字段更新器</td><td>AtomicIntegerFieldUpdater、AtomicLongFieldUpdater、AtomicReferenceFieldUpdater</td></tr><tr><td>引用型</td><td>AtomicReference、AtomicStampedReference、AtomicMarlableReference</td></tr></tbody></table><h2 id="11-6、使用AtomicLong定义计数器"><a href="#11-6、使用AtomicLong定义计数器" class="headerlink" title="11.6、使用AtomicLong定义计数器"></a>11.6、使用AtomicLong定义计数器</h2><h1 id="十二、轻量级同步机制-volatile"><a href="#十二、轻量级同步机制-volatile" class="headerlink" title="十二、轻量级同步机制-volatile"></a>十二、轻量级同步机制-volatile</h1><h2 id="12-1、volatile-的作用"><a href="#12-1、volatile-的作用" class="headerlink" title="12.1、volatile 的作用"></a>12.1、volatile 的作用</h2><blockquote><p>​        volatile关键字的作用是使变量在多个线程之间可见，解决了变量的<strong>可见性</strong></p><p>​        volatile让变量每次在使用的时候，都从<strong>主存</strong>中取。而不是从各个线程的“工作内存”。volatile变量对于保证每次访问的线程都能<strong>得到当前volatile变量的最新值</strong>，但是<strong>volatile变量并不保证并发的正确性。</strong></p><p>注：volatile 关键字仅仅是保证所有线程均从主内存中获取数据，<strong>无法保证原子性</strong></p></blockquote><h2 id="12-2、volatile和synchronized的区别"><a href="#12-2、volatile和synchronized的区别" class="headerlink" title="12.2、volatile和synchronized的区别"></a>12.2、volatile和synchronized的区别</h2><ul><li>volatile 关键字是线程同步的轻量级实现，所以 volatile 性能肯定比 synchronized要好；</li><li>volatile 只能修饰变量，而 synchronized 可以修饰代码块和方法</li><li>随着JDK新版本的发布，synchronized 的执行效率也有了很大的提升，所以开发中synchronized的使用比率还是很大的。</li><li>多线程访问 volatile 变量不会发生阻塞，而 synchronized 可能会阻塞；</li><li>volatile 可以保证数据的可见性，但是不能保证原子性，而synchronized既可以保证原子性，也可以保证可见性。</li><li>关键字 volatile 解决的是变量在多个线程之间的可见性；synchronized 可以解决多个线程之间访问公共资源的同步性</li></ul>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础学习（二）-集合流式编程</title>
      <link href="posts/3012219674.html"/>
      <url>posts/3012219674.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、集合流的简介"><a href="#一、集合流的简介" class="headerlink" title="一、集合流的简介"></a>一、集合流的简介</h1><h2 id="1-1、集合流式编程的简介"><a href="#1-1、集合流式编程的简介" class="headerlink" title="1.1、集合流式编程的简介"></a>1.1、集合流式编程的简介</h2><blockquote><p>Stream是JDK8后出现的新特性，也是JDK8中最值得学习的两种新特性之一（另一个是Lambda表达式）。</p><p>Stream是对集合操作的增强，流不是集合的元素，不是一种数据结构，不负责数据存储，流更像是一个迭代器，可以单向遍历一个集合中的每一个元素，并且不可循环。</p></blockquote><h2 id="1-2、为什么要使用集合流式编程？"><a href="#1-2、为什么要使用集合流式编程？" class="headerlink" title="1.2、为什么要使用集合流式编程？"></a>1.2、为什么要使用集合流式编程？</h2><blockquote><p>有些时候，对集合中的元素进行操作的时候，需要使用到其他操作的结果，在这个过程中，集合的流式据程可以大幅度的简化代码的数量。将数据源中的数据，读取到一个流中，可以对这个流中的数据进行操作（删除、过滤，映射..…）。每次的操作结果也是一个流对象，可以对这个流再进行其他的操作。</p></blockquote><h2 id="1-3、使用步骤"><a href="#1-3、使用步骤" class="headerlink" title="1.3、使用步骤"></a>1.3、使用步骤</h2><blockquote><p>通常情况下，对集合中的数据使用流式编程，需要经过以下三步：</p></blockquote><ul><li>获取数据源，将数据源中的数据读取到流中</li><li>对流中的数据进行各种各样的处理。</li><li>对流中的数据进行整合处理。</li></ul><blockquote><p>​        在上述三个过程中，过程2中，有若干方法，可以对流中的数据进行各种各样的操作，并且返回流对象本身，这样的操作，被称为<strong>中间操作</strong>，过程3中，有若干方法，可以对流中的数据进行各种处理，并关闭流，这样的操作，被称为<strong>最终操作</strong>。</p><p>​        在中间操作和最终操作中，基本上所有的方法参数都是函数式接口，可以使用lambda表达式来实现，使用集合的流式编程，来简化代码量，是需要对lambda表达式做到熟练掌握。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301194131.png" alt="image-20210301194130742"></p><h1 id="二、数据源的获取"><a href="#二、数据源的获取" class="headerlink" title="二、数据源的获取"></a>二、数据源的获取</h1><h2 id="2-1、数据源简介"><a href="#2-1、数据源简介" class="headerlink" title="2.1、数据源简介"></a>2.1、数据源简介</h2><blockquote><p>​        数据源，顾名思义，既是流中的数据的来源。是集合的流式编程的第一步，将数据源中的数据读取到流中，进行处理。</p><p>​        注意：<strong>将数据读取到流中进行处理的时候，与数据源中的数据没有关系。</strong>也就是说，<strong>中间操作对流中的数据进行处理、过滤、映射、排序..，此时是不会影响数据源中的数据的。</strong></p></blockquote><h2 id="2-2、数据源获取"><a href="#2-2、数据源获取" class="headerlink" title="2.2、数据源获取"></a>2.2、数据源获取</h2><blockquote><p>​        这个过程，其实是将一个容器中的数据，读取到一个流中，因此<strong>无论什么容器作为数据源，读取到流中的方法返回值一定是一个Stream对象。</strong></p></blockquote><h3 id="1、集合作为数据源"><a href="#1、集合作为数据源" class="headerlink" title="1、集合作为数据源"></a>1、集合作为数据源</h3><ul><li>调用<strong>集合对象</strong>的<strong>stream()方法</strong>，这个方法会返回一个<strong>Stream对象。</strong></li></ul><blockquote><p>这里以ArrayList对象为例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 实例化一个集合</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//2 填充集合中的元素</span></span><br><span class="line">Collections.addAll(list,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">//3 读取集合中的元素，将其读取到流中</span></span><br><span class="line">Stream&lt;Integer&gt; stream = list.stream();</span><br><span class="line"><span class="comment">//4 输出stream对象</span></span><br><span class="line">System.out.println(stream);</span><br></pre></td></tr></table></figure><blockquote><p>运行程序，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301200137.png" alt="image-20210301200137447"></p><ul><li>调用<strong>集合对象</strong>的<strong>parallelStream()方法</strong>，这个方法会返回一个<strong>Stream对象。</strong></li></ul><blockquote><p>区别：stram()方法获取的是一个<strong>同步流</strong>，而parallelStream()方法返回一个<strong>并发流</strong>。</p></blockquote><h3 id="2、数组作为数据源"><a href="#2、数组作为数据源" class="headerlink" title="2、数组作为数据源"></a>2、数组作为数据源</h3><ul><li>调用数据工具类 <strong>Arrays</strong> 的 <strong>stream()</strong> 方法，传入转换为流对象的数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 实例化一个数组</span></span><br><span class="line">Integer[] arr = <span class="keyword">new</span> Integer[]&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="comment">//2 读取数组中的数据到流中，得到一个流对象，使用Arrays工具类中的stream方法</span></span><br><span class="line">Stream&lt;Integer&gt; stream = Arrays.stream(arr);</span><br><span class="line"><span class="comment">//3 输出得到的Stream对象</span></span><br><span class="line">System.out.println(stream);</span><br></pre></td></tr></table></figure><blockquote><p>运行程序</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301201154.png" alt="image-20210301201154216"></p><ul><li>将基本数据类型数组转换为流对象，同样调用数据工具类 <strong>Arrays</strong> 的 <strong>stream()</strong> 方法，会根据传入数组的类型返回对应的流对象。</li></ul><blockquote><p>这里以int类型数组为例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 实例化一个数组</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="comment">//2 读取数组中的数据到流中，得到一个流对象，使用Arrays工具类中的stream方法</span></span><br><span class="line">IntStream stream = Arrays.stream(arr);</span><br><span class="line"><span class="comment">//3 输出得到的Stream对象</span></span><br><span class="line">System.out.println(stream);</span><br></pre></td></tr></table></figure><h1 id="三、最终操作"><a href="#三、最终操作" class="headerlink" title="三、最终操作"></a>三、最终操作</h1><blockquote><p>首先编写一个getStream静态方法，这个方法用于将一个整数集合转换为一个Stream对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Integer&gt; <span class="title">getStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1 实例化一个集合</span></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//2 填充集合中的元素</span></span><br><span class="line">    Collections.addAll(list,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> list.stream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-1、简介"><a href="#3-1、简介" class="headerlink" title="3.1、简介"></a>3.1、简介</h2><blockquote><p>​        将流中的数据整合到一起，可以存入一个集合，也可以直接对流中的数据进行遍历、数据统计.…，通过最终操作，需要掌握如何从流中提取出来我们想要的信息。<br>​        注意事项：最终操作，之所以叫最终操作，是因为，在最终操作执行结束后，会关闭这个流，流中的所有数据都会销毁，如果使用一个已经关闭了的流，会出现异常。</p></blockquote><h2 id="3-2、collect"><a href="#3-2、collect" class="headerlink" title="3.2、collect"></a>3.2、collect</h2><blockquote><p>​        <strong>将流中的数据收集到一起</strong>，对这些数据进行一些处理，最常见的处理，就是<strong>将流中的数据存入一个集合</strong>，collect方法的参数，是一个Collector接口，而且这个接口并不是一个函数式接口，实现这个接口，可以自定义收集的规则，但是，绝大部分情况下，不需要自定义。</p><p>​        直接使用 <code>Collectors</code> 工具类提供的方法即可。</p></blockquote><ul><li>将流中的数据转成List</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Collections.addAll(list,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line">List&lt;Integer&gt; integerList = list.stream().collect(Collectors.toList());</span><br><span class="line">System.out.println(integerList);</span><br></pre></td></tr></table></figure><blockquote><p>运行结果如下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301204010.png" alt="image-20210301204010558"></p><ul><li>将流中的数据转成一个Set</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Collections.addAll(list,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line">Set&lt;Integer&gt; set = list.stream().collect(Collectors.toSet());</span><br><span class="line">System.out.println(set);</span><br></pre></td></tr></table></figure><blockquote><p>运行结果如下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301204701.png" alt="image-20210301204701061"></p><ul><li>将流中的数据转换为一个Map，分别实现<strong>键的生成规则</strong>和<strong>值的生成规则</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Collections.addAll(list,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line">Map&lt;String, Integer&gt; map = list.stream().collect(Collectors.toMap(ele -&gt; ele + <span class="string">&quot;&quot;</span>,ele -&gt; ele));</span><br><span class="line">System.out.println(map);</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301205023.png" alt="image-20210301205023637"></p><h2 id="3-3、reduce"><a href="#3-3、reduce" class="headerlink" title="3.3、reduce"></a>3.3、reduce</h2><blockquote><p>将<strong>流中的数据</strong>以一定的规则<strong>聚合</strong>起来</p><p>reduce方法需要传入一个 BinaryOperator<T> 函数式接口对象，这个接口是BiFunction的子接口</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301211315.png" alt="image-20210301211315278"></p><blockquote><p>在 <strong>BinaryOperator</strong> 接口中，又对 <strong>BiFunction</strong> 中的泛型做了进一步限制，故 <strong>BinaryOperator</strong> 的apply方法中参数和返回值都是一个类型</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301211548.png" alt="image-20210301211548880"></p><ul><li>使用reduce函数实现元素相加</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 读取数据源，得到流对象</span></span><br><span class="line">Stream&lt;Integer&gt; dataSource = getStream();</span><br><span class="line"><span class="comment">//2 最终操作</span></span><br><span class="line">Integer sum = dataSource.reduce((p1, p2) -&gt; p1 + p2).get();</span><br><span class="line">System.out.println(sum);</span><br></pre></td></tr></table></figure><blockquote><p>上面代码的执行逻辑为：</p><p>将集合第一二个元素作为p1、p2，然后将得到的结果作为p1，第三个元素作为p2，再次执行函数，以此类推</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301212459.png" alt="image-20210301212459107"></p><blockquote><p>运行程序，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301212621.png" alt="image-20210301212621194"></p><h2 id="3-4、count"><a href="#3-4、count" class="headerlink" title="3.4、count"></a>3.4、count</h2><blockquote><p>统计流中的<strong>元素数量</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> count = getStream().count();</span><br><span class="line">System.out.println(<span class="string">&quot;流中数据个数为:&quot;</span> + count);</span><br></pre></td></tr></table></figure><blockquote><p>执行程序，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301213228.png" alt="image-20210301213228442"></p><h2 id="3-5、foreach"><a href="#3-5、foreach" class="headerlink" title="3.5、foreach"></a>3.5、foreach</h2><blockquote><p>foreach方法需要传入一个 Consumer函数接口对象，该接口中有一个accept抽象方法，accept方法<strong>接受一个参数</strong>，<strong>且没有返回值</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs this operation on the given argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the input argument</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>遍历流中的元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getStream().forEach(ele -&gt; &#123;</span><br><span class="line">    System.out.println(ele);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>配合方法引用，以上代码可以简化为：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getStream().forEach(System.out::println);</span><br></pre></td></tr></table></figure><h2 id="3-6、max-amp-min"><a href="#3-6、max-amp-min" class="headerlink" title="3.6、max&amp;min"></a>3.6、max&amp;min</h2><blockquote><p>获取流中的最大元素、最小元素</p><p>Stream类中 max 和 min 方法源码如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Optional&lt;T&gt; <span class="title">max</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> T&gt; comparator)</span></span>;</span><br><span class="line"><span class="function">Optional&lt;T&gt; <span class="title">min</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> T&gt; comparator)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>max 和 min 方法需要传入一个 Comparator 接口对象，该接口中有一个compare方法，用于自定义大小比较规则</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(T o1, T o2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>获取流中最大值最小值的代码如下，传入Integer类中的compareTo方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer max = getStream().max(Integer::compareTo).get();</span><br><span class="line">System.out.println(<span class="string">&quot;集合中最大的元素为：&quot;</span> + max);</span><br><span class="line">Integer min = getStream().min(Integer::compareTo).get();</span><br><span class="line">System.out.println(<span class="string">&quot;集合中最大的元素为：&quot;</span> + min);</span><br></pre></td></tr></table></figure><blockquote><p>Integer类中实现了Comparator方法，重写了compareTo方法</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301215514.png" alt="image-20210301215514697"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Integer anotherInteger)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> compare(<span class="keyword">this</span>.value, anotherInteger.value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &lt; y) ? -<span class="number">1</span> : ((x == y) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行程序，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301215320.png" alt="image-20210301215320169"></p><h2 id="3-7、Matching"><a href="#3-7、Matching" class="headerlink" title="3.7、Matching"></a>3.7、Matching</h2><ul><li>allMatch：只有当流中所有的元素，都匹配指定的规则时，才会返回true</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> result = getStream().allMatch(ele -&gt; ele &gt; <span class="number">50</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;集合中是否所有数据都大于50？：&quot;</span> + result);</span><br></pre></td></tr></table></figure><blockquote><p>运行程序，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301220226.png" alt="image-20210301220226746"></p><ul><li>anyMatch：只要流中有任意数据满足指定规则，就会返回true</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> result = getStream().anyMatch(ele -&gt; ele % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;集合中是否存在偶数？&quot;</span> + result);</span><br></pre></td></tr></table></figure><blockquote><p>运行程序，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301220436.png" alt="image-20210301220436936"></p><ul><li>noneMatch：只有当流中的所有元素，都不满足指定的规则时，才会返回true</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> result = getStream().noneMatch(ele -&gt; ele &gt; <span class="number">50</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;集合是否都小于50？&quot;</span> + result);</span><br></pre></td></tr></table></figure><blockquote><p>查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301220837.png" alt="image-20210301220837820"></p><h2 id="3-8、find"><a href="#3-8、find" class="headerlink" title="3.8、find"></a>3.8、find</h2><h3 id="1、findFirst"><a href="#1、findFirst" class="headerlink" title="1、findFirst"></a>1、findFirst</h3><blockquote><p>从流中获取一个元素（获取开头的元素）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer integer = getStream().findFirst().get();</span><br><span class="line">System.out.println(<span class="string">&quot;第一个元素为:&quot;</span> + integer);</span><br></pre></td></tr></table></figure><blockquote><p>运行程序，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301221400.png" alt="image-20210301221400180"></p><h3 id="2、findAny"><a href="#2、findAny" class="headerlink" title="2、findAny"></a>2、findAny</h3><blockquote><p>从流中获取一个元素（一般情况下，是获取的开头的元素）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer integer = getStream().findAny().get();</span><br><span class="line">System.out.println(<span class="string">&quot;寻找的元素为:&quot;</span> + integer);</span><br></pre></td></tr></table></figure><blockquote><p>运行程序</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301221502.png" alt="image-20210301221502073"></p><h3 id="3、说明"><a href="#3、说明" class="headerlink" title="3、说明"></a>3、说明</h3><blockquote><p>​        上面的两个方法，在绝大部分情况下，是完全相同的，但是在<strong>多线程</strong>的环境下，<code>findFirst</code> 和 <code>findAny</code> 返回的结果可能不一样。</p><p>​        <strong>findAny在并行流中获取的可能不是首元素</strong></p></blockquote><h2 id="3-9、IntStream额外的最终操作"><a href="#3-9、IntStream额外的最终操作" class="headerlink" title="3.9、IntStream额外的最终操作"></a>3.9、IntStream额外的最终操作</h2><h3 id="1、准备一个数组，转换为IntStream"><a href="#1、准备一个数组，转换为IntStream" class="headerlink" title="1、准备一个数组，转换为IntStream"></a>1、准备一个数组，转换为IntStream</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntStream <span class="title">getIntStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、获取数据最大值"><a href="#2、获取数据最大值" class="headerlink" title="2、获取数据最大值"></a>2、获取数据最大值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(getIntStream().max().getAsInt());</span><br></pre></td></tr></table></figure><h3 id="3、获取数据最小值"><a href="#3、获取数据最小值" class="headerlink" title="3、获取数据最小值"></a>3、获取数据最小值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(getIntStream().min().getAsInt());</span><br></pre></td></tr></table></figure><h3 id="4、获取数组和"><a href="#4、获取数组和" class="headerlink" title="4、获取数组和"></a>4、获取数组和</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(getIntStream().sum());</span><br></pre></td></tr></table></figure><h3 id="5、获取流中数据数量"><a href="#5、获取流中数据数量" class="headerlink" title="5、获取流中数据数量"></a>5、获取流中数据数量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(getIntStream().count());</span><br></pre></td></tr></table></figure><h3 id="6、获取流中所有数据的平均值"><a href="#6、获取流中所有数据的平均值" class="headerlink" title="6、获取流中所有数据的平均值"></a>6、获取流中所有数据的平均值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(getIntStream().average().getAsDouble());</span><br></pre></td></tr></table></figure><h3 id="7、获取到一个对流中数据的分析结果"><a href="#7、获取到一个对流中数据的分析结果" class="headerlink" title="7、获取到一个对流中数据的分析结果"></a>7、获取到一个对流中数据的分析结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IntSummaryStatistics statistics = getIntStream().summaryStatistics();</span><br></pre></td></tr></table></figure><ul><li>获取最大值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;最大值为:&quot;</span> + statistics.getMax());</span><br></pre></td></tr></table></figure><ul><li>获取最小值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;最小值为:&quot;</span> + statistics.getMin());</span><br></pre></td></tr></table></figure><ul><li>获取数据和</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;和为:&quot;</span> + statistics.getSum());</span><br></pre></td></tr></table></figure><ul><li>获取平均值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;平均值为:&quot;</span> + statistics.getAverage());</span><br></pre></td></tr></table></figure><h2 id="3-10、注意事项"><a href="#3-10、注意事项" class="headerlink" title="3.10、注意事项"></a>3.10、注意事项</h2><blockquote><p>在执行完以上的<strong>最终操作</strong>后，流将会被关闭，流中所有数据都会被销毁，如果去操作一个已经关闭的流会抛出异常。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301210239.png" alt="image-20210301210239525"></p><h1 id="四、中间操作"><a href="#四、中间操作" class="headerlink" title="四、中间操作"></a>四、中间操作</h1><blockquote><p>创建一个静态内部类Student，构造函数、Getter/Setter和toString省略不写</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><blockquote><p>编写一个getDataSource方法，这个方法用于返回一个Stream对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Student&gt; <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Collections.addAll(students,</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;wuhu1&quot;</span>,<span class="number">18</span>,<span class="number">98</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;wuhu2&quot;</span>,<span class="number">19</span>,<span class="number">40</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;wuhu3&quot;</span>,<span class="number">21</span>,<span class="number">50</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;wuhu4&quot;</span>,<span class="number">15</span>,<span class="number">60</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;wuhu5&quot;</span>,<span class="number">12</span>,<span class="number">92</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;wuhu6&quot;</span>,<span class="number">11</span>,<span class="number">61</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;wuhu7&quot;</span>,<span class="number">19</span>,<span class="number">96</span>)</span><br><span class="line">            );</span><br><span class="line">    <span class="keyword">return</span> students.stream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-1、简介"><a href="#4-1、简介" class="headerlink" title="4.1、简介"></a>4.1、简介</h2><blockquote><p>​        将数据从数据源中读取到流中，中间操作，就是对流中的数据进行各种各样的操作、处理，中间操作可以连续操作，<strong>每一个操作的返回值都是一个Stream对象</strong>，可以继续进行其他操作，直到操作结束。</p></blockquote><h2 id="4-2、filter"><a href="#4-2、filter" class="headerlink" title="4.2、filter"></a>4.2、filter</h2><blockquote><p>条件过滤，仅保留<strong>满足指定条件的数据</strong>，其他不满足的数据都会被<strong>剔除</strong>。</p><p>Stream类中 filter 方法如下，这个方法要求传入一个Predicate接口对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">filter</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>Predicate接口中的抽象方法如下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301230501.png" alt="image-20210301230500980"></p><h3 id="1、过滤掉集合中成绩不及格的学生"><a href="#1、过滤掉集合中成绩不及格的学生" class="headerlink" title="1、过滤掉集合中成绩不及格的学生"></a>1、过滤掉集合中成绩不及格的学生</h3><blockquote><p>筛选条件为 <code>学生成绩 &gt;= 60</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Student&gt; stream = getDataSource();</span><br><span class="line">stream.filter(ele -&gt; ele.score &gt;= <span class="number">60</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><blockquote><p>运行程序，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301231048.png" alt="image-20210301231048054"></p><h3 id="2、过滤掉集合中未成年的学生"><a href="#2、过滤掉集合中未成年的学生" class="headerlink" title="2、过滤掉集合中未成年的学生"></a>2、过滤掉集合中未成年的学生</h3><blockquote><p>筛选条件为 <code>学生年龄 &gt;= 18</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Student&gt; stream = getDataSource();</span><br><span class="line">stream.filter(ele -&gt; ele.age &gt;= <span class="number">18</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><blockquote><p>运行程序</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301231251.png" alt="image-20210301231251567"></p><h2 id="4-3、distinct"><a href="#4-3、distinct" class="headerlink" title="4.3、distinct"></a>4.3、distinct</h2><blockquote><p>去除集合中<strong>重复的元素</strong>，这个方法 <strong>没有</strong> 参数，<strong>去重的规则与HashSet相同。</strong> </p><p>先比较hashCode，如果hashCode结果相同，那么使用equals方法比较</p></blockquote><ul><li>重写Student类中的equals和hashCode方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Student student = (Student) o;</span><br><span class="line">    <span class="keyword">return</span> age == student.age &amp;&amp;</span><br><span class="line">            score == student.score &amp;&amp;</span><br><span class="line">            name.equals(student.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hash(name, age, score);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改数据源，添加重复数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Student&gt; <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Collections.addAll(students,</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;wuhu1&quot;</span>,<span class="number">18</span>,<span class="number">98</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;wuhu2&quot;</span>,<span class="number">19</span>,<span class="number">40</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;wuhu2&quot;</span>,<span class="number">19</span>,<span class="number">40</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;wuhu3&quot;</span>,<span class="number">21</span>,<span class="number">50</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;wuhu3&quot;</span>,<span class="number">21</span>,<span class="number">50</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;wuhu4&quot;</span>,<span class="number">15</span>,<span class="number">60</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;wuhu5&quot;</span>,<span class="number">12</span>,<span class="number">92</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;wuhu5&quot;</span>,<span class="number">12</span>,<span class="number">92</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;wuhu5&quot;</span>,<span class="number">12</span>,<span class="number">92</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;wuhu6&quot;</span>,<span class="number">11</span>,<span class="number">61</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;wuhu7&quot;</span>,<span class="number">19</span>,<span class="number">96</span>)</span><br><span class="line">            );</span><br><span class="line">    <span class="keyword">return</span> students.stream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用Stream类中的distinct方法去重</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Student&gt; stream = getDataSource();</span><br><span class="line">stream.distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure><ul><li>运行程序，查看结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301232417.png" alt="image-20210301232416852"></p><h2 id="4-4、sorted"><a href="#4-4、sorted" class="headerlink" title="4.4、sorted"></a>4.4、sorted</h2><blockquote><p>Stream类中有两个sorted方法，一个有参，一个无参</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">sorted</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">sorted</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> T&gt; comparator)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="1、有参sorted"><a href="#1、有参sorted" class="headerlink" title="1、有参sorted"></a>1、有参sorted</h3><blockquote><p>有参 sorted 方法需要我们传入一个Comparator接口对象，我们需要自定义比较大小规则。</p></blockquote><ul><li>在调用sorted时传入一个Comparator接口对象，自定义比较大小规则</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Student&gt; stream = getDataSource();</span><br><span class="line">stream.sorted((s1,s2) -&gt; s1.age - s2.age).forEach(System.out::println);</span><br></pre></td></tr></table></figure><ul><li>查看结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301233953.png" alt="image-20210301233953340"></p><h3 id="2、无参sorted"><a href="#2、无参sorted" class="headerlink" title="2、无参sorted"></a>2、无参sorted</h3><blockquote><p>将流中的数据，按照其对应的类实现的Comparable接口提供的比较规则进行排序。</p></blockquote><ul><li>让Student类<strong>实现Comparable接口</strong>，<strong>重写compareTo方法</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> score - student.score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>根据 Student 中 compareTo 方法定义的规则进行排序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Student&gt; stream = getDataSource();</span><br><span class="line">stream.sorted().forEach(System.out::println);</span><br></pre></td></tr></table></figure><ul><li>查看结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301233726.png" alt="image-20210301233726676"></p><h2 id="4-5、limit-amp-skip"><a href="#4-5、limit-amp-skip" class="headerlink" title="4.5、limit &amp; skip"></a>4.5、limit &amp; skip</h2><blockquote><p><code>limit</code> ：限制，截取流中指定数量的元素</p><p><code>skip</code>：跳过，跳过流中指定数量的元素</p></blockquote><h3 id="1、limit"><a href="#1、limit" class="headerlink" title="1、limit"></a>1、limit</h3><blockquote><p>获取成绩前五名的学生信息</p></blockquote><ul><li>修改学生类中的compareTo方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> student.score - score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getDataSource().sorted().limit(<span class="number">5</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><ul><li>查看结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301234724.png" alt="image-20210301234724840"></p><h3 id="2、skip"><a href="#2、skip" class="headerlink" title="2、skip"></a>2、skip</h3><blockquote><p>跳过集合中的前五个学生，从第六个学生开始打印</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getDataSource().sorted().skip(<span class="number">5</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><blockquote><p>查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301234956.png" alt="image-20210301234956322"></p><h3 id="3、limit-amp-skip"><a href="#3、limit-amp-skip" class="headerlink" title="3、limit&amp;skip"></a>3、limit&amp;skip</h3><blockquote><p>输出集合中成绩在第三-第七的学生信息，使用limit和skip</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getDataSource().sorted().skip(<span class="number">2</span>).limit(<span class="number">5</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><blockquote><p>运行，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301235129.png" alt="image-20210301235129603"></p><h2 id="4-6、map-amp-flatMap"><a href="#4-6、map-amp-flatMap" class="headerlink" title="4.6、map&amp;flatMap"></a>4.6、map&amp;flatMap</h2><h3 id="1、map"><a href="#1、map" class="headerlink" title="1、map"></a>1、map</h3><blockquote><p>map：<strong>提供一个映射规则，对流中的数据进行映射，用新的数据替换旧的数据</strong></p><p>Stream类中map的源码如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;R&gt; <span class="function">Stream&lt;R&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends R&gt; mapper)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>其中Function接口是一个<strong>传入一个参数</strong>，<strong>返回一个返回值</strong>的函数式接口</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302121510.png" alt="image-20210302121509802"></p><blockquote><p>实际需求：<strong>获取所有学生的名字</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Student&gt; stream = getDataSource();</span><br><span class="line">List&lt;String&gt; stuNameList = stream.map(ele -&gt; ele.getName()).collect(Collectors.toList());</span><br><span class="line">stuNameList.stream().forEach(System.out::println);</span><br></pre></td></tr></table></figure><blockquote><p>运行程序，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302122007.png" alt="image-20210302122007006"></p><blockquote><p>上面的代码也可以使用Student类中的方法引用来实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Student&gt; stream = getDataSource();</span><br><span class="line">List&lt;String&gt; stuNameList = stream.map(Student::getName).collect(Collectors.toList());</span><br><span class="line">stuNameList.stream().forEach(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="2、flatMap"><a href="#2、flatMap" class="headerlink" title="2、flatMap"></a>2、flatMap</h3><blockquote><p>flatMap：<strong>扁平化映射</strong>，一般用于map映射后，流中的数据是一个容器，而我们需要对容器中的数据进行处理，此时我们可以使用扁平化映射，将容器中的数据直接读取到流中。</p></blockquote><ul><li>模拟：统计字符串数组中所有出现的字符</li></ul><blockquote><p>思路如下：</p><ul><li>将字符串数组中的每一个字符串都切割为一个字符串数组</li><li>将字符串数组中的数据进行扁平化映射</li><li>对流中的字符串使用distinct进行去重</li><li>打印</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String[] array = &#123;<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;World&quot;</span>,<span class="string">&quot;Hehe&quot;</span>&#125;;</span><br><span class="line">Stream&lt;String&gt; stringStream = Arrays.stream(array);</span><br><span class="line"><span class="comment">//统计字符串中所有出现的字符</span></span><br><span class="line">stringStream.map(s -&gt; s.split(<span class="string">&quot;&quot;</span>))</span><br><span class="line">            .flatMap(Arrays::stream)</span><br><span class="line">            .distinct()</span><br><span class="line">            .forEach(System.out::println);</span><br></pre></td></tr></table></figure><ul><li>运行程序，查看结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302124011.png" alt="image-20210302124010884"></p><h1 id="五、Collectors工具类"><a href="#五、Collectors工具类" class="headerlink" title="五、Collectors工具类"></a>五、Collectors工具类</h1><h2 id="5-1、概念"><a href="#5-1、概念" class="headerlink" title="5.1、概念"></a>5.1、概念</h2><blockquote><p>Collectors 是一个<strong>工具类</strong>，里面封装了很多方法，可以很方便的获取到一个<strong>Collector接口的实现类对象</strong>，从而可以使用<strong>collect方法</strong>，对流中的数据进行各种各样的<strong>处理和整合</strong>。</p></blockquote><h2 id="5-2、常用方法"><a href="#5-2、常用方法" class="headerlink" title="5.2、常用方法"></a>5.2、常用方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Collectors.toList()</td><td>将流中的数据，整合到一个 <code>List</code> 集合中</td></tr><tr><td>Collectors.toSet()</td><td>将流中的数据，整合到一个 <code>Set</code> 集合中</td></tr><tr><td>Collectors.toMap()</td><td>将流中的数据，整合到一个 <code>Map</code> 集合中</td></tr><tr><td>maxBy()</td><td>按照指定的规则，找到流中最大的元素，等同与 <code>max</code></td></tr><tr><td>minBy()</td><td>按照指定的规则，找到流中最小的元素，等同与 <code>min</code></td></tr><tr><td>joining()</td><td>将流中的数据拼接为一个字符串，注意：只能操作流中是 <code>String</code> 的数据</td></tr><tr><td>summingInt()</td><td>将流中的数据映射成 <code>int</code> 类型的数据，并<strong>求和</strong></td></tr><tr><td>averagingInt()</td><td>将流中的数据映射成 <code>int</code> 类型的数据，并<strong>求平均值</strong></td></tr><tr><td>summarizingInt()</td><td>将流中的数据映射成 <code>int</code> 类型的数据，并<strong>获取描述信息</strong></td></tr></tbody></table><h2 id="5-3、示例代码"><a href="#5-3、示例代码" class="headerlink" title="5.3、示例代码"></a>5.3、示例代码</h2><h3 id="1、joining"><a href="#1、joining" class="headerlink" title="1、joining"></a>1、joining</h3><ul><li>拼接字符串数组中的所有字符串</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 准备一个字符串数组，作为数据源</span></span><br><span class="line">String[] dataSource = &#123;<span class="string">&quot;wuhu&quot;</span>,<span class="string">&quot;qifei&quot;</span>,<span class="string">&quot;java&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//2 将数组中的数据转换为流对象</span></span><br><span class="line">Stream&lt;String&gt; stream = Arrays.stream(dataSource);</span><br><span class="line"><span class="comment">//3 使用joining将流中的数据拼接为一个字符串</span></span><br><span class="line">String collect = stream.collect(Collectors.joining());</span><br><span class="line">System.out.println(<span class="string">&quot;拼接之后的结果为:&quot;</span> + collect);</span><br></pre></td></tr></table></figure><blockquote><p>运行程序，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302134642.png" alt="image-20210302134641765"></p><blockquote><p>重载方法一</p><ul><li>传入一个分隔符，令拼接而成的字符串根据传入的分隔符分割开来，格式为:</li></ul><p>字符串 <code>分隔符</code> 字符串2<code>分隔符</code> 字符串3 …</p><ul><li>传入一个分隔符、一个前缀和一个尾缀，拼接而成的结果字符串格式为</li></ul><p>“前缀” 字符串 <code>分隔符</code> 字符串2<code>分隔符</code> 字符串3 … “后缀”</p></blockquote><ul><li>传入分隔符的joining</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 准备一个字符串数组，作为数据源</span></span><br><span class="line">String[] dataSource = &#123;<span class="string">&quot;wuhu&quot;</span>,<span class="string">&quot;qifei&quot;</span>,<span class="string">&quot;java&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//2 将数组中的数据转换为流对象</span></span><br><span class="line">Stream&lt;String&gt; stream = Arrays.stream(dataSource);</span><br><span class="line"><span class="comment">//3 使用joining将流中的数据拼接为一个字符串</span></span><br><span class="line">String collect = stream.collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;拼接之后的结果为:&quot;</span> + collect);</span><br></pre></td></tr></table></figure><blockquote><p>运行程序，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302135340.png" alt="image-20210302135340206"></p><ul><li>传入分隔符、前缀和尾缀的joining</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 准备一个字符串数组，作为数据源</span></span><br><span class="line">String[] dataSource = &#123;<span class="string">&quot;wuhu&quot;</span>,<span class="string">&quot;qifei&quot;</span>,<span class="string">&quot;java&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//2 将数组中的数据转换为流对象</span></span><br><span class="line">Stream&lt;String&gt; stream = Arrays.stream(dataSource);</span><br><span class="line"><span class="comment">//3 使用joining将流中的数据拼接为一个字符串</span></span><br><span class="line">String collect = stream.collect(Collectors.joining(<span class="string">&quot;, &quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;拼接之后的结果为:&quot;</span> + collect);</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302135440.png" alt="image-20210302135439927"></p><h3 id="2、summingInt"><a href="#2、summingInt" class="headerlink" title="2、summingInt"></a>2、summingInt</h3><blockquote><p>Collectors 中 summingInt 方法的源码如下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302135726.png" alt="image-20210302135726430"></p><blockquote><p>summingInt方法需要传入一个ToIntFunction接口对象 ，这个接口的抽象方法将一个对象转换为int类型数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ToIntFunction</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">applyAsInt</span><span class="params">(T value)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出字符串数组中的字符串总长度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 准备一个字符串数组，作为数据源</span></span><br><span class="line">String[] dataSource = &#123;<span class="string">&quot;wuhu&quot;</span>,<span class="string">&quot;qifei&quot;</span>,<span class="string">&quot;java&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//2 将数组中的数据转换为流对象</span></span><br><span class="line">Stream&lt;String&gt; stream = Arrays.stream(dataSource);</span><br><span class="line"><span class="comment">//使用summingInt方法，输出字符串数组的总长度</span></span><br><span class="line">Integer sumLength = stream.collect(Collectors.summingInt(ele -&gt; ele.length()));</span><br><span class="line">System.out.println(<span class="string">&quot;数组中字符串总长度为：&quot;</span> + sumLength);</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302140113.png" alt="image-20210302140113830"></p><h1 id="六、综合案例"><a href="#六、综合案例" class="headerlink" title="六、综合案例"></a>六、综合案例</h1><blockquote><p>一个集合中存储了若干个学生对象，要求编码实现以下功能</p><p>其中，学生类的属性如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>数据源如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Student&gt; <span class="title">getStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Collections.addAll(students,</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;芜湖1&quot;</span>,<span class="number">18</span>,<span class="number">90</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;芜湖2&quot;</span>,<span class="number">15</span>,<span class="number">60</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;芜湖3&quot;</span>,<span class="number">12</span>,<span class="number">70</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;芜湖4&quot;</span>,<span class="number">11</span>,<span class="number">65</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;芜湖5&quot;</span>,<span class="number">19</span>,<span class="number">85</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;芜湖6&quot;</span>,<span class="number">20</span>,<span class="number">40</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;芜湖7&quot;</span>,<span class="number">25</span>,<span class="number">30</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;芜湖8&quot;</span>,<span class="number">30</span>,<span class="number">99</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;芜湖9&quot;</span>,<span class="number">18</span>,<span class="number">100</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;芜湖10&quot;</span>,<span class="number">18</span>,<span class="number">20</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;芜湖11&quot;</span>,<span class="number">18</span>,<span class="number">45</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;芜湖12&quot;</span>,<span class="number">18</span>,<span class="number">55</span>)</span><br><span class="line">            );</span><br><span class="line">    <span class="keyword">return</span> students.stream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-1、所有及格的学生信息"><a href="#6-1、所有及格的学生信息" class="headerlink" title="6.1、所有及格的学生信息"></a>6.1、所有及格的学生信息</h2><blockquote><p>使用中间操作 <code>filter</code> ，筛选条件为学生成绩 &gt;= 60</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Student&gt; stream = getStream();</span><br><span class="line">stream.filter(ele -&gt; ele.getScore() &gt;= <span class="number">60</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302142209.png" alt="image-20210302142208348"></p><h2 id="6-2、所有及格的学生姓名"><a href="#6-2、所有及格的学生姓名" class="headerlink" title="6.2、所有及格的学生姓名"></a>6.2、所有及格的学生姓名</h2><blockquote><p>使用中间操作 <code>filter</code> 和 <code>map</code> ，其中筛选条件为 <code>学生成绩&gt;=60</code> ，在筛选完及格的学生后，需要使用 <code>map</code> 将学生对象映射为 学生姓名</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Student&gt; stream = getStream();</span><br><span class="line">stream.filter(ele -&gt; ele.getScore() &gt;= <span class="number">60</span>).map(Student::getName).forEach(System.out::println);</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302142450.png" alt="image-20210302142450138"></p><h2 id="6-3、所有学生的平均成绩"><a href="#6-3、所有学生的平均成绩" class="headerlink" title="6.3、所有学生的平均成绩"></a>6.3、所有学生的平均成绩</h2><blockquote><p>用到流对象 <code>mapToInt</code> 方法，这个方法将Stream对象转换为一个IntStream对象，再调用 IntStream 对象的 <code>average</code> 和 <code>getAsDouble</code> 方法即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Student&gt; stream = getStream();</span><br><span class="line"><span class="keyword">double</span> avgScore = stream.mapToInt(Student::getScore).average().getAsDouble();</span><br><span class="line">System.out.println(<span class="string">&quot;所有学生的平均成绩为：&quot;</span> + avgScore);</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302143236.png" alt="image-20210302143236123"></p><h2 id="6-4、班级的前三名"><a href="#6-4、班级的前三名" class="headerlink" title="6.4、班级的前三名"></a>6.4、班级的前三名</h2><blockquote><p>先使用Stream对象的 <code>sorted</code> 方法排序，然后使用 <code>limit</code> 取前三条即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Student&gt; studentStream = getStream();</span><br><span class="line">studentStream.sorted((s1,s2) -&gt; s2.getScore() - s1.getScore()).limit(<span class="number">3</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302143523.png" alt="image-20210302143522931"></p><h2 id="6-5、班级的3-10名"><a href="#6-5、班级的3-10名" class="headerlink" title="6.5、班级的3-10名"></a>6.5、班级的3-10名</h2><blockquote><p>先使用Stream对象的 <code>sorted</code> 方法排序，然后使用 <code>skip</code> 跳过前三条，再用<code>limit</code>取后面七条即可</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Student&gt; studentStream = getStream();</span><br><span class="line">studentStream.sorted((s1,s2) -&gt; s2.getScore() - s1.getScore()).skip(<span class="number">3</span>).limit(<span class="number">7</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302143728.png" alt="image-20210302143727979"></p><h2 id="6-6、所有不及格学生的平均成绩"><a href="#6-6、所有不及格学生的平均成绩" class="headerlink" title="6.6、所有不及格学生的平均成绩"></a>6.6、所有不及格学生的平均成绩</h2><blockquote><p>先使用 <code>filter</code> 筛选所有不及格学生，然后使用 <code>mapToInt</code> 将流对象转换为IntStream流对象，最后调用IntStream流对象的 <code>average</code> 和 <code>getAsDouble</code> 方法即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Student&gt; stream = getStream();</span><br><span class="line"><span class="keyword">double</span> avgScore = stream.filter(ele -&gt; ele.getScore() &lt; <span class="number">60</span>).mapToInt(Student::getScore).average().getAsDouble();</span><br><span class="line">System.out.println(<span class="string">&quot;所有不及格学生的平均成绩为：&quot;</span> + avgScore);</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302143956.png" alt="image-20210302143956708"></p><h2 id="6-7、将及格的学生，按照降序顺序输出所有信息"><a href="#6-7、将及格的学生，按照降序顺序输出所有信息" class="headerlink" title="6.7、将及格的学生，按照降序顺序输出所有信息"></a>6.7、将及格的学生，按照降序顺序输出所有信息</h2><blockquote><p>先使用 <code>filter</code> 筛选所有及格学生，然后使用<code>sorted</code> 进行排序，再输出所有及格学生信息即可</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Student&gt; stream = getStream();</span><br><span class="line">stream.filter(ele -&gt; ele.getScore() &gt;= <span class="number">60</span>).sorted((s1,s2) -&gt; s2.getScore() - s1.getScore()).forEach(System.out::println);</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302144148.png" alt="image-20210302144148021"></p><h2 id="6-8、班级学生的总分"><a href="#6-8、班级学生的总分" class="headerlink" title="6.8、班级学生的总分"></a>6.8、班级学生的总分</h2><blockquote><p>使用流对象的 <code>mapTo</code> 方法，将流对象转换为IntStream对象，然后调用<code>sum</code> 方法即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Student&gt; stream = getStream();</span><br><span class="line"><span class="keyword">int</span> sum = stream.mapToInt(Student::getScore).sum();</span><br><span class="line">System.out.println(<span class="string">&quot;班级所有学生总成绩为:&quot;</span> + sum);</span><br></pre></td></tr></table></figure><blockquote><p>结果如下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302144349.png" alt="image-20210302144349019"></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC学习笔记（三）-读写锁、阻塞队列、线程池和分支合并框架</title>
      <link href="posts/2958134976.html"/>
      <url>posts/2958134976.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="七、ReentrantReadWriteLock"><a href="#七、ReentrantReadWriteLock" class="headerlink" title="七、ReentrantReadWriteLock"></a>七、ReentrantReadWriteLock</h1><blockquote><p>ReentrantReadWriteLock是一把<strong>可重入读写锁</strong></p></blockquote><h2 id="7-1、性质"><a href="#7-1、性质" class="headerlink" title="7.1、性质"></a>7.1、性质</h2><h3 id="1、可重入"><a href="#1、可重入" class="headerlink" title="1、可重入"></a>1、可重入</h3><blockquote><p>如果你了解过synchronized关键字，一定知道他的可重入性，可重入就是同一个线程可以重复加锁，每次加锁的时候count值加1，每次释放锁的时候count减1，直到count为0，其他的线程才可以再次获取。</p></blockquote><h3 id="2、读写分离"><a href="#2、读写分离" class="headerlink" title="2、读写分离"></a>2、读写分离</h3><blockquote><p>我们知道，对于一个数据，不管是几个线程同时读都不会出现任何问题，但是写就不一样了，几个线程对同一个数据进行更改就可能会出现数据不一致的问题，因此想出了一个方法就是对数据加锁，这时候出现了一个问题：</p><p>线程写数据的时候加锁是为了确保数据的准确性，但是线程读数据的时候再加锁就会大大降低效率，这时候怎么办呢？那就对写数据和读数据分开，加上两把不同的锁，不仅保证了正确性，还能提高效率。</p></blockquote><h3 id="3、可以锁降级"><a href="#3、可以锁降级" class="headerlink" title="3、可以锁降级"></a>3、可以锁降级</h3><blockquote><p>线程获取写入锁后可以获取读取锁，然后释放写入锁，这样就从写入锁变成了读取锁，从而实现锁降级的特性。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228122842.png" alt="image-20210228122842386"></p><h3 id="4、不可锁升级"><a href="#4、不可锁升级" class="headerlink" title="4、不可锁升级"></a>4、不可锁升级</h3><blockquote><p>线程获取读锁是不能直接升级为写入锁的。需要释放所有读取锁，才可获取写锁，</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228122914.png" alt="image-20210228122914209"></p><h2 id="7-2、ReadWriteLockDemo"><a href="#7-2、ReadWriteLockDemo" class="headerlink" title="7.2、ReadWriteLockDemo"></a>7.2、ReadWriteLockDemo</h2><h3 id="1、模拟没有加锁的情况"><a href="#1、模拟没有加锁的情况" class="headerlink" title="1、模拟没有加锁的情况"></a>1、模拟没有加锁的情况</h3><blockquote><p>编写一个MyCache类用于模拟缓存</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key,Object value)</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 写入数据&quot;</span> + key);</span><br><span class="line">        <span class="comment">//在这里模拟网络延迟</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 写入完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 读取数据&quot;</span>);</span><br><span class="line">        <span class="comment">//在这里模拟网络延迟</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Object result = map.get(key);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 读取完成&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建十个线程，五个用于存数据，五个用于取数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MyCache cache = <span class="keyword">new</span> MyCache();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> tempInt = i;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        cache.put(tempInt + <span class="string">&quot;&quot;</span>,tempInt + <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;,<span class="string">&quot;put&quot;</span> + i).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> tempInt = i;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        cache.get(tempInt + <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;,<span class="string">&quot;get&quot;</span> + i).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行程序查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228130858.png" alt="image-20210228130856655"></p><h3 id="2、引入ReentrantReadWriteLock"><a href="#2、引入ReentrantReadWriteLock" class="headerlink" title="2、引入ReentrantReadWriteLock"></a>2、引入ReentrantReadWriteLock</h3><blockquote><p>修改MyCache类，引入读写锁</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//引入ReentrantReadWriteLock</span></span><br><span class="line">    <span class="keyword">private</span> ReadWriteLock readWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key,Object value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//由于put是写操作，所以引入一个写锁</span></span><br><span class="line">        readWriteLock.writeLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 写入数据&quot;</span> + key);</span><br><span class="line">            <span class="comment">//在这里模拟网络延迟</span></span><br><span class="line">            <span class="keyword">try</span> &#123; TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>); &#125; <span class="keyword">catch</span> (Exception e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 写入完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            readWriteLock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//get是读操作，引入读锁。</span></span><br><span class="line">        readWriteLock.readLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 读取数据&quot;</span>);</span><br><span class="line">            <span class="comment">//在这里模拟网络延迟</span></span><br><span class="line">            <span class="keyword">try</span> &#123; TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>); &#125; <span class="keyword">catch</span> (Exception e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">            Object result = map.get(key);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 读取完成&quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            readWriteLock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时再次运行程序，查看结果，写时数据得到一致性保障</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228132056.png" alt="image-20210228132056118"></p><h1 id="八、BlockingQueueDemo阻塞队列"><a href="#八、BlockingQueueDemo阻塞队列" class="headerlink" title="八、BlockingQueueDemo阻塞队列"></a>八、BlockingQueueDemo阻塞队列</h1><h2 id="8-1、基本介绍"><a href="#8-1、基本介绍" class="headerlink" title="8.1、基本介绍"></a>8.1、基本介绍</h2><blockquote><p>阻塞队列是一个队列，在数据结构中起的作用如下图</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228134508.png" alt="img"></p><blockquote><p><strong>线程1往阻塞队列里添加元素，线程2从阻塞队列里移除元素</strong></p></blockquote><ul><li>当队列是空的，从队列中<strong>获取</strong>元素的操作将会被阻塞</li><li>当队列是满的，从队列中<strong>添加</strong>元素的操作将会被阻塞</li></ul><blockquote><p>试图从空的队列中获取元素的线程将会被阻塞，直到其他线程往空的队列插入新的元素</p><p>试图向已满的队列中添加新元素的线程将会被阻塞，直到其他线程从队列中移除一个或多个元素或者完全清空，使队列变得空闲起来并后续新增</p></blockquote><h2 id="8-2、阻塞队列的用处"><a href="#8-2、阻塞队列的用处" class="headerlink" title="8.2、阻塞队列的用处"></a>8.2、阻塞队列的用处</h2><blockquote><p>在多线程领域：所谓阻塞，在某些情况下会挂起线程（即阻塞wait、await），一旦条件满足，被挂起的线程又会自动被唤起（notify、signal）</p><p>为什么需要BlockingQueue</p><p>好处是我们不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，因为这一切BlockingQueue都给你一手包办了</p><p>在concurrent包发布以前，在多线程环境下，我们每个程序员都必须去自己控制这些细节，尤其还要兼顾效率和线程安全，而这会给我们的程序带来不小的复杂度。</p></blockquote><h2 id="8-3、BlockingQueue的架构介绍和种类分析"><a href="#8-3、BlockingQueue的架构介绍和种类分析" class="headerlink" title="8.3、BlockingQueue的架构介绍和种类分析"></a>8.3、BlockingQueue的架构介绍和种类分析</h2><h3 id="1、架构介绍"><a href="#1、架构介绍" class="headerlink" title="1、架构介绍"></a>1、架构介绍</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228135937.png" alt="img"></p><h3 id="2、种类分析"><a href="#2、种类分析" class="headerlink" title="2、种类分析"></a>2、种类分析</h3><ul><li><strong>ArrayBlockingQueue</strong></li></ul><blockquote><p>由数组结构组成的有界阻塞队列。</p></blockquote><ul><li><strong>LinkedBlockingQueue</strong></li></ul><blockquote><p>由链表结构组成的<strong>有界（但大小默认值为integer.MAX_VALUE）</strong>阻塞队列。</p></blockquote><ul><li>PriorityBlockingQueue</li></ul><blockquote><p>支持优先级排序的无界阻塞队列。</p></blockquote><ul><li>DelayQueue</li></ul><blockquote><p>使用优先级队列实现的延迟无界阻塞队列。</p></blockquote><ul><li><strong>SynchronousQueue</strong></li></ul><blockquote><p>不存储元素的阻塞队列，也即单个元素的队列。</p><p>该队列中永远只有一个元素，生产一个消费一个。</p></blockquote><ul><li>LinkedTransferQueue</li></ul><blockquote><p>由链表组成的无界阻塞队列。</p></blockquote><ul><li>LinkedBlockingDeque</li></ul><blockquote><p>由链表组成的<strong>双向</strong>阻塞队列。</p></blockquote><h2 id="8-4、BlockingQueue核心方法"><a href="#8-4、BlockingQueue核心方法" class="headerlink" title="8.4、BlockingQueue核心方法"></a>8.4、BlockingQueue核心方法</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228141219.png" alt="img"></p><table><thead><tr><th>抛出异常</th><th>当阻塞队列满时，再往队列里add插入元素会抛IllegalStateException:Queue full  当阻塞队列空时，再往队列里remove移除元素会抛NoSuchElementException</th></tr></thead><tbody><tr><td><strong>特殊值</strong></td><td><strong>插入方法，成功ture失败false；                                                                             移除方法，成功返回出队列的元素，队列里没有就返回null</strong></td></tr><tr><td><strong>一直阻塞</strong></td><td><strong>当阻塞队列满时，生产者线程继续往队列里put元素，队列会一直阻塞生产者线程直到put数据or响应中断退出；                                                                                        当阻塞队列空时，消费者线程试图从队列里take元素，队列会一直阻塞消费者线程直到队列可用</strong></td></tr><tr><td><strong>超时退出</strong></td><td><strong>当阻塞队列满时，队列会阻塞生产者线程一定时间，超过限时后生产者线程会退出</strong></td></tr></tbody></table><h2 id="8-5、阻塞队列API之抛出异常组"><a href="#8-5、阻塞队列API之抛出异常组" class="headerlink" title="8.5、阻塞队列API之抛出异常组"></a>8.5、阻塞队列API之抛出异常组</h2><h3 id="1、阻塞队列的add方法"><a href="#1、阻塞队列的add方法" class="headerlink" title="1、阻塞队列的add方法"></a>1、阻塞队列的add方法</h3><blockquote><p>往已满的队列中add元素会报异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个ArrayBlockingQueue对象，设置最大容量为3</span></span><br><span class="line">BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">System.out.println(blockingQueue.add(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">System.out.println(blockingQueue.add(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">System.out.println(blockingQueue.add(<span class="string">&quot;c&quot;</span>));</span><br><span class="line"><span class="comment">//此时再add第四个会报Queue full异常</span></span><br><span class="line">System.out.println(blockingQueue.add(<span class="string">&quot;d&quot;</span>));</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228154833.png" alt="image-20210228154832276"></p><h3 id="2、阻塞队列的remove方法"><a href="#2、阻塞队列的remove方法" class="headerlink" title="2、阻塞队列的remove方法"></a>2、阻塞队列的remove方法</h3><blockquote><p>阻塞队列的remove有两个重载方法</p></blockquote><ul><li>一个用于删除传入的对象，如果删除成功返回true，删除失败或元素不存在返回false</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>删除并返回最先进入阻塞队列的元素，这个方法继承自Queue接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">E <span class="title">remove</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><ul><li>如果阻塞队列为空时调用remove方法，此时会报NoSuchElementException异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个ArrayBlockingQueue对象，设置最大容量为3</span></span><br><span class="line">BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">System.out.println(blockingQueue.add(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">System.out.println(blockingQueue.add(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">System.out.println(blockingQueue.add(<span class="string">&quot;c&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除最先进入队列的元素，并将被移除的元素返回</span></span><br><span class="line">System.out.println(blockingQueue.remove());</span><br><span class="line">System.out.println(blockingQueue.remove());</span><br><span class="line">System.out.println(blockingQueue.remove());</span><br><span class="line">System.out.println(blockingQueue.remove());</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228160733.png" alt="image-20210228160733711"></p><h3 id="3、element检查方法"><a href="#3、element检查方法" class="headerlink" title="3、element检查方法"></a>3、element检查方法</h3><blockquote><p>该方法用于查看队列首部元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个ArrayBlockingQueue对象，设置最大容量为3</span></span><br><span class="line">BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">blockingQueue.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">blockingQueue.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">blockingQueue.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;队首元素为:&quot;</span> + blockingQueue.element());</span><br></pre></td></tr></table></figure><blockquote><p>查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228161125.png" alt="image-20210228161125103"></p><blockquote><p>当队列中没有元素时，调用该方法会报 NoSuchElementException 异常</p></blockquote><h2 id="8-6、阻塞队列API之特殊值组"><a href="#8-6、阻塞队列API之特殊值组" class="headerlink" title="8.6、阻塞队列API之特殊值组"></a>8.6、阻塞队列API之特殊值组</h2><blockquote><p>和上面抛出异常组不同的是，offer和poll方法不抛异常，而是返回boolean值true/false</p></blockquote><h3 id="1、offer方法"><a href="#1、offer方法" class="headerlink" title="1、offer方法"></a>1、offer方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个ArrayBlockingQueue对象，设置最大容量为3</span></span><br><span class="line">BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">System.out.println(blockingQueue.offer(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">System.out.println(blockingQueue.offer(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">System.out.println(blockingQueue.offer(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">System.out.println(blockingQueue.offer(<span class="string">&quot;d&quot;</span>));</span><br></pre></td></tr></table></figure><blockquote><p>运行，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228161615.png" alt="image-20210228161615110"></p><blockquote><p>由此可见，往已满队列插入元素时，<strong>此时offer方法不抛出异常，而是返回false</strong></p></blockquote><h3 id="2、poll方法"><a href="#2、poll方法" class="headerlink" title="2、poll方法"></a>2、poll方法</h3><blockquote><p>成功则返回出队列的元素，队列里没有就返回null</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个ArrayBlockingQueue对象，设置最大容量为3</span></span><br><span class="line">BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">System.out.println(blockingQueue.offer(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">System.out.println(blockingQueue.offer(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">System.out.println(blockingQueue.offer(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;第一次取出:&quot;</span> + blockingQueue.poll());</span><br><span class="line">System.out.println(<span class="string">&quot;第二次取出:&quot;</span> + blockingQueue.poll());</span><br><span class="line">System.out.println(<span class="string">&quot;第三次取出:&quot;</span> + blockingQueue.poll());</span><br><span class="line">System.out.println(<span class="string">&quot;第四次取出:&quot;</span> + blockingQueue.poll());</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228163634.png" alt="image-20210228163634215"></p><h3 id="3、peek方法"><a href="#3、peek方法" class="headerlink" title="3、peek方法"></a>3、peek方法</h3><blockquote><p>同poll，如果队列有元素则返回队首元素，否则返回null</p></blockquote><h2 id="8-7、阻塞队列API之阻塞"><a href="#8-7、阻塞队列API之阻塞" class="headerlink" title="8.7、阻塞队列API之阻塞"></a>8.7、阻塞队列API之阻塞</h2><h3 id="1、put方法"><a href="#1、put方法" class="headerlink" title="1、put方法"></a>1、put方法</h3><blockquote><p>往非满队列插入元素时</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">blockingQueue.put(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">blockingQueue.put(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">blockingQueue.put(<span class="string">&quot;c&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>运行，发现一切正常</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228164139.png" alt="image-20210228164139485"></p><blockquote><p>如果往已满队列中put元素，此时会阻塞</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个ArrayBlockingQueue对象，设置最大容量为3</span></span><br><span class="line">BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">blockingQueue.put(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">blockingQueue.put(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">blockingQueue.put(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">blockingQueue.put(<span class="string">&quot;d&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>运行程序，发现程序已经被阻塞</p><p>程序将会一直阻塞，直到有空位给第四个元素为止</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228164310.png" alt="image-20210228164310894"></p><h3 id="2、take方法"><a href="#2、take方法" class="headerlink" title="2、take方法"></a>2、take方法</h3><blockquote><p>同put方法，如果去take一个空队列，那么线程会一直阻塞，直到队列中有元素被take为止</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个ArrayBlockingQueue对象，设置最大容量为3</span></span><br><span class="line">BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">blockingQueue.put(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">blockingQueue.put(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">blockingQueue.put(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"><span class="comment">//取</span></span><br><span class="line">System.out.println(<span class="string">&quot;第一个取出的元素为:&quot;</span> + blockingQueue.take());</span><br><span class="line">System.out.println(<span class="string">&quot;第二个取出的元素为:&quot;</span> + blockingQueue.take());</span><br><span class="line">System.out.println(<span class="string">&quot;第三个取出的元素为:&quot;</span> + blockingQueue.take());</span><br><span class="line">System.out.println(<span class="string">&quot;第四个取出的元素为:&quot;</span> + blockingQueue.take());</span><br></pre></td></tr></table></figure><blockquote><p>运行查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228165034.png" alt="image-20210228165034190"></p><h2 id="8-8、阻塞队列API之超时"><a href="#8-8、阻塞队列API之超时" class="headerlink" title="8.8、阻塞队列API之超时"></a>8.8、阻塞队列API之超时</h2><h3 id="1、offer"><a href="#1、offer" class="headerlink" title="1、offer"></a>1、offer</h3><blockquote><p>boolean offer(要添加的元素,等待时长,单位);</p><p>这个方法的意思是：往队列中添加元素，如果队列已满，那么等待一段时间，如果在时间内没有添加完成，那么直接取消添加返回false</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个ArrayBlockingQueue对象，设置最大容量为3</span></span><br><span class="line">BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">blockingQueue.offer(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">blockingQueue.offer(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">blockingQueue.offer(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"><span class="comment">//此时使用超时Api添加元素</span></span><br><span class="line">System.out.println(blockingQueue.offer(<span class="string">&quot;d&quot;</span>,<span class="number">3L</span>, TimeUnit.SECONDS));</span><br></pre></td></tr></table></figure><blockquote><p>运行，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228170039.png" alt="image-20210228170039224"></p><h2 id="8-9、TestTransferValue"><a href="#8-9、TestTransferValue" class="headerlink" title="8.9、TestTransferValue"></a>8.9、TestTransferValue</h2><h3 id="1、创建一个Person对象"><a href="#1、创建一个Person对象" class="headerlink" title="1、创建一个Person对象"></a>1、创建一个Person对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、编写一个TestTransferValue类"><a href="#2、编写一个TestTransferValue类" class="headerlink" title="2、编写一个TestTransferValue类"></a>2、编写一个TestTransferValue类</h3><blockquote><p>这个类中定义了三个方法，分别对基本数据类型、自定义引用类型和JDK自带引用类型中的值进行修改。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTransferValue</span> </span>&#123;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 修改基本数据类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeBaseValue</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        age = <span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * JDK自带引用类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeJDKValue</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        str = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeOurValue</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        person.setName(<span class="string">&quot;wuhu&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestTransferValue test = <span class="keyword">new</span> TestTransferValue();</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line">        test.changeBaseValue(<span class="number">30</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------age:&quot;</span> + age);</span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">&quot;abd&quot;</span>);</span><br><span class="line">        test.changeOurValue(person);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------person:&quot;</span> + person);</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        test.changeJDKValue(str);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------str:&quot;</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228171741.png" alt="image-20210228171741581"></p><h3 id="3、按值传递和按引用传递"><a href="#3、按值传递和按引用传递" class="headerlink" title="3、按值传递和按引用传递"></a>3、按值传递和按引用传递</h3><ul><li>传值还是传引用</li></ul><blockquote><p>值传递是复印件、引用传递是本体</p></blockquote><ul><li>注意方法的作用域</li><li>changeBaseValue方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TestTransferValue test = <span class="keyword">new</span> TestTransferValue();</span><br><span class="line"><span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line">test.changeBaseValue(<span class="number">30</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;----------------age:&quot;</span> + age);</span><br></pre></td></tr></table></figure><blockquote><p>由于main方法中的age是局部变量，这个age和changeBaseValue方法中的age没有丝毫关系。</p><p><strong>在一个方法中，基本类型只传递复印件，原件不动，所以changeBaseValue方法修改的只是age的拷贝，和原来的age没有关系</strong></p></blockquote><ul><li>changeOurValue方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person(<span class="string">&quot;abd&quot;</span>);</span><br><span class="line">test.changeOurValue(person);</span><br><span class="line">System.out.println(<span class="string">&quot;----------------person:&quot;</span> + person);</span><br></pre></td></tr></table></figure><blockquote><p>首先，我们需要了解Java中引用和实例对象的关系</p><p>Person person = new Person(“abd”);</p><p>其中person称为引用，存放在栈中，new Person(“abd”)称为实例对象，存放在堆中，此时关系图如下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228173435.png" alt="image-20210228173435911"></p><blockquote><p>将person传入changeOurValue方法后，传入的是引用，此时程序根据引用地址找到abd，然后将值修改为wuhu</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228173700.png" alt="image-20210228173700010"></p><ul><li>changeJDKValue方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">test.changeJDKValue(str);</span><br><span class="line">System.out.println(<span class="string">&quot;----------------str:&quot;</span> + str);</span><br></pre></td></tr></table></figure><blockquote><p>String对象存放在字符串常量池</p><p>当执行 String str = “abc”;时，会先到字符串常量池中寻找”abc”字符串，如果找到直接引用，如果没找到，就创建String对象后引用</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228174341.png" alt="image-20210228174341270"></p><blockquote><p>此时str是一个引用，在执行changeJDKValue方法后，会生成一个新引用指向abc</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228174525.png" alt="image-20210228174525338"></p><blockquote><p>此时执行changeJDKValue方法中的 str = “xxx” 时，会去字符串常量池中寻找 “xxx” 对象，如果没有就创建一个，然后指向方法的str引用</p><p>此时关系图如下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228174925.png" alt="image-20210228174925546"></p><blockquote><p>最后执行 System.out.println(“—————-str:” + str); </p><p>由于main方法中的str使用指向 “abc” ，所以输出abc</p></blockquote><h3 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h3><ul><li>如果传递是基本数据类型，那么传递的是副本，原值不动</li><li>如果传递的是自定义引用对象，那么是本体</li></ul><h1 id="九、线程池"><a href="#九、线程池" class="headerlink" title="九、线程池"></a>九、线程池</h1><h2 id="9-1、线程池的优势"><a href="#9-1、线程池的优势" class="headerlink" title="9.1、线程池的优势"></a>9.1、线程池的优势</h2><blockquote><p>线程池做的工作只要是控制运行的线程数量，<strong>处理过程中将任务放入队列</strong>，然后在线程创建后启动这些任务，<strong>如果线程数量超过了最大数量，超出数量的线程排队等候</strong>，等其他线程执行完毕，再从队列中取出任务来执行。</p></blockquote><ul><li>线程池的主要特点<ul><li>线程复用</li><li>控制最大并发数</li><li>管理线程</li></ul></li></ul><blockquote><p>第一：降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的销耗。</p><p>第二：提高响应速度。当任务到达时，任务可以不需要等待线程创建就能立即执行。</p><p>第三：提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会销耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</p></blockquote><h2 id="9-2、如何使用"><a href="#9-2、如何使用" class="headerlink" title="9.2、如何使用"></a>9.2、如何使用</h2><h3 id="1、架构说明"><a href="#1、架构说明" class="headerlink" title="1、架构说明"></a>1、架构说明</h3><blockquote><p>Java中的线程池是通过Executor框架实现的，该框架中用到了Executor，Executors，ExecutorService，ThreadPoolExecutor这几个类.</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228202136.png" alt="img"></p><h3 id="2、编码实现"><a href="#2、编码实现" class="headerlink" title="2、编码实现"></a>2、编码实现</h3><ul><li>Executors.newFixedThreadPool(int)</li></ul><blockquote><p>执行长期任务性能好，创建一个线程池，一池有N个固定的线程，有固定线程数的线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个线程池，线程池中有五个线程</span></span><br><span class="line">ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        threadPool.execute(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 办理业务！&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">    exception.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//使用完毕后要交还线程</span></span><br><span class="line">    threadPool.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果如下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228205016.png" alt="image-20210228205016503"></p><ul><li>Executors.newSingleThreadExecutor()</li></ul><blockquote><p>一个任务一个任务的执行，一池一线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个线程池，线程池中有五个线程</span></span><br><span class="line">ExecutorService threadPool = Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        threadPool.execute(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 办理业务！&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">    exception.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//使用完毕后要交还线程</span></span><br><span class="line">    threadPool.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行程序，结果如下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228204615.png" alt="image-20210228204614440"></p><ul><li>Executors.newCachedThreadPool()</li></ul><blockquote><p>执行很多短期异步任务，线程池根据需要创建新线程，但在先前构建的线程可用时将重用它们。<strong>可扩容</strong>，遇强则强.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个线程池，线程池中有五个线程</span></span><br><span class="line"><span class="comment">//ExecutorService threadPool = Executors.newFixedThreadPool(5);</span></span><br><span class="line">ExecutorService threadPool = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        threadPool.execute(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 办理业务！&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">    exception.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//使用完毕后要交还线程</span></span><br><span class="line">    threadPool.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行程序，结果如下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228205315.png" alt="image-20210228205315345"></p><h2 id="9-3、ThreadPoolExecutor底层原理"><a href="#9-3、ThreadPoolExecutor底层原理" class="headerlink" title="9.3、ThreadPoolExecutor底层原理"></a>9.3、ThreadPoolExecutor底层原理</h2><blockquote><p>查看源码可以发现，9.2中获取线程池的方法实际上都是调用了ThreadPoolExecutor的构造方法</p></blockquote><h3 id="1、ThreadPoolExecutor构造方法"><a href="#1、ThreadPoolExecutor构造方法" class="headerlink" title="1、ThreadPoolExecutor构造方法"></a>1、ThreadPoolExecutor构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">         Executors.defaultThreadFactory(), defaultHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>corePoolSize</li></ul><blockquote><p>线程池核心线程数，默认情况下核心线程会一直存活，即使处于闲置状态也不会受存<code>keepAliveTime</code>限制。除非将<code>allowCoreThreadTimeOut</code>设置为<code>true</code>。</p></blockquote><ul><li>maximumPoolSize</li></ul><blockquote><p>线程池所能容纳的最大线程数。超过这个数的线程将被阻塞。当任务队列为没有设置大小的LinkedBlockingDeque时，这个值无效。</p></blockquote><ul><li>keepAliveTime</li></ul><blockquote><p>非核心线程的闲置超时时间，超过这个时间就会被回收。</p></blockquote><ul><li>unit</li></ul><blockquote><p>指定<code>keepAliveTime</code>的单位，如<code>TimeUnit.SECONDS</code>。当将<code>allowCoreThreadTimeOut</code>设置为<code>true</code>时对corePoolSize生效。</p></blockquote><ul><li>workQueue</li></ul><blockquote><p>线程池中的任务队列.</p><p>常用的有三种队列，<code>SynchronousQueue</code>,<code>LinkedBlockingDeque</code>,<code>ArrayBlockingQueue</code></p></blockquote><h3 id="2、newFixedThreadPool-int"><a href="#2、newFixedThreadPool-int" class="headerlink" title="2、newFixedThreadPool(int)"></a>2、newFixedThreadPool(int)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>FixedThreadPool中，<strong>核心线程数</strong> <code>corePoolSize</code> 和<strong>线程池最大线程数</strong> <code>maximumPoolSize</code> 都设置为用户传入的<strong>nThreads</strong>，且空闲线程数为0，<strong>使用LinkedBlockingQueue队列</strong></p></blockquote><h3 id="3、newSingleThreadExecutor"><a href="#3、newSingleThreadExecutor" class="headerlink" title="3、newSingleThreadExecutor()"></a>3、newSingleThreadExecutor()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>SingleThreadExecutor中，<strong>核心线程数</strong> <code>corePoolSize</code> 和<strong>线程池最大线程数</strong> <code>maximumPoolSize</code> 都为1，且空闲线程数为0，<strong>使用LinkedBlockingQueue队列</strong></p></blockquote><h3 id="4、newCachedThreadPool"><a href="#4、newCachedThreadPool" class="headerlink" title="4、newCachedThreadPool()"></a>4、newCachedThreadPool()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>newCachedThreadPool创建的线程池将corePoolSize设置为0，将maximumPoolSize设置为Integer.MAX_VALUE，它使用的是SynchronousQueue，也就是说来了任务就创建线程运行，当线程空闲超过60秒，就销毁线程。</p></blockquote><h2 id="9-4、线程池的七大参数"><a href="#9-4、线程池的七大参数" class="headerlink" title="9.4、线程池的七大参数"></a>9.4、线程池的七大参数</h2><blockquote><p>ThreadPoolExecutor中含有七个参数的构造方法如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.acc = System.getSecurityManager() == <span class="keyword">null</span> ?</span><br><span class="line">            <span class="keyword">null</span> :</span><br><span class="line">            AccessController.getContext();</span><br><span class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1、corePoolSize"><a href="#1、corePoolSize" class="headerlink" title="1、corePoolSize"></a>1、corePoolSize</h3><blockquote><p>int corePoolSize</p><p>线程池中的常驻核心线程数</p></blockquote><h3 id="2、maximumPoolSize"><a href="#2、maximumPoolSize" class="headerlink" title="2、maximumPoolSize"></a>2、maximumPoolSize</h3><blockquote><p>int maximumPoolSize</p><p>线程池中能够容纳同时执行的最大线程数，此值必须大于等于1</p></blockquote><h3 id="3、keepAliveTime"><a href="#3、keepAliveTime" class="headerlink" title="3、keepAliveTime"></a>3、keepAliveTime</h3><blockquote><p>long keepAliveTime</p><p>多余的空闲线程的存活时间，当前池中线程数量超过corePoolSize时，当空闲时间达到keepAliveTime时，多余线程会被销毁直到只剩下corePoolSize个线程为止。</p></blockquote><h3 id="4、unit"><a href="#4、unit" class="headerlink" title="4、unit"></a>4、unit</h3><blockquote><p>TimeUnit unit</p><p>keepAliveTime的单位</p></blockquote><h3 id="5、workQueue"><a href="#5、workQueue" class="headerlink" title="5、workQueue"></a>5、workQueue</h3><blockquote><p>BlockingQueue&lt; Runnable &gt; workQueue</p><p>任务队列（BlockingQueue）指<strong>存放被提交但尚未被执行的任务</strong>的队列。</p></blockquote><h3 id="6、threadFactory"><a href="#6、threadFactory" class="headerlink" title="6、threadFactory"></a>6、threadFactory</h3><blockquote><p>ThreadFactory threadFactory</p><p>表示生成线程池中工作线程的线程工厂，用于创建线程，<strong>一般默认的即可</strong> </p></blockquote><h3 id="7、handler"><a href="#7、handler" class="headerlink" title="7、handler"></a>7、handler</h3><blockquote><p>RejectedExecutionHandler handler</p><p>拒绝策略，表示当队列满了，并且工作线程大于等于线程池的最大线程数（maximumPoolSize）时如何来拒绝请求执行的runnable的策略</p></blockquote><h2 id="9-5、线程池底层工作原理"><a href="#9-5、线程池底层工作原理" class="headerlink" title="9.5、线程池底层工作原理"></a>9.5、线程池底层工作原理</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228223251.png" alt="img"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228223301.png" alt="img"></p><blockquote><p>线程池工作原理如下</p></blockquote><ul><li><p>在创建了线程池后，开始等待请求。</p></li><li><p>当调用execute()方法添加一个请求任务时，线程池会做出如下判断：</p><ul><li>如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务；</li><li>如果正在运行的线程数量大于或等于corePoolSize，那么将这个任务放入队列；</li><li>如果这个时候队列满了且正在运行的线程数量还小于maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务；</li><li>如果队列满了且正在运行的线程数量大于或等于maximumPoolSize，那么线程池会启动饱和拒绝策略来执行。</li></ul></li><li><p>当一个线程完成任务时，它会从队列中取下一个任务来执行。</p></li><li><p>当一个线程无事可做超过一定的时间（keepAliveTime）时，线程会判断：</p></li></ul><blockquote><p>如果当前运行的线程数大于corePoolSize，那么这个线程就被停掉。所以线程池的所有任务完成后，它最终会收缩到corePoolSize的大小。</p></blockquote><h2 id="9-6、线程池用哪个？"><a href="#9-6、线程池用哪个？" class="headerlink" title="9.6、线程池用哪个？"></a>9.6、线程池用哪个？</h2><h3 id="1、在工作中单一的-固定数的-可变的三种创建线程池的方法哪个用的多？"><a href="#1、在工作中单一的-固定数的-可变的三种创建线程池的方法哪个用的多？" class="headerlink" title="1、在工作中单一的/固定数的/可变的三种创建线程池的方法哪个用的多？"></a>1、在工作中单一的/固定数的/可变的三种创建线程池的方法哪个用的多？</h3><blockquote><p><strong>一个都不用，我们工作中只能使用自定义的</strong></p></blockquote><h3 id="2、为什么不用JDK自带的Executors创建线程池"><a href="#2、为什么不用JDK自带的Executors创建线程池" class="headerlink" title="2、为什么不用JDK自带的Executors创建线程池"></a>2、为什么不用JDK自带的Executors创建线程池</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228231811.png" alt="img"></p><blockquote><p>Executors返回的线程池对象的弊端如下:</p></blockquote><ul><li><code>FixedThreadPool</code> 和 <code>SingleThreadPool</code> 允许的请求队列长度为 <code>Integer.MAX_VALUE</code>，可能会堆积大量的请求，从而导致<strong>OOM</strong></li><li><code>CacheThreadPool</code> 和 <code>ScheduledThreadPool</code> 允许的创建线程数量为 <code>Integer.MAX_VALUE</code> ，可能会创建大量线程从而导致<strong>OOM</strong></li></ul><h2 id="9-7、自定义线程池"><a href="#9-7、自定义线程池" class="headerlink" title="9.7、自定义线程池"></a>9.7、自定义线程池</h2><blockquote><p>使用ThreadPoolExecutor的构造函数创建一个 <strong>ThreadPoolExecutor</strong> 对象。</p><p>自定义线程池的七大参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService threadPool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>,<span class="number">5</span>,<span class="number">60L</span>,TimeUnit.SECONDS,<span class="keyword">new</span> LinkedBlockingDeque&lt;Runnable&gt;(<span class="number">3</span>),Executors.defaultThreadFactory(),<span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++) &#123;</span><br><span class="line">        threadPool.execute(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 办理业务！&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">    exception.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//使用完毕后要交还线程</span></span><br><span class="line">    threadPool.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，在传入阻塞队列对象是一定要指定阻塞队列的容量大小，因为阻塞队列的默认容量是Integer.MAX_VALUE</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedBlockingDeque</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(Integer.MAX_VALUE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行上面的程序，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228233817.png" alt="image-20210228233817697"></p><blockquote><p>将循环次数由7改为9，模拟此时有9个任务过来，此时运行程序查看结果</p><p>触发了拒绝策略</p><p>故<strong>线程池能承受的最大任务数 = 线程池最大线程数 + 阻塞队列容量</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228234010.png" alt="image-20210228234010374"></p><h2 id="9-8、线程池的拒绝策略"><a href="#9-8、线程池的拒绝策略" class="headerlink" title="9.8、线程池的拒绝策略"></a>9.8、线程池的拒绝策略</h2><h3 id="1、是什么？"><a href="#1、是什么？" class="headerlink" title="1、是什么？"></a>1、是什么？</h3><blockquote><p><strong>等待队列已经排满了</strong>，再也塞不下新任务了</p><p>同时，线程池中的max线程也达到了，无法继续为新任务服务。</p><p>这个是时候我们就需要拒绝策略机制合理的处理这个问题。</p></blockquote><h3 id="2、JDK自带拒绝策略"><a href="#2、JDK自带拒绝策略" class="headerlink" title="2、JDK自带拒绝策略"></a>2、JDK自带拒绝策略</h3><ul><li>AbortPolicy(默认)</li></ul><blockquote><p>直接抛出RejectedExecutionException异常阻止系统正常运行</p></blockquote><ul><li>CallerRunsPolicy</li></ul><blockquote><p>“调用者运行”一种调节机制，该策略既不会抛弃任务，也不会抛出异常，而是将某些任务回退到调用者，从而降低新任务的流量。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService threadPool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>,<span class="number">5</span>,<span class="number">60L</span>,TimeUnit.SECONDS,<span class="keyword">new</span> LinkedBlockingDeque&lt;Runnable&gt;(<span class="number">3</span>),Executors.defaultThreadFactory(),<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        threadPool.execute(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 办理业务！&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">    exception.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//使用完毕后要交还线程</span></span><br><span class="line">    threadPool.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在ThreadPoolExecutor的构造函数中启用 <strong>CallerRunsPolicy</strong> 策略。</p><p>启动程序，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301172530.png" alt="image-20210301172529674"></p><ul><li>DiscardOldestPolicy</li></ul><blockquote><p>抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务。</p><p>在ThreadPoolExecutor的构造函数中启用 <strong>DiscardOldestPolicy</strong> 策略。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService threadPool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>, <span class="number">5</span>,<span class="number">60L</span>,TimeUnit.SECONDS,<span class="keyword">new</span> LinkedBlockingDeque&lt;Runnable&gt;(<span class="number">3</span>), Executors.defaultThreadFactory(), <span class="keyword">new</span> ThreadPoolExecutor.DiscardOldestPolicy());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        threadPool.execute(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 办理业务！&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">    exception.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//使用完毕后要交还线程</span></span><br><span class="line">    threadPool.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行程序，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301180756.png" alt="image-20210301180756130"></p><ul><li>DiscardPolicy</li></ul><blockquote><p>该策略默默地丢弃无法处理的任务，不予任何处理也不抛出异常。如果允许任务丢失，这是最好的一种策略。</p></blockquote><ul><li>后面两种拒绝策略的差别</li></ul><blockquote><p><strong>DiscardOldestPolicy</strong> 抛弃等待最久的请求，而 <strong>DiscardPolicy</strong> 抛弃最新的请求。</p></blockquote><h3 id="3、补充"><a href="#3、补充" class="headerlink" title="3、补充"></a>3、补充</h3><blockquote><p>以上内置拒绝策略均实现了<strong>RejectedExecutionHandle</strong>接口</p><p><strong>默认的拒绝策略是 AbortPolicy</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301181405.png" alt="image-20210301181405424"></p><blockquote><p>4个拒绝策略分别都是ThreadPoolExecutor中的静态内部类</p><p>这里给出AbortPolicy的源码为例。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210301181617.png" alt="image-20210301181617236"></p><h2 id="9-9、最大线程数设置"><a href="#9-9、最大线程数设置" class="headerlink" title="9.9、最大线程数设置"></a>9.9、最大线程数设置</h2><h3 id="1、CPU密集型"><a href="#1、CPU密集型" class="headerlink" title="1、CPU密集型"></a>1、CPU密集型</h3><blockquote><p>设置<code>最大线程数</code> = <code>CPU核数</code> + 1</p><p>使用Java代码查看CPU核数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Runtime.getRuntime().availableProcessors());</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210228235213.png" alt="image-20210228235213769"></p><h3 id="2、IO密集型"><a href="#2、IO密集型" class="headerlink" title="2、IO密集型"></a>2、IO密集型</h3><blockquote><p>后面补充</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试总结（一）</title>
      <link href="posts/3180010034.html"/>
      <url>posts/3180010034.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1、JDK-amp-JRE-amp-JVM"><a href="#1、JDK-amp-JRE-amp-JVM" class="headerlink" title="1、JDK&amp;JRE&amp;JVM"></a>1、JDK&amp;JRE&amp;JVM</h2><ul><li>JDK，即Java Development Kit</li></ul><blockquote><p>Java开发工具包，提供了Java的开发环境和运行环境</p><p>包含了编译Java源文件的编译器Javac，还有调试和分析的工具。</p></blockquote><ul><li>JRE，即Java Runtime Environment，Java运行环境，包含Java虚拟机及一些基础类库</li><li>JVM，即Java Virtual Machine，Java虚拟机，提供执行字节码文件的能力</li></ul><blockquote><p>如果只是运行Java程序，那么只需要装JRE即可</p><p>JVM是实现Java跨平台的核心，但JVM本身不是跨平台的，也就是说，不同平台需要安装不同的JVM</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210226003719.png" alt="image-20210226003719315"></p><h2 id="2、-与equals的区别"><a href="#2、-与equals的区别" class="headerlink" title="2、==与equals的区别"></a>2、==与equals的区别</h2><h3 id="2-1、"><a href="#2-1、" class="headerlink" title="2.1、=="></a>2.1、==</h3><ul><li>如果比较的是基本数据类型，那么比较的是数值</li><li>如果比较的是引用类型，那么比较引用指向的值，也就是地址。</li></ul><h3 id="2-2、equals"><a href="#2-2、equals" class="headerlink" title="2.2、equals"></a>2.2、equals</h3><ul><li><strong>默认比较的也是地址，equals方法是定义在Object类上的，默认的实现就是比较地址</strong> ，Object上equals方法的源码如下，可以看到，Object的equals方法<strong>底层调用了 “==” 进行比较</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>对于自定义的类，如果需要比较的是内容（类似String、Integer），那么就需要重写equals方法，我们可以看一下String和Integer中的equals方法</p></li><li><p>String的equals方法</p><ul><li>先判断传入的对象和当前字符串对象地址是否相同</li><li>如果地址不同，判断传入的对象是否为String类型，如果不是，直接返回false</li><li>如果传入的对象是String类型对象，那么判断长度是否相等，如果不等，直接返回false</li><li>如果两者长度相等，那么就将两者char数组中的字符一一取出，逐一判断是否相等，若有不等的字符，直接返回false</li><li>如果以上条件均满足，返回true</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        String anotherString = (String)anObject;</span><br><span class="line">        <span class="keyword">int</span> n = value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="keyword">char</span> v1[] = value;</span><br><span class="line">            <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Integer的equals方法</p><ul><li>先判断传入对象的类型，如果不为Integer类型，那么直接return false</li><li>否则比较两个Integer对象的值</li></ul><blockquote><p>注意：判断两个Integer对象值是否相等不能用”==”，需要使用equals方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">        <span class="keyword">return</span> value == ((Integer)obj).intValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3、几个对象？"><a href="#2-3、几个对象？" class="headerlink" title="2.3、几个对象？"></a>2.3、几个对象？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">System.out.println(s1 == s2);</span><br></pre></td></tr></table></figure><blockquote><p>false</p><p>使用new关键字创建String对象时开辟了新空间，故地址不同。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s3 = <span class="string">&quot;zs&quot;</span>;</span><br><span class="line">String s4 = <span class="string">&quot;zs&quot;</span>;</span><br><span class="line">System.out.println(s3 == s4);</span><br><span class="line">System.out.println(s3 == s1);</span><br></pre></td></tr></table></figure><blockquote><p>true</p><p>使用了字符串常量池，s3和s4均指向常量池中的”zs”字符串对象</p><p>false</p><p>s1指向堆的地址，而s3指向常量池的地址</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s5 = <span class="string">&quot;zszs&quot;</span>;</span><br><span class="line">String s6 = s3+s4;</span><br><span class="line">System.out.println(s5 == s6);</span><br></pre></td></tr></table></figure><blockquote><p>false</p><p>字符串是一个不可变值，在使用 “+” 号连接字符串时，实际上是通过new关键字创建了一个新对象，这个新对象的值为s3 + s4，也即zszs，虽然内容相同，但地址不同。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String s7 = <span class="string">&quot;zs&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> String s8 = <span class="string">&quot;zs&quot;</span>;</span><br><span class="line">String s9 = s7+s8;</span><br><span class="line">System.out.println(s5 == s9);</span><br></pre></td></tr></table></figure><blockquote><p>true</p><p>由于使用final修饰，此时s7和s8不是一个变量，而是一个常量。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String s10 = s3+s4;</span><br><span class="line">System.out.println(s5 == s10);</span><br></pre></td></tr></table></figure><blockquote><p>false</p><p>由于s3、s4没有加final修饰，依然还是变量，所以仍然需要使用new StringBuilder去拼接字符串，此时创建了一个新对象，结果为false。</p></blockquote><h2 id="3、final"><a href="#3、final" class="headerlink" title="3、final"></a>3、final</h2><ul><li>使用final修饰类，表示这个类不可被继承，例如String类</li><li>使用final修饰方法，表示这个方法不可被重写</li><li>使用final修饰变量，这个变量就是常量</li></ul><blockquote><p>注意：在使用final修饰变量时</p></blockquote><ul><li>如果修饰的是基本数据类型，表示这个值本身不可被修改</li><li>如果修饰的是引用类型，<strong>那么代表引用的指向不可被改变，而被修饰引用的属性值是可以被修改的。</strong></li><li>比如以下的代码是可以的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Student student = <span class="keyword">new</span> Student(<span class="number">1</span>,<span class="string">&quot;Andy&quot;</span>);</span><br><span class="line">student.setAge(<span class="number">18</span>);<span class="comment">//注意，这个是可以的！</span></span><br></pre></td></tr></table></figure><h2 id="4、接口与抽象类的区别"><a href="#4、接口与抽象类的区别" class="headerlink" title="4、接口与抽象类的区别"></a>4、接口与抽象类的区别</h2><h3 id="4-1、JDK8之前"><a href="#4-1、JDK8之前" class="headerlink" title="4.1、JDK8之前"></a>4.1、JDK8之前</h3><ul><li><p>语法：</p></li><li><ul><li>抽象类：方法可以有抽象的，也可以有非抽象, 有构造器</li><li>接口：方法都是抽象，属性都是常量，默认有public static final修饰</li><li>接口中不能含有静态代码块以及静态方法，而抽象类可以有静态代码块和静态方法；</li><li>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li></ul></li><li><p>设计：</p></li><li><ul><li>抽象类：同一类事物的抽取，比如针对Dao层操作的封装，如，BaseDao，BaseServiceImpl</li><li>接口：通常更像是一种标准的制定，定制系统之间对接的标准</li></ul></li></ul><h3 id="4-2、JDK8之后"><a href="#4-2、JDK8之后" class="headerlink" title="4.2、JDK8之后"></a>4.2、JDK8之后</h3><ul><li>接口里面可以有实现的方法，注意要在方法的声明上加上default或者static</li></ul><h2 id="5、重写和重载"><a href="#5、重写和重载" class="headerlink" title="5、重写和重载"></a>5、重写和重载</h2><h3 id="5-1、重载"><a href="#5-1、重载" class="headerlink" title="5.1、重载"></a>5.1、重载</h3><blockquote><p>重载发生在一个类里面，方法名相同，参数列表不同</p><p><strong>重载和返回值类型无关</strong>，即以下写法不构成重载</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="5-2、重写"><a href="#5-2、重写" class="headerlink" title="5.2、重写"></a>5.2、重写</h3><blockquote><p>发生在父类和子类中，方法名相同，参数列表相同</p></blockquote><h2 id="6、ArrayList和LinkedList"><a href="#6、ArrayList和LinkedList" class="headerlink" title="6、ArrayList和LinkedList"></a>6、ArrayList和LinkedList</h2><h3 id="6-1、底层数据结构的区别"><a href="#6-1、底层数据结构的区别" class="headerlink" title="6.1、底层数据结构的区别"></a>6.1、底层数据结构的区别</h3><blockquote><p>ArrayList底层使用了数组，连续一块内存空间。</p><p>LinkedList，双向链表，不是连续的内存空间</p></blockquote><h3 id="6-2、常规结论"><a href="#6-2、常规结论" class="headerlink" title="6.2、常规结论"></a>6.2、常规结论</h3><ul><li>注意，以下结论不这么严谨</li></ul><blockquote><p>ArrayList，查找快，因为是连续的内存空间，方便寻址，但删除，插入慢，因为需要发生数据迁移<br>LinkedList，查找慢，因为需要通过指针一个个寻找，但删除，插入块，因为只要改变前后节点的指针指向即可。</p></blockquote><h3 id="6-3、ArrayList细节分析"><a href="#6-3、ArrayList细节分析" class="headerlink" title="6.3、ArrayList细节分析"></a>6.3、ArrayList细节分析</h3><blockquote><p>增加</p></blockquote><ul><li><p>添加到末尾，正常不需要做特别的处理，除非现有的数组空间不够了，需要扩容</p></li><li><ul><li><p>数组初始化容量多大？10，当你知道需要存储多少数据时，建议在创建的时候，直接设置初始化大小</p></li><li><p>怎么扩容？</p></li><li><ul><li>当发现容量不够之后，就进行扩容</li><li>按原先数组容量的1.5倍进行扩容，位运算，下面是关键的源码</li></ul></li><li><p>```java<br>int oldCapacity = elementData.length;<br>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- - 再将原先数组的元素复制到新数组，使用数组工具类Arrays的copyOf方法</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;java</span><br><span class="line">  elementData &#x3D; Arrays.copyOf(elementData, newCapacity)</span><br></pre></td></tr></table></figure></li></ul></li><li><ul><li>如果添加到其他位置，那么这个时候就要做数组整体的搬迁</li></ul></li></ul><blockquote><p>删除</p></blockquote><ul><li>删除末尾，并不需要迁移</li><li>删除其他位置，这个时候需要搬迁</li></ul><blockquote><p>修改</p></blockquote><ul><li>修改之前先定位</li></ul><h3 id="6-4、LinkedList细节分析"><a href="#6-4、LinkedList细节分析" class="headerlink" title="6.4、LinkedList细节分析"></a>6.4、LinkedList细节分析</h3><ul><li><p>提供了两个引用：first和last</p></li><li><p>增加</p></li></ul><blockquote><p>添加到末尾，创建一个新的节点，将之前的last节点设置为新节点的pre，新节点设置为last</p><p>我们看下源码：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取到最后一个节点​</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="comment">//构建一个新节点，将当前的last作为这个新节点的pre​</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//把last指向新节点​</span></span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="comment">//如果原先没有最后一个节点​</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">//将first指向新节点​</span></span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">//否则，将原先的last的next指向新节点​</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line">Node节点的定义：内部类</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、ArrayList和Vector"><a href="#7、ArrayList和Vector" class="headerlink" title="7、ArrayList和Vector"></a>7、ArrayList和Vector</h2><h3 id="7-1、基本介绍"><a href="#7-1、基本介绍" class="headerlink" title="7.1、基本介绍"></a>7.1、基本介绍</h3><blockquote><p>ArrayList：线程不安全，效率高，常用<br>Vector：线程安全的，效率低</p></blockquote><h3 id="7-2、CopyOnWriteArrayList"><a href="#7-2、CopyOnWriteArrayList" class="headerlink" title="7.2、CopyOnWriteArrayList"></a>7.2、CopyOnWriteArrayList</h3><blockquote><p>由于ArrayList是线程不安全的，在高并发读写情况下，ArrayList可能会报<strong>ConcurrentModificationException</strong> 异常，所以我们必须寻找在高并发条件下能够保证线程安全的替代品。</p><p>Vector是线程安全的，但由于它使用synchronized来保证安全性，所以导致它效率低，所以在高并发条件下也不考虑Vector。</p><p>对于并发量小的情况，我们可以使用Collections工具类的synchronizedList()来包装一个ArrayList，使原本线程不安全的ArrayList对象线程安全。</p><p>在高并发条件下，我们可以使用CopyOnWriteArrayList来保证线程安全，这种数据结构使用读写分离来提高效率。</p></blockquote><h2 id="8、HashMap、HashTable和ConcurrentHashMap的区别"><a href="#8、HashMap、HashTable和ConcurrentHashMap的区别" class="headerlink" title="8、HashMap、HashTable和ConcurrentHashMap的区别"></a>8、HashMap、HashTable和ConcurrentHashMap的区别</h2><h3 id="8-1、基本区别"><a href="#8-1、基本区别" class="headerlink" title="8.1、基本区别"></a>8.1、基本区别</h3><blockquote><p>Hashtable是线程安全的，但效率低<br>HashMap是线程不安全的，但效率高<br>Collections.synchronizedMap()，工具类提供了同步包装器的方法，来返回具有线程安全的集合对象，但性能依然有问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K,V&gt; <span class="function">Map&lt;K,V&gt; <span class="title">synchronizedMap</span><span class="params">(Map&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SynchronizedMap&lt;&gt;(m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在这个类的内部方法实现上，也只是单纯加上了锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (mutex) &#123;<span class="keyword">return</span> m.put(key, value);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为解决这样的矛盾问题，所以JDK提供了并发包，来平衡这样的问题（java.util.concurrent）</p><h3 id="8-2、ConcurrentHashMap（重点）"><a href="#8-2、ConcurrentHashMap（重点）" class="headerlink" title="8.2、ConcurrentHashMap（重点）"></a>8.2、ConcurrentHashMap（重点）</h3><ul><li>兼顾了线程安全和效率的问题</li></ul><blockquote><p>分析：HashTable锁了整段数据（用户操作是不同的数据段，依然需要等待）<br>解决方案：把数据分段，执行分段锁（分离锁），核心把锁的范围变小，这样出现并发冲突的概率就变小<br>在保存的时候，计算所存储的数据是属于哪一段，只锁当前这一段</p></blockquote><ul><li><strong>注意：分段锁（分离锁）是JDK1.8之前的一种的方案，JDK1.8之后做了优化。</strong></li></ul><p><strong>JDK1.7跟JDK1.8在ConcurrentHashMap的实现上存在以下区别：</strong></p><p><strong>1，数据结构</strong></p><p>JDK1.7采用链表的方式，而JDK1.8则采用链表+红黑树的方式</p><p><strong>2，发生hash碰撞之后</strong></p><p>JDK1.7发生碰撞之后，会采用链表的方式来解决</p><p>JDK1.8发生碰撞之后，默认采用链表，但当链表的长度超过8，且数组容量超过64时，会转换为红黑树存储</p><p><strong>3，保证并发安全</strong></p><p>JDK1.7采用分段锁的方式，而JDK1.8采用CAS和synchronized的组合模式</p><p><strong>4，查询复杂度</strong></p><p>JDK1.7采用链表的方式，时间复杂度为O(n)，而JDK1.8在采用红黑树的方式时，时间复杂度为O(log(n))</p><h2 id="9、IO流的分类和选择"><a href="#9、IO流的分类和选择" class="headerlink" title="9、IO流的分类和选择"></a>9、IO流的分类和选择</h2><h3 id="9-1、分类"><a href="#9-1、分类" class="headerlink" title="9.1、分类"></a>9.1、分类</h3><ul><li>按方向分：输入流，输出流</li></ul><blockquote><p>（注意，是站在程序的角度来看方向），输入流用于读文件，输出流用于写文件</p></blockquote><ul><li><p>按读取的单位分：字节流，字符流</p></li><li><p>按处理的方式分：节点流，处理流</p></li></ul><blockquote><p>比如，FileInputStream和BufferedInputStream(后者带有缓存区功能-byte[])</p></blockquote><ul><li>IO流的4大基类：InputStream，OutputStream，Reader，Writer</li></ul><h3 id="9-2、选择"><a href="#9-2、选择" class="headerlink" title="9.2、选择"></a>9.2、选择</h3><blockquote><p>字节流可以读取任何文件<br>读取文本文件的时候：选择字符流（假如有解析文件的内容的需求，比如逐行处理，则采用字符流，比如txt文件）<br>读取二进制文件的时候，选择字节流（视频，音频，doc，ppt）</p></blockquote><h2 id="10、Exception和Error"><a href="#10、Exception和Error" class="headerlink" title="10、Exception和Error"></a>10、Exception和Error</h2><h3 id="10-1、Exception和Error的区别"><a href="#10-1、Exception和Error的区别" class="headerlink" title="10.1、Exception和Error的区别"></a>10.1、Exception和Error的区别</h3><blockquote><p>Exception和Error两者均是Throwable的子类，一个异常只有是Throwable的子类，才能被程序捕获和抛出</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210226202156.png" alt="image-20210226202153816"></p><ul><li>Error指正常情况下不太可能出现的情况，绝大部分的Error指程序崩溃，处于非正常不可恢复的状态，如OutOfMemoryError和StackOverflowError</li><li>Exception是程序正常运行中可以预料的意外情况，可以捕获和处理</li></ul><h3 id="10-2、运行时异常和一般异常的区别"><a href="#10-2、运行时异常和一般异常的区别" class="headerlink" title="10.2、运行时异常和一般异常的区别"></a>10.2、运行时异常和一般异常的区别</h3><blockquote><p>非运行时异常</p></blockquote><ul><li>在编译时被强制检查的异常，在方法声明中声明的异常，如ClassNotFoundException、IOException</li></ul><blockquote><p>运行时异常</p></blockquote><ul><li>不受检查但通常在编码中可以避免的逻辑错误，根据需要来判断如何处理，不需要再编译器强制要求；如ConcurrentModificationException、NullPointerException等</li></ul><h2 id="11、Servlet生命周期"><a href="#11、Servlet生命周期" class="headerlink" title="11、Servlet生命周期"></a>11、Servlet生命周期</h2><ul><li>Web容器加载Servlet类并实例化（默认延迟加载，一次）</li><li>调用init方法进行初始化（一次）</li><li>用户请求Servlet，请求到达服务器时，运行其service方法（每次）</li><li>service方法中根据用户请求方式来调用对应的doXXX方法（每次）</li><li>销毁实例时调用destroy方法（一次）</li></ul><h2 id="12、转发（forward）和重定向（redirect）的区别"><a href="#12、转发（forward）和重定向（redirect）的区别" class="headerlink" title="12、转发（forward）和重定向（redirect）的区别"></a>12、转发（forward）和重定向（redirect）的区别</h2><ul><li>请求转发是容器控制的跳转，服务器直接访问目标地址，把目标地址响应的内容读取出来，直接发给浏览器。浏览器不知道请求从哪里来，<strong>浏览器地址不改变</strong></li><li>重定向是服务器收到请求后，返回一个状态码给浏览器，浏览器请求新地址，地址栏改变</li><li>请求转发效率更高，尽量用请求转发，但请求转发不能跳转到其他服务器上，重定向可以跳转到其他服务器上。</li></ul><h2 id="13、jsp内置对象"><a href="#13、jsp内置对象" class="headerlink" title="13、jsp内置对象"></a>13、jsp内置对象</h2><ul><li>request</li></ul><blockquote><p>向客户端请求数据</p></blockquote><ul><li>response</li></ul><blockquote><p>封装了jsp产生的响应，然后被发送到客户端以响应客户请求。</p></blockquote><ul><li>pageContext</li></ul><blockquote><p>为jsp页面包装页面的上下文</p></blockquote><ul><li>session</li></ul><blockquote><p>用于保存每个用户的信息，以便跟踪每个用户的操作状态</p></blockquote><ul><li>application</li></ul><blockquote><p>应用程序对象</p></blockquote><ul><li>out</li></ul><blockquote><p>向客户端输出数据</p></blockquote><ul><li>config</li></ul><blockquote><p>表示Servlet的配置，当一个Servlet初始化时，容器把某些信息通过此对象传递给这个Servlet</p></blockquote><ul><li>page</li></ul><blockquote><p>Jsp实现类的实例，它是Jsp本身，通过这个可以对它进行访问</p></blockquote><ul><li>exception</li></ul><blockquote><p>反映运行时的异常</p></blockquote><h2 id="14、Get和Post的区别"><a href="#14、Get和Post的区别" class="headerlink" title="14、Get和Post的区别"></a>14、Get和Post的区别</h2><ul><li>Get将表单中数据按照param-value的形式添加到action所指向的URL后面，且两者用”?”连接，各变量间使用”&amp;”连接。</li><li>Post将表单中数据存放再form数据体中，按照变量和值对应的方式，传递到action所指向的URL</li><li>Get是不安全的，因为传输过程中数据被放在请求URL中；而Post的所有操作对用户来说都是不可见的</li><li>Get传输的数据量小，这主要是因为URL有长度限制；而Post可以传输大量的数据，所以上传文件只能用Post</li><li>Get限制form表单数据必须为ASCII字符，Post支付整个ISO字符集</li></ul><h2 id="15、Session和Cookie的区别"><a href="#15、Session和Cookie的区别" class="headerlink" title="15、Session和Cookie的区别"></a>15、Session和Cookie的区别</h2><ul><li>session保存在服务器，客户端不知道其中信息；cookie保存在客户端。</li><li>session中保存的是对象，cookie保存的是字符串</li><li>session不能 区分路径，同一个用户在访问一个网站期间，所有的session在任何一个地方都可以访问到。而cookie中如果设置了路径参数，那么同一个网站中不同路径下的cookie互相是访问不到的</li><li>session需要借助cookie才能正常访问，如果客户端完全禁止cookie，那么session将失效</li><li>session存储的数据大小受服务器内存控制，而cookie一般大小为4k</li></ul><h2 id="16、sleep和wait的区别"><a href="#16、sleep和wait的区别" class="headerlink" title="16、sleep和wait的区别"></a>16、sleep和wait的区别</h2><ul><li>所属的类不同</li></ul><blockquote><p>sleep方法定义在Thread上</p><p>wait方法定义在Object上</p></blockquote><ul><li>对于所资源的处理方式不同</li></ul><blockquote><p>sleep不会释放锁</p><p>wait会释放锁</p></blockquote><ul><li>适用范围</li></ul><blockquote><p>sleep可以使用在任何代码块</p><p>wait必须在同步方法或同步代码块中执行</p></blockquote><ul><li>和wait配套使用的方法</li></ul><blockquote><ul><li>void notify()</li></ul><p>唤醒在此对象监视器上等待的单个线程</p><ul><li>void notifyAll()</li></ul><p>唤醒在此对象监视器上等待的所有线程</p></blockquote><h2 id="17、JSP和Servlet的区别"><a href="#17、JSP和Servlet的区别" class="headerlink" title="17、JSP和Servlet的区别"></a>17、JSP和Servlet的区别</h2><ul><li>技术角度</li></ul><blockquote><p>JSP本质就是一个Servlet<br>JSP的工作原理：JSP-&gt;翻译-&gt;Servlet(java)-&gt;编译-&gt;Class（最终跑的文件）</p></blockquote><ul><li>应用角度</li></ul><blockquote><p>JSP特点在于实现视图，Servlet特点在于实现控制逻辑</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC学习笔记（二）-集合类相关、Callable接口及JUC常用辅助类</title>
      <link href="posts/417387534.html"/>
      <url>posts/417387534.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="四、集合类不安全"><a href="#四、集合类不安全" class="headerlink" title="四、集合类不安全"></a>四、集合类不安全</h1><h2 id="4-1、ArrayList不安全"><a href="#4-1、ArrayList不安全" class="headerlink" title="4.1、ArrayList不安全"></a>4.1、ArrayList不安全</h2><h3 id="1、问题说明"><a href="#1、问题说明" class="headerlink" title="1、问题说明"></a>1、问题说明</h3><ul><li>在多线程条件下往ArrayList集合中添加对象</li></ul><blockquote><p>在多线程条件下调用ArrayList对象的add方法，查看执行结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>));</span><br><span class="line">            System.out.println(list);</span><br><span class="line">        &#125;,String.valueOf(i)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行程序，发现每一次程序的执行结果中，集合对象的个数均不相同。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210225133747.png" alt="image-20210225133739112"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210225133803.png" alt="image-20210225133803329"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210225133827.png" alt="image-20210225133827161"></p><ul><li>修改上一个程序的线程数量，由3个变为30个</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>));</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;,String.valueOf(i)).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行，查看结果，当线程个数达到30，此时运行程序，发现程序会报ConcurrentModificationException异常</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210225134315.png" alt="Ex"></p><h3 id="2、导致原因"><a href="#2、导致原因" class="headerlink" title="2、导致原因"></a>2、导致原因</h3><blockquote><p>由于ArrayList是<strong>线程不安全</strong>的，ArrayList在迭代的时候如果同时对其进行修改就会</p><p>抛出java.util.ConcurrentModificationException异常</p><p>这是一个并发修改异常</p></blockquote><h3 id="3、解决方案"><a href="#3、解决方案" class="headerlink" title="3、解决方案"></a>3、解决方案</h3><ul><li>将ArrayList换成Vector，Vector是线程安全的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>));</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;,String.valueOf(i)).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Vector中的add方法</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210225135416.png" alt="image-20210225135416626"></p><ul><li>使用Collections工具类的synchronizedList方法，使一个线程不安全的ArrayList变为线程安全。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>));</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;,String.valueOf(i)).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行程序，发现问题已经解决，这种方法在数据量小的情况下完全够用</p></blockquote><ul><li>使用CopyOnWriteArrayList类代替ArrayList</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>));</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;,String.valueOf(i)).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2、CopyOnWriteArrayList"><a href="#4-2、CopyOnWriteArrayList" class="headerlink" title="4.2、CopyOnWriteArrayList"></a>4.2、CopyOnWriteArrayList</h2><blockquote><p>不加锁性能提升出错误，加锁数据一致性能下降</p></blockquote><h3 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h3><blockquote><p>CopyOnWriteArrayList是arraylist的一种线程安全变体，</p><p>其中所有可变操作（add、set等）都是通过生成底层数组的新副本来实现的。</p></blockquote><h3 id="2、add方法"><a href="#2、add方法" class="headerlink" title="2、add方法"></a>2、add方法</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210225151433.png" alt="image-20210225151432318"></p><blockquote><p>往CopyOnWriteArrayList对象中添加数据的步骤如下</p></blockquote><ul><li>为CopyOnWriteArrayList对象加锁</li><li>使用一个Object数组保存当前CopyOnWriteArrayList对象原有的数组</li><li>使用Arrays工具类的copyOf方法将原来数组的数据拷贝到一个新数组中，新数组的长度为原来数组长度  +  1</li><li>使用新数组代替CopyOnWriteArrayList原有的数组，返回true</li><li>解锁</li></ul><h3 id="3、写时复制"><a href="#3、写时复制" class="headerlink" title="3、写时复制"></a>3、写时复制</h3><blockquote><p>CopyOnWrite 容器即写时复制容器，往一个容器中添加元素时，不直接往当前容器的Object[] 添加，而是先将当前容器的Object[] 进行copy，复制出一个新的容器object[] newElements，然后往新的容器中添加元素，添加完元素后，再将原来容器的引用指向新的容器（setArray(newElements)），这样做的好处实可以对CopyOnWrite 容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素，所以CopyOnWrite 容器也是一种读写分离的思想，读和写使用不同的容器。</p></blockquote><h2 id="4-3、HashSet线程不安全"><a href="#4-3、HashSet线程不安全" class="headerlink" title="4.3、HashSet线程不安全"></a>4.3、HashSet线程不安全</h2><h3 id="1、举例说明"><a href="#1、举例说明" class="headerlink" title="1、举例说明"></a>1、举例说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        set.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>));</span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;,String.valueOf(i)).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行程序，发现同样报了java.util.ConcurrentModificationException 异常，说明HashSet也是线程不安全的</p></blockquote><h3 id="2、解决方法一-使用Collections工具类"><a href="#2、解决方法一-使用Collections工具类" class="headerlink" title="2、解决方法一-使用Collections工具类"></a>2、解决方法一-使用Collections工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; set = Collections.synchronizedSet(<span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        set.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>));</span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;,String.valueOf(i)).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、解决方法二-CopyOnWriteArraySet"><a href="#3、解决方法二-CopyOnWriteArraySet" class="headerlink" title="3、解决方法二-CopyOnWriteArraySet"></a>3、解决方法二-CopyOnWriteArraySet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        set.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>));</span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;,String.valueOf(i)).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、HashSet底层"><a href="#4、HashSet底层" class="headerlink" title="4、HashSet底层"></a>4、HashSet底层</h3><blockquote><p>HashSet的底层是HashMap，HashSet的add方法底层调用了HashMap的put方法，其中添加的元素为key，而value固定为一个Object对象PRESENT</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210225155756.png" alt="image-20210225155755092"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210225155841.png" alt="image-20210225155841728"></p><h2 id="4-4、HashMap线程不安全"><a href="#4-4、HashMap线程不安全" class="headerlink" title="4.4、HashMap线程不安全"></a>4.4、HashMap线程不安全</h2><h3 id="1、举例说明-1"><a href="#1、举例说明-1" class="headerlink" title="1、举例说明"></a>1、举例说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        map.put(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>),UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>));</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;,String.valueOf(i)).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行程序，发现同样报了java.util.ConcurrentModificationException 异常，说明HashMap也是线程不安全的</p></blockquote><h3 id="2、解决方法一-使用Collections工具类-1"><a href="#2、解决方法一-使用Collections工具类-1" class="headerlink" title="2、解决方法一-使用Collections工具类"></a>2、解决方法一-使用Collections工具类</h3><blockquote><p>使用Collections.synchronizedMap方法将线程不安全的HashMap包装为线程安全的map</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String&gt; map = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        map.put(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>),UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>));</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;,String.valueOf(i)).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、解决方法二-使用ConcurrentHashMap"><a href="#3、解决方法二-使用ConcurrentHashMap" class="headerlink" title="3、解决方法二-使用ConcurrentHashMap"></a>3、解决方法二-使用ConcurrentHashMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        map.put(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>),UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>));</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;,String.valueOf(i)).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、Callable"><a href="#五、Callable" class="headerlink" title="五、Callable"></a>五、Callable</h1><h2 id="5-1、面试题"><a href="#5-1、面试题" class="headerlink" title="5.1、面试题"></a>5.1、面试题</h2><blockquote><p>获得多线程的方法有几种？4种</p></blockquote><ul><li>继承Thread类</li><li>实现Runnable接口</li></ul><blockquote><p>在JDK5之后还提供了另外两种方法</p></blockquote><ul><li>实现Callable接口</li><li>使用线程池获得</li></ul><h2 id="5-2、是什么？"><a href="#5-2、是什么？" class="headerlink" title="5.2、是什么？"></a>5.2、是什么？</h2><blockquote><p>Callable是java.util.concurrent包下的一个函数式接口，可以用作lambda表达式或方法引用的赋值对象。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210225165926.png" alt="img"></p><h2 id="5-3、与Runnable对比"><a href="#5-3、与Runnable对比" class="headerlink" title="5.3、与Runnable对比"></a>5.3、与Runnable对比</h2><blockquote><p>Callable</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runnable</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Runnable和Callable的区别</p></blockquote><ul><li><p>抽象方法是否有返回值</p><ul><li>Runnable没有，Callable有</li><li>Callable接口中抽象方法的返回值由传入的泛型决定</li></ul></li><li><p>抽象方法是否抛出异常</p><ul><li>Runnable没有，Callable有</li></ul></li><li><p>落地实现方法不一样，一个是run，一个是call</p></li></ul><h2 id="5-4、怎么使用？"><a href="#5-4、怎么使用？" class="headerlink" title="5.4、怎么使用？"></a>5.4、怎么使用？</h2><h3 id="1、直接将Callable传入Thread的构造方法可行吗？"><a href="#1、直接将Callable传入Thread的构造方法可行吗？" class="headerlink" title="1、直接将Callable传入Thread的构造方法可行吗？"></a>1、直接将Callable传入Thread的构造方法可行吗？</h3><blockquote><p>不可行，因为Thread类中没有传入Callable接口对象的构造函数</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210225174322.png" alt="img"></p><h3 id="2、FutureTask"><a href="#2、FutureTask" class="headerlink" title="2、FutureTask"></a>2、FutureTask</h3><ul><li>根据Java的多态，我们可以找到一个类，这个类同时和Callable、Runnable有联系</li></ul><blockquote><p>而在Runnable子接口的实现类中，有这么一个FutureTask类，这个类即是Runnable子接口的实现类，又和Callable接口有联系</p><p>FutureTask的继承实现关系如下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210225174628.png" alt="image-20210225174628473"></p><blockquote><p>FutureTask类中与Callable有联系的构造方法如下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210225174835.png" alt="image-20210225174835826"></p><h3 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h3><blockquote><p>编写一个类，实现Callable接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;********come in here&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;芜湖&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在main方法中，创建一个FutureTask对象，在FutureTask的构造方法中传入一个MyCallable对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FutureTask futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(<span class="keyword">new</span> MyCallable());</span><br></pre></td></tr></table></figure><blockquote><p>在Thread的构造函数中传入上一步创建的FutureTask对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(futureTask,<span class="string">&quot;A&quot;</span>).start();</span><br></pre></td></tr></table></figure><blockquote><p>使用FutureTask对象的get()方法可以获得call()方法的返回值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(futureTask.get());</span><br></pre></td></tr></table></figure><blockquote><p>全部代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FutureTask futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(<span class="keyword">new</span> MyCallable());</span><br><span class="line"><span class="keyword">new</span> Thread(futureTask,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">System.out.println(futureTask.get());</span><br></pre></td></tr></table></figure><blockquote><p>执行结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210225181443.png" alt="image-20210225181442658"></p><h2 id="5-5、FutureTask"><a href="#5-5、FutureTask" class="headerlink" title="5.5、FutureTask"></a>5.5、FutureTask</h2><h3 id="1、是什么？"><a href="#1、是什么？" class="headerlink" title="1、是什么？"></a>1、是什么？</h3><blockquote><p>FutureTask也即未来的任务，用它就干一件事，<strong>异步调用</strong></p><p>main方法就像一个冰糖葫芦，一个个方法由main串起来。</p><p>但解决不了一个问题：正常调用挂起堵塞问题</p><p>在主线程中需要执行比较耗时的操作时，但又不想阻塞主线程时，可以把这些作业交给FutureTask对象在后台完成，</p><p>当主线程将来需要时，就可以通过FutureTask对象获得后台作业的计算结果或者执行状态。</p><p>一般FutureTask多用于耗时的计算，主线程可以在完成自己的任务后，再去获取结果。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210225205225.png" alt="img"></p><blockquote><p>举例说明</p></blockquote><ul><li>老师上着课，口渴了，去买水不合适，讲课线程继续，我可以单起个线程找班长帮忙买水，水买回来了放桌上，我需要的时候再去get。</li><li>4个同学，A算1+20,B算21+30,C算31*到40,D算41+50，是不是C的计算量有点大啊，FutureTask单起个线程给C计算，我先汇总ABD，最后等C计算完了再汇总C，拿到最终结果</li></ul><blockquote><p>这也是为什么Callable的call方法需要有返回值的原因，因为程序最终的执行结果是<strong>main线程执行结果</strong> + FutureTask线程执行结果。</p></blockquote><h3 id="2、Callable细节一"><a href="#2、Callable细节一" class="headerlink" title="2、Callable细节一"></a>2、Callable细节一</h3><blockquote><p>FutureTask对象的get方法一般放在最后一行。</p><p><strong>仅在计算完成时才能检索结果</strong>；<strong>如果计算尚未完成，则阻塞 get 方法。</strong>一旦计算完成，就不能再重新开始或取消计算。<strong>get方法而获取结果只有在计算完成时获取，否则会一直阻塞直到任务转入完成状态，</strong>然后会返回结果或者抛出异常。 </p></blockquote><h3 id="3、Callable细节二"><a href="#3、Callable细节二" class="headerlink" title="3、Callable细节二"></a>3、Callable细节二</h3><blockquote><p>对于同一个FutureTask对象，不管有多少个线程调用，最终FutureTask对象中的<strong>call方法执行被执行一次。</strong></p></blockquote><ul><li>MyCallable</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;********come in here&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1024</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在main方法中创建三个线程，传入同一个FutureTask对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    FutureTask futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(<span class="keyword">new</span> MyCallable());</span><br><span class="line">    <span class="keyword">new</span> Thread(futureTask,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(futureTask,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(futureTask,<span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;计算完成！&quot;</span>);</span><br><span class="line">    System.out.println(futureTask.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210225213137.png" alt="image-20210225213136697"></p><h1 id="六、JUC强大的辅助类"><a href="#六、JUC强大的辅助类" class="headerlink" title="六、JUC强大的辅助类"></a>六、JUC强大的辅助类</h1><h2 id="6-1、CountDownLatch-减少计数（人走完再关门）"><a href="#6-1、CountDownLatch-减少计数（人走完再关门）" class="headerlink" title="6.1、CountDownLatch-减少计数（人走完再关门）"></a>6.1、CountDownLatch-减少计数（人走完再关门）</h2><h3 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h3><ul><li>CountDownLatch主要有两个方法，当一个或多个线程调用await方法时，这些线程会阻塞。</li><li>其它线程调用countDown方法会将计数器减1(调用countDown方法的线程不会阻塞)</li><li>当计数器的值变为0时，因await方法阻塞的线程会被唤醒，继续执行。</li></ul><h3 id="2、举例说明"><a href="#2、举例说明" class="headerlink" title="2、举例说明"></a>2、举例说明</h3><blockquote><p>模拟六个同学和一个班长在教室里学习，班长必须等到同学们全部走人之后才可以走人</p></blockquote><ul><li>没有用CountDownLatch之前</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t离开教室！&quot;</span>),String.valueOf(i)).start();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t班长关灯走人&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>运行程序，发现班长没有等班里的人走完就锁门了</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210225225726.png" alt="image-20210225225725538"></p><blockquote><p>引入CountDownLatch</p></blockquote><ul><li>创建一个CountDownLatch对象，由于班级中除班长外有六人，所以计数器设置为6</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CountDownLatch downLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">6</span>);</span><br></pre></td></tr></table></figure><ul><li>开辟六个线程，每走一个同学（线程每执行一个），就调用CountDownLatch对象的countDown方法使计数器 - 1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t离开教室！&quot;</span>);</span><br><span class="line">        <span class="comment">//每走一个同学，就让计数器对象 - 1</span></span><br><span class="line">        downLatch.countDown();</span><br><span class="line">    &#125;,String.valueOf(i)).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在计数器值不为0之前（所有同学没有走完之前），调用CountDownLatch对象的await方法令主线程（班长）被阻塞</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在所有同学走人之前，也就是计数器没有为0之前</span></span><br><span class="line"><span class="comment">//主线程（班长线程）必须await</span></span><br><span class="line"><span class="comment">//必须等到计数器由6变为0，主线程才可以继续运行</span></span><br><span class="line">downLatch.await();</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t班长关灯走人&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>完整代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CountDownLatch downLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t离开教室！&quot;</span>);</span><br><span class="line">        <span class="comment">//每走一个同学，就让计数器对象 - 1</span></span><br><span class="line">        downLatch.countDown();</span><br><span class="line">    &#125;,String.valueOf(i)).start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在所有同学走人之前，也就是计数器没有为0之前</span></span><br><span class="line"><span class="comment">//主线程（班长线程）必须await</span></span><br><span class="line"><span class="comment">//必须等到计数器由6变为0，主线程才可以继续运行</span></span><br><span class="line">downLatch.await();</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t班长关灯走人&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210225230737.png" alt="image-20210225230737673"></p><h2 id="6-2、CyclicBarrier-循环栅栏（人到齐再开会）"><a href="#6-2、CyclicBarrier-循环栅栏（人到齐再开会）" class="headerlink" title="6.2、CyclicBarrier-循环栅栏（人到齐再开会）"></a>6.2、CyclicBarrier-循环栅栏（人到齐再开会）</h2><h3 id="1、原理-1"><a href="#1、原理-1" class="headerlink" title="1、原理"></a>1、原理</h3><blockquote><p>CyclicBarrier的字面意思是可循环（Cyclic）使用的屏障（Barrier）。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。线程进入屏障通过CyclicBarrier的await()方法。</p><p>有点类似刺客信条大革命多人任务中，完成挑战后需要所有的刺客到达逃脱点后多人任务才算完成</p></blockquote><h3 id="2、举例说明-1"><a href="#2、举例说明-1" class="headerlink" title="2、举例说明"></a>2、举例说明</h3><ul><li>创建一个CyclicBarrier对象，需要传入要求的线程数和一个Runnable对象，这个对象定义了所有线程都到达后要执行的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">4</span>, () -&gt; System.out.println(<span class="string">&quot;记忆同步完成.&quot;</span>));</span><br></pre></td></tr></table></figure><ul><li>创建4个线程，在run方法中使用CyclicBarrier对象的await方法使当前线程等待</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t到达逃脱地点&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cyclicBarrier.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException interruptedException) &#123;</span><br><span class="line">            interruptedException.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="string">&quot;亚诺&quot;</span> + i).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行程序，查看结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210225232216.png" alt="image-20210225232216225"></p><ul><li>将for循环中的4改为3，运行查看结果</li></ul><blockquote><p>此时不执行CyclicBarrier构造函数中，所有线程完全通过后执行的方法</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210225232255.png" alt="image-20210225232255021"></p><h2 id="6-3、Semaphore-信号灯"><a href="#6-3、Semaphore-信号灯" class="headerlink" title="6.3、Semaphore-信号灯"></a>6.3、Semaphore-信号灯</h2><h3 id="1、原理-2"><a href="#1、原理-2" class="headerlink" title="1、原理"></a>1、原理</h3><blockquote><p>在信号量上我们定义两种操作：</p></blockquote><ul><li>acquire（获取） 当一个线程调用acquire操作时，它要么通过成功获取信号量（信号量减1），要么一直等下去，直到有线程释放信号量，或超时。</li><li>release（释放）实际上会将信号量的值加1，然后唤醒等待的线程。</li></ul><blockquote><p>信号量主要用于两个目的，一个是用于多个共享资源的互斥使用，另一个用于并发线程数的控制。</p></blockquote><h3 id="2、举例说明-2"><a href="#2、举例说明-2" class="headerlink" title="2、举例说明"></a>2、举例说明</h3><blockquote><p>假设现在有三个资源（空车位），供六个线程（车）争抢</p></blockquote><ul><li>创建一个Semaphore对象，构造方法需要传入资源数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>创建六个线程，每个线程在执行完方法（占完车位）后，需要将Semaphore对象中的资源数 -1 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            semaphore.acquire();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t抢到了车位！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException interruptedException) &#123;</span><br><span class="line">            interruptedException.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="string">&quot;车&quot;</span> + i).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用sleep方法模拟线程占用资源，假设每个线程都占用3秒</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抢到资源后占用三秒钟，使用sleep进行模拟</span></span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>在占用完资源之后，需要释放资源，此时调用Semaphore对象的release方法，在finally块中调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//占用资源后令资源数-1</span></span><br><span class="line">            semaphore.acquire();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t抢到了车位！&quot;</span>);</span><br><span class="line">            <span class="comment">//抢到资源后占用三秒钟，使用sleep进行模拟</span></span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t离开了！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException interruptedException) &#123;</span><br><span class="line">            interruptedException.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放资源后让资源数+1</span></span><br><span class="line">            semaphore.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="string">&quot;车&quot;</span> + i).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行程序，查看结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210225235029.png" alt="image-20210225235028385"></p><blockquote><p>当设置资源数为1时，相当于synchronized.</p><p>例如：要求多线程抢一个资源，但只能占有这个资源20s，此时就可以使用Semaphore完成。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC学习笔记（一）-入门介绍、Lock接口及线程间通信</title>
      <link href="posts/2523931385.html"/>
      <url>posts/2523931385.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、JUC入门介绍"><a href="#一、JUC入门介绍" class="headerlink" title="一、JUC入门介绍"></a>一、JUC入门介绍</h1><blockquote><p>JUC即 <strong>java.util.concurrent</strong></p><p>涉及三个包：</p><ul><li>java.util.concurrent</li><li>java.util.concurrent.atomic</li><li>java.util.concurrent.locks</li></ul></blockquote><h2 id="1-1、进程-线程"><a href="#1-1、进程-线程" class="headerlink" title="1.1、进程/线程"></a>1.1、进程/线程</h2><h3 id="1、进程"><a href="#1、进程" class="headerlink" title="1、进程"></a>1、进程</h3><blockquote><p>一个在内存中运行的应用程序。每个进程都有自己独立的一块内存空间，一个进程可以有多个线程，比如在Windows系统中，一个运行的xx.exe就是一个进程。</p></blockquote><h3 id="2、线程"><a href="#2、线程" class="headerlink" title="2、线程"></a>2、线程</h3><blockquote><p>进程中的一个执行任务（控制单元），负责当前进程中程序的执行。一个进程至少有一个线程，一个进程可以运行多个线程，多个线程可共享数据。</p><p>与进程不同的是同类的多个线程共享进程的<strong>堆</strong>和<strong>方法区</strong>资源，但每个线程有自己的<strong>程序计数器</strong>、<strong>虚拟机栈</strong>和<strong>本地方法栈</strong>，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。</p></blockquote><h3 id="3、举例"><a href="#3、举例" class="headerlink" title="3、举例"></a>3、举例</h3><blockquote><p>使用QQ，查看进程一定有一个QQ.exe的进程，我可以用qq和A文字聊天，和B视频聊天，给C传文件，给D发一段语言，QQ支持录入信息的搜索。</p><p>大四的时候写论文，用word写论文，同时用QQ音乐放音乐，同时用QQ聊天，多个进程。</p><p>word如没有保存，停电关机，再通电后打开word可以恢复之前未保存的文档，word也会检查你的拼写，两个线程：容灾备份，语法检查</p></blockquote><h3 id="4、wait-sleep"><a href="#4、wait-sleep" class="headerlink" title="4、wait/sleep"></a>4、wait/sleep</h3><blockquote><p>功能都是当前线程暂停，有什么区别？</p></blockquote><ul><li>wait放开手去睡，放开手里的锁</li><li>sleep握紧手去睡，醒了手里还有锁</li></ul><h2 id="1-2、并发-并行"><a href="#1-2、并发-并行" class="headerlink" title="1.2、并发/并行"></a>1.2、并发/并行</h2><h3 id="1、并发"><a href="#1、并发" class="headerlink" title="1、并发"></a>1、并发</h3><blockquote><p><strong>并发：多个线程任务通过一个cpu执行，所以这些线程任务只能通过切换执行来实现并发，只不过这些线程切换的速度很快，宏观上看似乎就是同时执行的，其实还是一个一个执行的，只不过可以切换执行。</strong></p></blockquote><h3 id="2、并行"><a href="#2、并行" class="headerlink" title="2、并行"></a>2、并行</h3><blockquote><p><strong>并行：多个线程任务通过多个cpu执行，真正意义上的同时执行。因为有多个cpu，一个cpu执行一个任务就好了。</strong></p></blockquote><h2 id="1-3、SaleTicket"><a href="#1-3、SaleTicket" class="headerlink" title="1.3、SaleTicket"></a>1.3、SaleTicket</h2><blockquote><p>三个售票员卖出三十张票</p><p>多线程编程固定套路：线程  + 操作 + 资源类</p></blockquote><h3 id="1、编写一个资源类Ticket"><a href="#1、编写一个资源类Ticket" class="headerlink" title="1、编写一个资源类Ticket"></a>1、编写一个资源类Ticket</h3><blockquote><p>资源类 = 实例变量 + 实例方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//加锁在try外加</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;卖出第&quot;</span> + (number--) + <span class="string">&quot;\t 还剩下&quot;</span> + number + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//加完锁后一定要释放</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、创建一个SaleTicket方法，创建三个线程后开始买票"><a href="#2、创建一个SaleTicket方法，创建三个线程后开始买票" class="headerlink" title="2、创建一个SaleTicket方法，创建三个线程后开始买票"></a>2、创建一个SaleTicket方法，创建三个线程后开始买票</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaleTicket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222214716.png" alt="image-20210222214713300"></p><h3 id="3、优化上述代码"><a href="#3、优化上述代码" class="headerlink" title="3、优化上述代码"></a>3、优化上述代码</h3><blockquote><p>使用λ表达式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaleTicket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4、锁"><a href="#1-4、锁" class="headerlink" title="1.4、锁"></a>1.4、锁</h2><h3 id="1、锁概述"><a href="#1、锁概述" class="headerlink" title="1、锁概述"></a>1、锁概述</h3><blockquote><p>​    线程安全问题的产生前提：<strong>多个线程并发访问共享数据。</strong></p><p>​    将多个线程对共享数据的并发访问转换为串行访问，即一个共享数据一次只能被一个线程访问.</p><p>​    锁可以理解为对共享数据进行保护的一个许可证，对于同一个许可证保护的共享数据来说，任何线程想要访问这些共享数据必须先持有该许可证。一个线程只有在持有许可证的情况下才能对这些共享数据进行访问。并且一个许可证一次只能被一个线程持有。</p><p>​    锁具有<strong>排他性</strong>，即一个锁一次只能被一个线程持有</p></blockquote><h3 id="2、锁的作用"><a href="#2、锁的作用" class="headerlink" title="2、锁的作用"></a>2、锁的作用</h3><blockquote><p>锁可以实现对共享数据的<strong>安全访问</strong></p><p>保障线程的原子性、可见性和有序性</p></blockquote><h3 id="3、注意"><a href="#3、注意" class="headerlink" title="3、注意"></a>3、注意</h3><blockquote><p>使用锁保证线程的安全性，必须满足以下条件：</p></blockquote><ul><li>这些线程在访问共享数据时必须使用同一个锁</li><li>即使是读取共享数据的线程也需要使用同步锁</li></ul><h2 id="1-5、锁的相关概念"><a href="#1-5、锁的相关概念" class="headerlink" title="1.5、锁的相关概念"></a>1.5、锁的相关概念</h2><h3 id="1、可重入性-Reentrancy"><a href="#1、可重入性-Reentrancy" class="headerlink" title="1、可重入性(Reentrancy)"></a>1、可重入性(Reentrancy)</h3><blockquote><p>​    可重入性(Reentrancy)描述这样一个问题：一个线程持有该锁的时候能否再次（多次）申请该锁</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/photo/raw/master/20210302203820.png" alt="image-20210302203817738"></p><blockquote><p>​        如果一个线程持有一个锁的时候还能成功申请该所，称该锁为可重入锁，否则称该锁为不可重入锁</p></blockquote><h3 id="2、锁的争用和调度"><a href="#2、锁的争用和调度" class="headerlink" title="2、锁的争用和调度"></a>2、锁的争用和调度</h3><blockquote><p>​        Java平台中<strong>内部锁（synchronized）</strong>属于<strong>非公平锁</strong>，显式 <code>Lock</code> 锁既支持公平锁，也支持非公平锁</p></blockquote><h3 id="3、锁的粒度"><a href="#3、锁的粒度" class="headerlink" title="3、锁的粒度"></a>3、锁的粒度</h3><blockquote><p>​        一个锁可以保护的共享数据的数量大小称为锁的粒度，锁的粒度是相对的。</p><p>​        锁保护的共享数据量大，称该锁的粒度粗，否则称锁的粒度细。</p><p>​        如果锁的粒度过粗，会导致线程在申请锁时进行不必要的等待。</p><p>​        如果锁的粒度过细，会增加锁调度的开销。</p></blockquote><h2 id="1-6、可见性、有序性和原子性"><a href="#1-6、可见性、有序性和原子性" class="headerlink" title="1.6、可见性、有序性和原子性"></a>1.6、可见性、有序性和原子性</h2><h3 id="1、原子性"><a href="#1、原子性" class="headerlink" title="1、原子性"></a>1、原子性</h3><blockquote><p><strong>原子性</strong> ：原子性是指<strong>一个操作是不可中断的，要么全部执行成功要么全部执行失败，有着“同生共死”的感觉</strong>。及时在多个线程一起执行的时候，一个操作一旦开始，就不会被其他线程所干扰。</p><p>判断以下指令是否满足原子性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><blockquote><p>满足，将10直接赋值给线程工作内存中的变量a</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a++;</span><br></pre></td></tr></table></figure><blockquote><p>不满足，语句a++实际上包括了三个操作：</p><ul><li>读取变量a的值</li><li>将读取出来的a值 + 1</li><li>将+1后的值赋给变量a</li></ul></blockquote><h3 id="2、有序性"><a href="#2、有序性" class="headerlink" title="2、有序性"></a>2、有序性</h3><blockquote><p><strong>有序性</strong> ： 编译器和处理器为了优化程序性能而对指令序列进行重排序，也就是你编写的代码顺序和最终执行的指令顺序是不一致的，重排序可能会导致多线程程序出现内存可见性问题</p></blockquote><h3 id="3、可见性"><a href="#3、可见性" class="headerlink" title="3、可见性"></a>3、可见性</h3><blockquote><p><strong>可见性</strong> ： 多个线程访问同一个共享变量时，其中一个线程对这个共享变量值的修改，其他线程能够立刻获得修改以后的值</p></blockquote><h1 id="二、Lock接口"><a href="#二、Lock接口" class="headerlink" title="二、Lock接口"></a>二、Lock接口</h1><h2 id="2-1、是什么？"><a href="#2-1、是什么？" class="headerlink" title="2.1、是什么？"></a>2.1、是什么？</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223115957.png" alt="img"></p><blockquote><p>锁实现提供了比使用同步方法和语句可以获得的更广泛的锁操作。它们允许更灵活的结构，可能具有非常不同的属性，并且可能支持多个关联的条件对象。</p></blockquote><h2 id="2-2、Lock接口实现–ReentrantLock可重入锁"><a href="#2-2、Lock接口实现–ReentrantLock可重入锁" class="headerlink" title="2.2、Lock接口实现–ReentrantLock可重入锁"></a>2.2、Lock接口实现–ReentrantLock可重入锁</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223120106.png" alt="img"></p><h3 id="1、如何使用？"><a href="#1、如何使用？" class="headerlink" title="1、如何使用？"></a>1、如何使用？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();  <span class="comment">// block until condition holds</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// ... method body</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、Lock和synchronized的区别"><a href="#2、Lock和synchronized的区别" class="headerlink" title="2、Lock和synchronized的区别"></a>2、Lock和synchronized的区别</h3><blockquote><p>二者区别</p></blockquote><ul><li>首先synchronized是Java内置关键字，在jvm层面，而Lock是Java中的一个接口</li><li>synchronized无法判断是否获取锁的状态，Lock可以判断是否获取到锁；</li><li>synchronized会自动释放锁(a 线程执行完同步代码会释放锁 ；b 线程执行过程中发生异常会释放锁)，Lock需在finally中手工释放锁（unlock()方法释放锁），否则容易造成线程死锁；</li><li>用synchronized关键字的两个线程1和线程2，如果当前线程1获得锁，线程2线程等待。如果线程1阻塞，线程2则会一直等待下去，而Lock锁就不一定会等待下去，如果尝试获取不到锁，线程可以不用一直等待就结束了；</li><li>synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可判断、可公平（两者皆可）</li><li>Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题。</li></ul><h1 id="三、线程间通信"><a href="#三、线程间通信" class="headerlink" title="三、线程间通信"></a>三、线程间通信</h1><blockquote><p>引入题目：现有两个线程，可以操作一个初始值为0的变量</p><p>实现一个线程令该变量 + 1，一个线程令该变量 - 1</p><p>实现交替.</p></blockquote><h2 id="3-1、入门案例"><a href="#3-1、入门案例" class="headerlink" title="3.1、入门案例"></a>3.1、入门案例</h2><h3 id="1、编写资源类"><a href="#1、编写资源类" class="headerlink" title="1、编写资源类"></a>1、编写资源类</h3><blockquote><p>资源类中包括变量和操控变量的方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//1 判断</span></span><br><span class="line">        <span class="keyword">if</span>(number != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2 如果number == 0，那么执行+1操作</span></span><br><span class="line">        number++;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + number);</span><br><span class="line">        <span class="comment">//3 唤醒</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sub</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//1 判断</span></span><br><span class="line">        <span class="keyword">if</span>(number == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2 如果number != 0，那么执行-1操作</span></span><br><span class="line">        number--;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + number);</span><br><span class="line">        <span class="comment">//3 唤醒</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、在main方法中创建线程进行测试"><a href="#2、在main方法中创建线程进行测试" class="headerlink" title="2、在main方法中创建线程进行测试"></a>2、在main方法中创建线程进行测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Counter counter = <span class="keyword">new</span> Counter();</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">10</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            counter.add();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException interruptedException) &#123;</span><br><span class="line">            interruptedException.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">10</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            counter.sub();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException interruptedException) &#123;</span><br><span class="line">            interruptedException.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;B&quot;</span>).start();</span><br></pre></td></tr></table></figure><h3 id="3、结果"><a href="#3、结果" class="headerlink" title="3、结果"></a>3、结果</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223153745.png" alt="image-20210223153744372"></p><h2 id="3-2、将线程数从两个增加到4个，两个加两个减"><a href="#3-2、将线程数从两个增加到4个，两个加两个减" class="headerlink" title="3.2、将线程数从两个增加到4个，两个加两个减"></a>3.2、将线程数从两个增加到4个，两个加两个减</h2><h3 id="1、增加线程数"><a href="#1、增加线程数" class="headerlink" title="1、增加线程数"></a>1、增加线程数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Counter counter = <span class="keyword">new</span> Counter();</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">10</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            counter.add();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException interruptedException) &#123;</span><br><span class="line">            interruptedException.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">10</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            counter.sub();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException interruptedException) &#123;</span><br><span class="line">            interruptedException.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">10</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            counter.add();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException interruptedException) &#123;</span><br><span class="line">            interruptedException.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;C&quot;</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">10</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            counter.sub();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException interruptedException) &#123;</span><br><span class="line">            interruptedException.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;D&quot;</span>).start();</span><br></pre></td></tr></table></figure><h3 id="2、测试查看结果"><a href="#2、测试查看结果" class="headerlink" title="2、测试查看结果"></a>2、测试查看结果</h3><blockquote><p>此时发现结果不符合预期</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223154436.png" alt="image-20210223154436682"></p><h3 id="3、出现以上问题的原因是多线程的虚假唤醒"><a href="#3、出现以上问题的原因是多线程的虚假唤醒" class="headerlink" title="3、出现以上问题的原因是多线程的虚假唤醒"></a>3、出现以上问题的原因是多线程的虚假唤醒</h3><blockquote><p>如何解决？</p><p>修改资源类，在add方法和sub方法中使用<strong>while</strong>代替<strong>if</strong> ，查看Java 8 Api文档</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223160402.png" alt="image-20210223160402330"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//1 判断</span></span><br><span class="line">        <span class="keyword">while</span>(number != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2 如果number == 0，那么执行+1操作</span></span><br><span class="line">        number++;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + number);</span><br><span class="line">        <span class="comment">//3 唤醒</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sub</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//1 判断</span></span><br><span class="line">        <span class="keyword">while</span>(number == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2 如果number != 0，那么执行-1操作</span></span><br><span class="line">        number--;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + number);</span><br><span class="line">        <span class="comment">//3 唤醒</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时重启测试，查看结果，发现问题已经解决。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223160525.png" alt="image-20210223160525017"></p><h3 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h3><ul><li>高内聚低耦合前提下，线程操作资源类</li><li>判断/工作/通知</li><li>多线程<strong>交互</strong>中，必须要防止多线程的<strong>虚假唤醒</strong>，即判断<strong>只用while</strong>而不用if</li><li>注意标志位的修改和定位</li></ul><h3 id="5、虚假唤醒出现原因"><a href="#5、虚假唤醒出现原因" class="headerlink" title="5、虚假唤醒出现原因"></a>5、虚假唤醒出现原因</h3><blockquote><p>现有4个线程，两个生产者，两个消费者</p><p>在第一个生产者生产完后，会调用notifyAll唤醒其余线程，此时被唤醒的线程可能是消费者，也可能是生产者，如果是另一个生产者唤醒，那么由于number已经不为0，所以进来的生产者会执行 this.wait() 。</p><p>由于wait方法会交出锁的持有权，所以此时第一个生产者、其他两个消费者会重新抢夺锁，如果此时抢到锁的是第一个生产者，那么由于number已经不为0，所以进来的第一个生产者也会执行this.wait() 。</p><p>此时由于wait方法，第一个生产者交出了手中的锁，此时两个消费者线程重新抢夺时间片，（<strong>注意此时资源类对象的number依然为1</strong>），在消费者线程将number–后会调用notify唤醒其他所有线程，此时由于两个生产者线程已经wait很久，所以会优先给这两个线程分配时间片，所以此时两个消费者线程都会执行number++，number从0变为2。</p><p>如果使用while代替if，那么在生产者被消费者唤醒后会进行一次判断，此时就不会出现两个生产者线程都让number+1的情况。</p></blockquote><h2 id="3-3、使用Lock代替synchronized"><a href="#3-3、使用Lock代替synchronized" class="headerlink" title="3.3、使用Lock代替synchronized"></a>3.3、使用Lock代替synchronized</h2><h3 id="1、关系图"><a href="#1、关系图" class="headerlink" title="1、关系图"></a>1、关系图</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223165518.png" alt="img"></p><blockquote><p>使用await代替wait</p><p>使用signal代替notify</p><p>使用signalAll代替notifyAll</p></blockquote><h3 id="2、修改资源类"><a href="#2、修改资源类" class="headerlink" title="2、修改资源类"></a>2、修改资源类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockCounter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(number != <span class="number">0</span>) &#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(number == <span class="number">0</span>) &#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、运行，查看结果"><a href="#3、运行，查看结果" class="headerlink" title="3、运行，查看结果"></a>3、运行，查看结果</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223173218.png" alt="image-20210223173217788"></p><h2 id="3-4、使用Lock的原因"><a href="#3-4、使用Lock的原因" class="headerlink" title="3.4、使用Lock的原因"></a>3.4、使用Lock的原因</h2><h3 id="1、引入新问题"><a href="#1、引入新问题" class="headerlink" title="1、引入新问题"></a>1、引入新问题</h3><blockquote><p>多线程之间实现顺序调用，即A-&gt;B-&gt;C</p><p>A打印5次，B打印10次，C打印15次</p><p>接着</p><p>A打印5次，B打印10次，C打印15次</p><p>重复十轮</p><p>打印顺序要求如下A-&gt;B-&gt;C-&gt;A</p><p>使用一个标志位，如果标志位为1，那么A输出，为2则B输出，为3则C输出</p></blockquote><h3 id="2、编写资源类"><a href="#2、编写资源类" class="headerlink" title="2、编写资源类"></a>2、编写资源类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShareResource</span> </span>&#123;</span><br><span class="line">    <span class="comment">//标志位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="comment">//给lock配三把钥匙，A-condition1，B-condition2，C-condition3</span></span><br><span class="line">    <span class="keyword">private</span> Condition condition1 = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Condition condition2 = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Condition condition3 = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//判断</span></span><br><span class="line">            <span class="keyword">while</span>(number != <span class="number">1</span>) &#123;</span><br><span class="line">                condition1.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//干活</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;A&quot;</span> + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//修改标志位，设置为2，只唤醒B</span></span><br><span class="line">            number = <span class="number">2</span>;</span><br><span class="line">            condition2.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//判断</span></span><br><span class="line">            <span class="keyword">while</span>(number != <span class="number">2</span>) &#123;</span><br><span class="line">                condition2.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//干活</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;B&quot;</span> + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//修改标志位，设置为3，只唤醒C</span></span><br><span class="line">            number = <span class="number">3</span>;</span><br><span class="line">            condition3.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print15</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//判断</span></span><br><span class="line">            <span class="keyword">while</span>(number != <span class="number">3</span>) &#123;</span><br><span class="line">                condition3.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//干活</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;C&quot;</span> + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//修改标志位，设置为1，只唤醒A</span></span><br><span class="line">            number = <span class="number">1</span>;</span><br><span class="line">            condition1.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、创建线程进行调用"><a href="#3、创建线程进行调用" class="headerlink" title="3、创建线程进行调用"></a>3、创建线程进行调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ShareResource resource = <span class="keyword">new</span> ShareResource();</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        resource.print5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        resource.print10();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        resource.print15();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;C&quot;</span>).start();</span><br></pre></td></tr></table></figure><h3 id="4、查看结果"><a href="#4、查看结果" class="headerlink" title="4、查看结果"></a>4、查看结果</h3><blockquote><p>测试成功</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223183944.png" alt="image-20210223183943895"></p><h3 id="5、结论"><a href="#5、结论" class="headerlink" title="5、结论"></a>5、结论</h3><blockquote><p>Lock配合Condition使用可以达到精确唤醒的效果</p></blockquote><h2 id="3-5、面试题解答"><a href="#3-5、面试题解答" class="headerlink" title="3.5、面试题解答"></a>3.5、面试题解答</h2><blockquote><p>两个线程，一个线程打印1-52，另一个打印字母A-Z打印顺序为12A34B…5152Z</p><p>要求用线程间通信</p></blockquote><h3 id="1、编写一个资源类"><a href="#1、编写一个资源类" class="headerlink" title="1、编写一个资源类"></a>1、编写一个资源类</h3><blockquote><p>由于打印的顺序为两个数字一个字母，那么判断条件就是：当number为3的倍数时，打印字母，其余时间打印数字。</p><p>多线程问题一般的解决套路</p><ul><li>资源类</li><li>判断/工作/唤醒</li><li>注意标志位的修改和定位</li><li>防止虚假唤醒</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition engCondition = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition numCondition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printEng</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> i = <span class="string">&#x27;A&#x27;</span>; i &lt;= <span class="string">&#x27;Z&#x27;</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">while</span>(number % <span class="number">3</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                    engCondition.await();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//工作</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;&quot;</span> + i);</span><br><span class="line">                <span class="comment">//修改标志位</span></span><br><span class="line">                number++;</span><br><span class="line">                numCondition.signal();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">54</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">while</span>(number % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    numCondition.await();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//工作</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;&quot;</span> + i);</span><br><span class="line">                <span class="comment">//修改标志位</span></span><br><span class="line">                number++;</span><br><span class="line">                engCondition.signal();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、创建两个线程，调用资源类中的方法"><a href="#2、创建两个线程，调用资源类中的方法" class="headerlink" title="2、创建两个线程，调用资源类中的方法"></a>2、创建两个线程，调用资源类中的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Printer printer = <span class="keyword">new</span> Printer();</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; printer.printEng(),<span class="string">&quot;打印字母的线程&quot;</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; printer.printNum(),<span class="string">&quot;打印数字的线程&quot;</span>).start();</span><br></pre></td></tr></table></figure><h3 id="3、运行，查看结果-1"><a href="#3、运行，查看结果-1" class="headerlink" title="3、运行，查看结果"></a>3、运行，查看结果</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223231529.png" alt="image-20210223231436737"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223231547.png" alt="image-20210223231547521"></p><h2 id="3-6、多线程8锁"><a href="#3-6、多线程8锁" class="headerlink" title="3.6、多线程8锁"></a>3.6、多线程8锁</h2><h3 id="1、8锁现象"><a href="#1、8锁现象" class="headerlink" title="1、8锁现象"></a>1、8锁现象</h3><blockquote><p>创建一个资源类Phone</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;---------sendEmail&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSMS</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;---------sendSMS&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>标准访问</li></ul><blockquote><p>在main方法中编写以下代码，查看输出结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.sendEmail();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.sendSMS();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;B&quot;</span>).start();</span><br></pre></td></tr></table></figure><blockquote><p>此时启动程序，sendSMS和sendEmail方法执行的前后顺序无法确定。</p><p>AB两个线程访问同一个资源类对象，此时由于锁的是一个资源类对象，所以两个线程谁先拿到CPU执行权，谁就先执行。</p></blockquote><ul><li>在两个线程的启动中添加Thread.sleep()方法，此时main函数中代码为</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.sendEmail();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.sendSMS();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;B&quot;</span>).start();</span><br></pre></td></tr></table></figure><blockquote><p>此时启动程序，先调用sendEmail方法，这是因为AB线程的start方法间有sleep方法，导致A先抢到了锁</p></blockquote><ul><li>在邮件方法中使用sleep暂停4秒钟，且两个线程中间任何休眠两秒</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">   System.out.println(<span class="string">&quot;---------sendEmail&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.sendEmail();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.sendSMS();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;B&quot;</span>).start();</span><br></pre></td></tr></table></figure><blockquote><p>此时启动程序，发现还是先调用sendEmail方法，这是因为Thread.sleep()方法不会释放对象锁，所以A抢到锁后先抱着锁睡了4秒，然后执行sendEmail方法。</p></blockquote><ul><li>在资源类中新增一个普通方法hello</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;---------Hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>修改main方法中的代码，令B线程调用hello方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.sendEmail();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.hello();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;B&quot;</span>).start();</span><br></pre></td></tr></table></figure><blockquote><p>此时启动程序，先执行hello()方法，再执行sendEmail方法</p></blockquote><ul><li>引入另一个资源类对象，并令线程B调用另外一个对象的sendSMS方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">Phone phone1 = <span class="keyword">new</span> Phone();</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.sendEmail();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        phone1.sendSMS();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;B&quot;</span>).start();</span><br></pre></td></tr></table></figure><blockquote><p>启动代码，发现先调用sendSms方法，这是由于锁的不是同一个对象。</p></blockquote><ul><li>两个静态同步方法，同一个静态资源类对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;---------sendEmail&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSMS</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;---------sendSMS&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;---------Hello&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>main方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Phone.sendEmail();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Phone.sendSMS();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;B&quot;</span>).start();</span><br></pre></td></tr></table></figure><blockquote><p>由于synchronized修饰的是静态方法，则等同于synchronized(this.getClass)，两个方法锁的是同一个类对象，所以还是sendEmail方法先被调用</p></blockquote><ul><li>两个静态同步方法，两个资源类对象</li></ul><blockquote><p>由于静态同步方法锁的是资源类，所以结果同上</p></blockquote><ul><li>一个普通同步方法，一个静态同步方法，一个资源类对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;---------sendEmail&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSMS</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;---------sendSMS&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;---------Hello&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>main方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Phone.sendEmail();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.sendSMS();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;B&quot;</span>).start();</span><br></pre></td></tr></table></figure><blockquote><p>此时先调用sendSMS方法，然后调用sendEmail方法，这是因为锁的对象不是同一个，所以先调用没有sleep的sendSMS方法</p></blockquote><ul><li>一个普通同步方法，一个静态同步方法，两个资源类对象</li></ul><blockquote><p>同上</p></blockquote><h3 id="2、8锁的解释"><a href="#2、8锁的解释" class="headerlink" title="2、8锁的解释"></a>2、8锁的解释</h3><ul><li>总结一</li></ul><blockquote><p><strong>一个对象里面如果有多个synchronized方法，某一时刻内，只要一个线程去调用其中的一个synchronized方法了，那么其他的线程只能等待，换句话说，某一个时刻内，只能有唯一一个线程去访问这些synchronized方法，锁的是当前对象this，被锁定后，其他的线程都不能进行到当前对象的其他synchronized方法。</strong></p></blockquote><ul><li>总结二</li></ul><blockquote><p>如果添加一个普通方法，那么与同步锁无关。</p></blockquote><ul><li>总结三</li></ul><blockquote><p>如果操控两个资源类对象，那么锁的就不是同一个对象了。</p><p>可以把操作两个资源类对象的情况想象成线程A在用自己的苹果手机发短信，而线程B在用自己的手机发邮件，此时两线程操作两台手机，不用争抢，井水不犯河水。</p></blockquote><ul><li>总结四</li></ul><blockquote><p>如果使用synchronized修饰静态方法，那么此时锁的对象是<strong>资源类对象的Class</strong>，也即<strong>synchronized(this.getClass)</strong></p><p>和资源类对象的个数没关系</p></blockquote><h3 id="3、synchronized总结"><a href="#3、synchronized总结" class="headerlink" title="3、synchronized总结"></a>3、synchronized总结</h3><blockquote><p>synchronized实现同步的基础：Java中的每一个对象都可以作为锁。</p><p>具体表现为以下3种形式。</p></blockquote><ul><li><p>对于普通同步方法，锁是当前实例对象。</p></li><li><p>对于静态同步方法，锁是<strong>当前类的Class对象。</strong></p></li><li><p>对于同步方法块，锁是Synchonized括号里配置的对象</p></li></ul><blockquote><p>当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁。</p><p>也就是说如果一个实例对象的<strong>非静态同步方法</strong>获取锁后，该实例对象的其他<strong>非静态同步方法</strong>必须等待获取锁的方法释放锁后才能获取锁，</p><p>可是别的实例对象的非静态同步方法因为跟该实例对象的非静态同步方法用的是不同的锁，所以毋须等待该实例对象已获取锁的非静态同步方法释放锁就可以获取他们自己的锁。</p><p><strong>所有的静态同步方法用的也是同一把锁——类对象本身</strong>，这两把锁是两个不同的对象，所以静态同步方法与非静态同步方法之间是不会有竞态条件的。</p><p>但是一旦一个静态同步方法获取锁后，其他的静态同步方法都必须等待该方法释放锁后才能获取锁，而不管是同一个实例对象的静态同步方法之间，还是不同的实例对象的静态同步方法之间，只要它们同一个类的实例对象！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础（一）-Lambda表达式学习</title>
      <link href="posts/3754089101.html"/>
      <url>posts/3754089101.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1、lambda表达式简介"><a href="#1、lambda表达式简介" class="headerlink" title="1、lambda表达式简介"></a>1、lambda表达式简介</h2><blockquote><p>Lambda表达式是Java 8 添加的一个新的特性，简单来说，Lambda据视一个匿名函数</p></blockquote><h2 id="2、为什么使用Lambda？"><a href="#2、为什么使用Lambda？" class="headerlink" title="2、为什么使用Lambda？"></a>2、为什么使用Lambda？</h2><blockquote><p>使用Lambda表达式可以对接口进行一个非常简洁的实现。</p><p>举一个例子，编写一个compare接口，这个接口接受两个参数，并比较传入参数的大小。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Compare</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于上面的这个接口，我们有多种方式实现接口中的compare方法</p></blockquote><h3 id="2-1、编写一个compare接口的实现类"><a href="#2-1、编写一个compare接口的实现类" class="headerlink" title="2.1、编写一个compare接口的实现类"></a>2.1、编写一个compare接口的实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCompare</span> <span class="keyword">implements</span> <span class="title">Compare</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2、使用匿名内部类"><a href="#2-2、使用匿名内部类" class="headerlink" title="2.2、使用匿名内部类"></a>2.2、使用匿名内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Compare compare = <span class="keyword">new</span> Compare() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-3、使用Lambda表达式"><a href="#2-3、使用Lambda表达式" class="headerlink" title="2.3、使用Lambda表达式"></a>2.3、使用Lambda表达式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用Lambda表达式</span></span><br><span class="line">Compare lambdaCompare = (a,b) -&gt; a - b;</span><br></pre></td></tr></table></figure><blockquote><p>以上三种实现方式完全相同。</p></blockquote><h2 id="3、Lambda对接口的要求"><a href="#3、Lambda对接口的要求" class="headerlink" title="3、Lambda对接口的要求"></a>3、Lambda对接口的要求</h2><blockquote><p>虽然我们可以使用Lambda表达式对 <strong>某些</strong> 接口进行简单实现，但是并不是所有接口都可以使用Lambda表达式来实现。</p><p>Lambda对接口要求为：接口中定义的必须要实现的方法只能是一个。</p></blockquote><p><strong>@FunctionalInterface</strong></p><blockquote><p>这个注解用于修饰函数式接口，即只有一个抽象方法的接口。</p></blockquote><h2 id="4、Lambda基础语法"><a href="#4、Lambda基础语法" class="headerlink" title="4、Lambda基础语法"></a>4、Lambda基础语法</h2><h3 id="4-1、前期准备"><a href="#4-1、前期准备" class="headerlink" title="4.1、前期准备"></a>4.1、前期准备</h3><blockquote><p>创建一系列接口，以便后面的学习</p></blockquote><ul><li>编写一个无参数无返回值的函数式接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LambdaWithourReturnAndParam</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写一个只有一个参数且不带返回值的函数式接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LambdaNoneReturnSingleParam</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写一个有多个参数没有返回值的接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LambdaNoneReturnMultiParam</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写一个没有参数有返回值的接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LambdaSingleReturnNoneParam</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写一个带单个参数，含返回值的接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LambdaSingleReturnSingleParam</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写一个带多个参数，含返回值的接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LambdaSingleReturnMultiParam</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面的接口均用@FunctionalInterface注解进行修饰</p><p>下面使用Lambda表达式对上面接口进行一一实现</p></blockquote><h3 id="4-2、基础语法"><a href="#4-2、基础语法" class="headerlink" title="4.2、基础语法"></a>4.2、基础语法</h3><blockquote><p>Lambda是一个匿名函数，我们需要关注的点有 <strong>返回值类型</strong> 、 <strong>参数列表</strong> 和 <strong>方法体</strong></p><p>在Lambda表达式中，返回值类型我们可以不用显式的写出来。</p></blockquote><ul><li>() ： 用于描述参数列表</li><li>{} ： 用于描述方法体</li><li>-&gt; ： 用于分隔参数列表和方法体，是Lambda表达式的运算符，读作<strong>goes to</strong></li></ul><h3 id="4-3、使用Lambda表达式实现无参无返回接口"><a href="#4-3、使用Lambda表达式实现无参无返回接口" class="headerlink" title="4.3、使用Lambda表达式实现无参无返回接口"></a>4.3、使用Lambda表达式实现无参无返回接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LambdaWithourReturnAndParam lambda1 = () -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;芜湖起飞&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">lambda1.test();</span><br></pre></td></tr></table></figure><blockquote><p>运行，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222234526.png" alt="image-20210222234526505"></p><blockquote><p>注意：<strong>当 {} 中定义的方法体只有一行代码</strong>时，{} 可以被<strong>省略。</strong></p><p>即上面的代码可以简化为</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LambdaWithourReturnAndParam lambda1 = () -&gt; System.out.println(<span class="string">&quot;芜湖起飞&quot;</span>);</span><br><span class="line">lambda1.test();</span><br></pre></td></tr></table></figure><h3 id="4-4、使用Lambda表达式实现单个参数无返回值接口"><a href="#4-4、使用Lambda表达式实现单个参数无返回值接口" class="headerlink" title="4.4、使用Lambda表达式实现单个参数无返回值接口"></a>4.4、使用Lambda表达式实现单个参数无返回值接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LambdaNoneReturnSingleParam lambda2 = (a) -&gt; System.out.println(<span class="string">&quot;传入的参数为：&quot;</span> + a);</span><br><span class="line">lambda2.test(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222234844.png" alt="image-20210222234844579"></p><h3 id="4-5、使用Lambda表达式实现多个参数无返回值接口"><a href="#4-5、使用Lambda表达式实现多个参数无返回值接口" class="headerlink" title="4.5、使用Lambda表达式实现多个参数无返回值接口"></a>4.5、使用Lambda表达式实现多个参数无返回值接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LambdaNoneReturnMultiParam lambda = (a, b) -&gt; System.out.println(<span class="string">&quot;传入的参数a为：&quot;</span> + a + <span class="string">&quot;，b为：&quot;</span> + b + <span class="string">&quot;和为：&quot;</span> + (a + b));</span><br><span class="line">lambda.test(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222235042.png" alt="image-20210222235042067"></p><h3 id="4-6、使用Lambda表达式实现无参有返回接口"><a href="#4-6、使用Lambda表达式实现无参有返回接口" class="headerlink" title="4.6、使用Lambda表达式实现无参有返回接口"></a>4.6、使用Lambda表达式实现无参有返回接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LambdaSingleReturnNoneParam lambda = () -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;这是无参带返回值接口的实现&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(lambda.test());</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222235340.png" alt="image-20210222235340354"></p><h3 id="4-7、使用Lambda表达式实现单参有返回接口"><a href="#4-7、使用Lambda表达式实现单参有返回接口" class="headerlink" title="4.7、使用Lambda表达式实现单参有返回接口"></a>4.7、使用Lambda表达式实现单参有返回接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LambdaSingleReturnSingleParam lambda = (a) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;这是单参带返回值接口的实现，传入的参数为：&quot;</span> + a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;得到的返回值为：&quot;</span> + lambda.test(<span class="number">3</span>));</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222235512.png" alt="image-20210222235512243"></p><h3 id="4-8、使用Lambda表达式实现多参有返回接口"><a href="#4-8、使用Lambda表达式实现多参有返回接口" class="headerlink" title="4.8、使用Lambda表达式实现多参有返回接口"></a>4.8、使用Lambda表达式实现多参有返回接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LambdaSingleReturnMultiParam lambda = (a,b) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;这是多参带返回值接口的实现，传入的参数和为：&quot;</span> + (a + b));</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;得到的返回值为：&quot;</span> + lambda.test(<span class="number">3</span>,<span class="number">5</span>));</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223000257.png" alt="image-20210223000257626"></p><h2 id="5、Lambda语法精简"><a href="#5、Lambda语法精简" class="headerlink" title="5、Lambda语法精简"></a>5、Lambda语法精简</h2><h3 id="5-1、参数精简"><a href="#5-1、参数精简" class="headerlink" title="5.1、参数精简"></a>5.1、参数精简</h3><blockquote><p>由于在接口的抽象方法中，已经定义了参数的数量和类型，所以在Lambda表达式中，参数类型可以省略。</p><p>即 Lambda lambda = (String a,String b) -&gt; return (a + b);</p><p>可以简写为Lambda lambda = (a,b) -&gt; return (a + b);</p></blockquote><ul><li>注意：如果要省略参数类型，那么每一个参数的类型都必须省略。</li></ul><h3 id="5-2、小括号精简"><a href="#5-2、小括号精简" class="headerlink" title="5.2、小括号精简"></a>5.2、小括号精简</h3><blockquote><p>如果在参数列表中只有一个参数，那么小括号也可以省略不写</p><p>即 Lambda lambda = (a) -&gt; System.out.println(a);</p><p>可以简写为： Lambda lambda = a -&gt; System.out.println(a);</p></blockquote><h3 id="5-3、大括号精简"><a href="#5-3、大括号精简" class="headerlink" title="5.3、大括号精简"></a>5.3、大括号精简</h3><blockquote><p>如果方法体中只有一句代码，那么大括号可以省略不写</p><p>即 Lambda lambda = (a) -&gt; {</p><p>​    System.out.println(a);</p><p>};</p><p>可以简写为： Lambda lambda = a -&gt; System.out.println(a);</p></blockquote><ul><li><p>注意：如果方法体中唯一的一条语句是一条返回语句，那么在省略大括号的同时，还需要省略return</p></li><li><p>例如</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LambdaSingleReturnMultiParam lambda = (a,b) -&gt; a + b;</span><br><span class="line">System.out.println(<span class="string">&quot;得到的返回值为：&quot;</span> + lambda.test(<span class="number">3</span>,<span class="number">5</span>));</span><br></pre></td></tr></table></figure><ul><li>结果为</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223002012.png" alt="image-20210223002012212"></p><h2 id="6、Lambda语法进阶"><a href="#6、Lambda语法进阶" class="headerlink" title="6、Lambda语法进阶"></a>6、Lambda语法进阶</h2><h3 id="6-1、方法引用"><a href="#6-1、方法引用" class="headerlink" title="6.1、方法引用"></a>6.1、方法引用</h3><blockquote><p><strong>可以快速地将一个lambda表达式的实现指向一个已经实现的方法。</strong></p><p>语法：方法的隶属者::方法名</p><p>例如：传入一个参数，要求返回传入参数的2倍</p></blockquote><ul><li>原来的写法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LambdaSingleReturnSingleParam lambda = a -&gt; a * <span class="number">2</span>;</span><br><span class="line">System.out.println(lambda.test(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><blockquote><p>使用方法引用之后的写法</p></blockquote><ul><li>定义一个静态方法，这个方法的方法体可以有多行代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;芜湖起飞&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> a * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在lambda表达式的方法体中引用上面写的静态方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法引用</span></span><br><span class="line">LambdaSingleReturnSingleParam lambda = a -&gt; change(<span class="number">2</span>);</span><br><span class="line">System.out.println(lambda.test(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223002908.png" alt="image-20210223002908069"></p><h3 id="6-2、使用-方法隶属者-方法名-的方式实现方法引用"><a href="#6-2、使用-方法隶属者-方法名-的方式实现方法引用" class="headerlink" title="6.2、使用 方法隶属者::方法名 的方式实现方法引用"></a>6.2、使用 方法隶属者::方法名 的方式实现方法引用</h3><blockquote><p>方法隶属者：如果一个方法是静态方法，那么其隶属者就是类，如果不是静态方法， 那么隶属者就是对象。</p><p>根据方法引用的语法，上面的方法引用可以改写为</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法引用</span></span><br><span class="line">LambdaSingleReturnSingleParam lambda = Syntax2::change;</span><br><span class="line">System.out.println(lambda.test(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><blockquote><p>注意点：</p></blockquote><ul><li>被引用的方法的参数数量和类型一定要和接口中定义的抽象方法一致。</li><li>返回值的类型也一定要和接口中定义的一致。</li></ul><h3 id="6-3、构造方法引用"><a href="#6-3、构造方法引用" class="headerlink" title="6.3、构造方法引用"></a>6.3、构造方法引用</h3><ul><li>新建一个类Person</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person类的无参构造函数执行了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person类的有参构造函数执行了...&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建类Syntax3，在里面创建一个接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonCreater</span> </span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">getPerson</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>构造方法引用的应用场景：在某些情况下，我们返回了某个类的对象</p><p>使用关键字 <strong>new</strong> 来代表构造函数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PersonCreater creater2 = Person::<span class="keyword">new</span>;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PersonCreater creater2 = Person::<span class="keyword">new</span>;</span><br><span class="line">creater2.getPerson();</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223004633.png" alt="image-20210223004633194"></p><blockquote><p>注意：<strong>构造函数的参数由接口中的参数来自定义</strong>，如果接口中的抽象方法是一个有参的抽象方法，那么就可以使用有参构造函数，否则只能使用无参构造函数</p></blockquote><ul><li>创建一个PersonCreater2接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonCreater2</span> </span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">getPerson</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>引用有参构造函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PersonCreater2 creater2 = Person::<span class="keyword">new</span>;</span><br><span class="line">Person person = creater2.getPerson(<span class="string">&quot;芜湖&quot;</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223005323.png" alt="image-20210223005323172"></p><blockquote><p>结论：**不管引用的是有参构造函数还是无参构造函数，在引用的过程中一律使用 方法隶属名::方法名 ** ，有参构造方法的参数在调用接口抽象方法时传递</p></blockquote><h2 id="7、Lambda综合案例"><a href="#7、Lambda综合案例" class="headerlink" title="7、Lambda综合案例"></a>7、Lambda综合案例</h2><h3 id="7-1、集合排序"><a href="#7-1、集合排序" class="headerlink" title="7.1、集合排序"></a>7.1、集合排序</h3><blockquote><p>已知在一个ArrayList中，有若干个Person对象，将这些Person对象按照<strong>年龄</strong>进行<strong>降序排序</strong>。</p><p>我们需要使用到ArrayList对象中的sort函数，这个函数需要我们传入一个Comparator实现类对象，Comparator是一个函数式接口。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223010154.png" alt="image-20210223010154107"></p><blockquote><p>Comparator 中的 compare方法</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223010612.png" alt="image-20210223010612662"></p><blockquote><p>集合排序的代码如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Person&gt; persons = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">persons.add(<span class="keyword">new</span> Person(<span class="string">&quot;A&quot;</span>,<span class="number">10</span>));</span><br><span class="line">persons.add(<span class="keyword">new</span> Person(<span class="string">&quot;B&quot;</span>,<span class="number">999</span>));</span><br><span class="line">persons.add(<span class="keyword">new</span> Person(<span class="string">&quot;C&quot;</span>,<span class="number">7</span>));</span><br><span class="line">persons.add(<span class="keyword">new</span> Person(<span class="string">&quot;D&quot;</span>,<span class="number">6</span>));</span><br><span class="line">persons.add(<span class="keyword">new</span> Person(<span class="string">&quot;E&quot;</span>,<span class="number">14</span>));</span><br><span class="line">persons.add(<span class="keyword">new</span> Person(<span class="string">&quot;F&quot;</span>,<span class="number">18</span>));</span><br><span class="line"><span class="comment">//降序要求</span></span><br><span class="line">persons.sort((p1,p2) -&gt; p2.age - p1.age);</span><br><span class="line">persons.stream().forEach(person -&gt; System.out.println(person));</span><br></pre></td></tr></table></figure><blockquote><p>为Person添加一个toString方法，测试并查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223011055.png" alt="image-20210223011055014"></p><h3 id="7-2、TreeSet"><a href="#7-2、TreeSet" class="headerlink" title="7.2、TreeSet"></a>7.2、TreeSet</h3><blockquote><p>创建一个TreeSet对象，往对象中添加元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TreeSet set = <span class="keyword">new</span> TreeSet();</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="string">&quot;A&quot;</span>,<span class="number">10</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="string">&quot;B&quot;</span>,<span class="number">999</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="string">&quot;C&quot;</span>,<span class="number">7</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="string">&quot;D&quot;</span>,<span class="number">6</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="string">&quot;E&quot;</span>,<span class="number">14</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="string">&quot;F&quot;</span>,<span class="number">18</span>));</span><br><span class="line">System.out.println(set);</span><br></pre></td></tr></table></figure><ul><li>运行查看结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223011530.png" alt="image-20210223011530846"></p><blockquote><p>这是因为TreeSet对象存储的值是有序的，而对于我们传入的泛型Person，TreeSet不知道如何使其有序，所以抛出了一个类型转换异常。</p><p>如何解决这个问题？解决方法有二：</p></blockquote><ul><li><p>让Person类实现 Comparator 接口，并实现compare方法</p></li><li><p>在构造TreeSet对象时，传入一个Comparator实现对象</p></li><li><p>TreeSet构造方法如下</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223011855.png" alt="image-20210223011854725"></p><blockquote><p>在构造TreeSet时传入一个Comparator实现对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TreeSet&lt;Person&gt; set = <span class="keyword">new</span> TreeSet&lt;Person&gt;((p1,p2) -&gt; p2.age - p1.age);</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="string">&quot;A&quot;</span>,<span class="number">10</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="string">&quot;B&quot;</span>,<span class="number">999</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="string">&quot;C&quot;</span>,<span class="number">7</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="string">&quot;D&quot;</span>,<span class="number">6</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="string">&quot;E&quot;</span>,<span class="number">14</span>));</span><br><span class="line">set.add(<span class="keyword">new</span> Person(<span class="string">&quot;F&quot;</span>,<span class="number">18</span>));</span><br><span class="line">set.stream().forEach(person -&gt; System.out.println(person));</span><br></pre></td></tr></table></figure><ul><li>查看测试结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223012117.png" alt="image-20210223012117318"></p><h3 id="7-3、集合遍历"><a href="#7-3、集合遍历" class="headerlink" title="7.3、集合遍历"></a>7.3、集合遍历</h3><blockquote><p>使用 <strong>集合对象.foreach</strong> 方法遍历集合，这个对象需要传入一个Comsumer接口实现</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223012712.png" alt="image-20210223012712632"></p><blockquote><p>而Comsumer又是一个函数式接口，accept方法的逻辑是将集合中的每一个对象都导入到方法accept中。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223012744.png" alt="image-20210223012744761"></p><blockquote><p>遍历集合，输出集合中的每一个元素</p><p>list.foreach(System.out::println);</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Collections.addAll(list,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">999</span>,<span class="number">4396</span>,<span class="number">7777</span>,<span class="number">2800</span>,<span class="number">999</span>,<span class="number">888</span>);</span><br><span class="line"><span class="comment">//遍历集合</span></span><br><span class="line">list.forEach(System.out::println);</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223012951.png" alt="image-20210223012951109"></p><blockquote><p>我们也可以在遍历元素的过程中添加一些自己的逻辑代码，例如：遍历集合并输出其中的偶数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Collections.addAll(list,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">999</span>,<span class="number">4396</span>,<span class="number">7777</span>,<span class="number">2800</span>,<span class="number">999</span>,<span class="number">888</span>);</span><br><span class="line"><span class="comment">//遍历集合</span></span><br><span class="line">list.forEach(ele -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(ele % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(ele);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210223013135.png" alt="image-20210223013135333"></p><blockquote><p>结论：在使用lambda表达式进行foreach循环的过程中，-&gt; 符号前的变量就是每次循环时的元素，而 {} 就是执行的方法体，当方法体只有一行代码时，{}可以省略。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Cloud学习（六）-Sentinel</title>
      <link href="posts/2120398077.html"/>
      <url>posts/2120398077.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、Sentinel"><a href="#一、Sentinel" class="headerlink" title="一、Sentinel"></a>一、Sentinel</h1><blockquote><p>分布式系统的流量防卫兵，类似之前学的Hystrix</p></blockquote><h2 id="1-1、是什么？"><a href="#1-1、是什么？" class="headerlink" title="1.1、是什么？"></a>1.1、是什么？</h2><blockquote><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p></blockquote><h2 id="1-2、特征"><a href="#1-2、特征" class="headerlink" title="1.2、特征"></a>1.2、特征</h2><p>Sentinel 具有以下特征:</p><ul><li><strong>丰富的应用场景</strong>：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</li><li><strong>完备的实时监控</strong>：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li><li><strong>广泛的开源生态</strong>：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</li><li><strong>完善的 SPI 扩展点</strong>：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</li></ul><p>Sentinel 的主要特性：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221121616.png" alt="image-20210221121615924"></p><h2 id="1-3、组成部分"><a href="#1-3、组成部分" class="headerlink" title="1.3、组成部分"></a>1.3、组成部分</h2><ul><li>核心库（Java 客户端）不依赖任何框架/库，能够运行于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。</li><li>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</li></ul><h2 id="1-4、与Hystrix的对比"><a href="#1-4、与Hystrix的对比" class="headerlink" title="1.4、与Hystrix的对比"></a>1.4、与Hystrix的对比</h2><h3 id="1、Hystrix"><a href="#1、Hystrix" class="headerlink" title="1、Hystrix"></a>1、Hystrix</h3><ul><li>需要程序员自己手工搭建监控平台</li><li>没有一套web界面可以给我们进行更细粒度化的配置</li></ul><h3 id="2、Sentinel"><a href="#2、Sentinel" class="headerlink" title="2、Sentinel"></a>2、Sentinel</h3><ul><li>单独一个组件，可以独立出来</li><li>直接界面化的细粒度统一配置</li></ul><h1 id="二、安装使用"><a href="#二、安装使用" class="headerlink" title="二、安装使用"></a>二、安装使用</h1><h2 id="2-1、下载sentinel"><a href="#2-1、下载sentinel" class="headerlink" title="2.1、下载sentinel"></a>2.1、下载sentinel</h2><blockquote><p>到 <a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a> 下载sentinel到本地</p></blockquote><h2 id="2-2、运行"><a href="#2-2、运行" class="headerlink" title="2.2、运行"></a>2.2、运行</h2><h3 id="1、前提"><a href="#1、前提" class="headerlink" title="1、前提"></a>1、前提</h3><ul><li>JDK8环境安装配置完成</li><li>8080端口不能被占用</li></ul><h3 id="2、运行命令"><a href="#2、运行命令" class="headerlink" title="2、运行命令"></a>2、运行命令</h3><blockquote><p>在sentinel jar包目录下打开cmd窗口，输入</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar sentinel-dashboard-1.7.0.jar </span><br></pre></td></tr></table></figure><h3 id="3、访问管理页面"><a href="#3、访问管理页面" class="headerlink" title="3、访问管理页面"></a>3、访问管理页面</h3><blockquote><p>访问<a href="http://localhost:8080，账号密码均为sentinel">http://localhost:8080，账号密码均为sentinel</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221140253.png" alt="image-20210221140252835"></p><h1 id="三、初始化演示工程"><a href="#三、初始化演示工程" class="headerlink" title="三、初始化演示工程"></a>三、初始化演示工程</h1><blockquote><p>启动Nacos 8848</p></blockquote><h2 id="3-1、创建Sentinel微服务模块"><a href="#3-1、创建Sentinel微服务模块" class="headerlink" title="3.1、创建Sentinel微服务模块"></a>3.1、创建Sentinel微服务模块</h2><h3 id="1、建module"><a href="#1、建module" class="headerlink" title="1、建module"></a>1、建module</h3><blockquote><p>新建cloudalibaba-sentinel-service8401</p></blockquote><h3 id="2、POM"><a href="#2、POM" class="headerlink" title="2、POM"></a>2、POM</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cloudstudy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、YML"><a href="#3、YML" class="headerlink" title="3、YML"></a>3、YML</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># nacos注册中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment"># 配置sentinel dashboard地址</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">        <span class="comment"># 默认8719端口，如果被占用会自动从8719开始依次+1扫描</span></span><br><span class="line">        <span class="comment"># 直到找到未被占用的端口</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">        </span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4、主启动类"><a href="#4、主启动类" class="headerlink" title="4、主启动类"></a>4、主启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp8401</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApp8401.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、业务类"><a href="#5、业务类" class="headerlink" title="5、业务类"></a>5、业务类</h3><blockquote><p>业务类FlowLimitController</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLimitController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testA&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;------testA&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testB&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;------testB&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、启动sentinel和8401微服务"><a href="#2、启动sentinel和8401微服务" class="headerlink" title="2、启动sentinel和8401微服务"></a>2、启动sentinel和8401微服务</h2><blockquote><p>发现sentinel控制台中空空如也</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221143519.png" alt="image-20210221143518461"></p><blockquote><p>这是由于sentinel内部采用了懒加载，需要我们访问一次8401微服务，这个微服务才会展现在sentinel控制台上，访问 <a href="http://localhost:8401/testA">http://localhost:8401/testA</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221143651.png" alt="image-20210221143651616"></p><blockquote><p>这个时候可以看到微服务已经被sentinel所监控</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221143717.png" alt="image-20210221143717393"></p><h1 id="四、流控（流量控制）规则"><a href="#四、流控（流量控制）规则" class="headerlink" title="四、流控（流量控制）规则"></a>四、流控（流量控制）规则</h1><h2 id="4-1、基本介绍"><a href="#4-1、基本介绍" class="headerlink" title="4.1、基本介绍"></a>4.1、基本介绍</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221145035.png" alt="img"></p><blockquote><p>进一步解释说明</p></blockquote><ul><li>资源名：唯一名称，默认请求路径</li><li>针对来源：Sentinel可以针对调用者进行限流，填写微服务名，默认default（不区分来源）</li><li>阈值类型/单机阀值：<ul><li>QPS（每秒钟的请求数量）：当调用该api的QPS达到阈值的时候，进行限流。</li><li>线程数：当调用该api的线程数达到闽值的时候，进行限流</li></ul></li><li>是否集群：不需要集群</li><li>流控模式：<ul><li>直接：api达到限流条件时直接限流</li><li>关联：当关联的资源达到阈值时，就限流自己。</li><li>链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流）【API级别的针对来源】</li></ul></li><li>效果<ul><li>快速失败：直接失败，抛异常</li><li>Warm up：根据codeFactor（冷加载因子，默认3）的值，从阈值/codeFactor，经过预热时长，才达到设置的QPS阈值</li><li>排队等待：匀速排队，让请求以匀速通过，与值类型必须设置为QPS，否则无效。</li></ul></li></ul><h2 id="4-2、流控模式"><a href="#4-2、流控模式" class="headerlink" title="4.2、流控模式"></a>4.2、流控模式</h2><h3 id="1、直接（默认）"><a href="#1、直接（默认）" class="headerlink" title="1、直接（默认）"></a>1、直接（默认）</h3><blockquote><p>直接：api达到限流条件时直接限流</p><p>配置</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221151300.png" alt="img"></p><blockquote><p>在sentinel控制台【簇点链路】-【/testA】中，为/testA资源添加流控规则</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221150350.png" alt="image-20210221150350774"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221150517.png" alt="image-20210221150516941"></p><blockquote><p>此时/testA的流控规则为每秒钟只能点1次，如果超过次数就会报【flow limiting】</p><p>正常访问，一秒钟点一次的情况下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221150743.png" alt="image-20210221150743330"></p><blockquote><p>非正常访问情况下，一秒钟访问多次</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221150814.png" alt="image-20210221150814186"></p><h3 id="2、关联"><a href="#2、关联" class="headerlink" title="2、关联"></a>2、关联</h3><blockquote><p>关联：当关联的资源达到阈值时，就限流自己。</p><p>假设Controller中有两个资源AB，当与A关联的资源B达到阈值后，就限流A自己。</p><p>配置</p><p>当B的QPS达到1（即B一秒内被访问多次）时，限流A</p><p>例如支付接口达到阈值时，限流下订单接口</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221153406.png" alt="image-20210221153406525"></p><blockquote><p>使用POSTMAN 模拟并发密集访问testB</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221154556.png" alt="image-20210221154555941"></p><blockquote><p>使用postman发送请求后访问/testA，此时/testA挂了</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221154811.png" alt="image-20210221154811947"></p><h3 id="3、链路"><a href="#3、链路" class="headerlink" title="3、链路"></a>3、链路</h3><blockquote><p>多个请求调用了同一个微服务</p></blockquote><h2 id="4-3、流控效果"><a href="#4-3、流控效果" class="headerlink" title="4.3、流控效果"></a>4.3、流控效果</h2><h3 id="1、直接-gt-快速失败"><a href="#1、直接-gt-快速失败" class="headerlink" title="1、直接-&gt;快速失败"></a>1、直接-&gt;快速失败</h3><blockquote><p>直接失败，抛出异常：【Blocked by Sentinel】（flow limiting）</p></blockquote><h3 id="2、预热"><a href="#2、预热" class="headerlink" title="2、预热"></a>2、预热</h3><blockquote><p>说明：公式：阈值除以coldFactor（默认值为3），经过预热时长后才会达到阈值</p></blockquote><ul><li>概述</li></ul><blockquote><p>当流量突然增大的时候，我们常常会希望系统从空闲状态到繁忙状态的切换的时间长一些。即如果系统在此之前长期处于空闲的状态，我们希望处理请求的数量是缓步的增多，经过预期的时间以后，到达系统处理请求个数的最大值。Warm Up（冷启动，预热）模式就是为了实现这个目的的。</p><p>这个场景主要用于启动需要额外开销的场景，例如建立数据库连接等。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221164221.png" alt="image-20210221164220167"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221164649.png" alt="image-20210221164649046"></p><blockquote><p>为资源/testB新增一个流控规则</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221164820.png" alt="image-20210221164820127"></p><blockquote><p>在一段时间内快速访问/testB，此时可以看到，资源/testB被限流</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221165340.png" alt="image-20210221165340581"></p><blockquote><p>5s后再访问/testB，发现已经可以慢慢承受的住请求</p><p>应用场景：</p><ul><li>秒杀系统再开启的瞬间会有很多流量直接涌上来，很可能直接把系统打死，预热方式就是为了保护系统，可以慢慢把流量放进来，慢慢地把阈值增长到设置的阈值。</li></ul></blockquote><h3 id="3、排队等待"><a href="#3、排队等待" class="headerlink" title="3、排队等待"></a>3、排队等待</h3><blockquote><p>匀速排队，阈值必须设置为QPS</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221170241.png" alt="img"></p><blockquote><p>这种方式主要用于处理间隔性突发的流量，例如消息队列。想象一下这样的场景，有某一秒内有大量请求到来，而接下来的几秒则处于空闲状态，我们希望系统能够在接下来的空闲期间逐渐处理这些请求，而不是在第一秒直接拒绝多余的请求。</p></blockquote><ul><li>修改资源/testB的流控效果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221170612.png" alt="image-20210221170612528"></p><blockquote><p>修改业务类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLimitController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testA&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;------testA&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testB&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;testB...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;------testB&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用POSTMAN进行测试</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221171142.png" alt="image-20210221171142702"></p><blockquote><p>启动，查看结果，可以看到每个一秒有一个请求排队过来访问/testB</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221171637.png" alt="image-20210221171637049"></p><h2 id="4-4、降级规则"><a href="#4-4、降级规则" class="headerlink" title="4.4、降级规则"></a>4.4、降级规则</h2><h3 id="1、降级规则说明"><a href="#1、降级规则说明" class="headerlink" title="1、降级规则说明"></a>1、降级规则说明</h3><blockquote><p>在sentinel控制台【降级规则】中点击【新增降级规则】</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221172312.png" alt="image-20210221172311770"></p><blockquote><p>配置降级规则参数，其中</p><ul><li>RT：平均响应时间，秒级<ul><li>平均响应时间 <strong>超出阈值</strong> 且 <strong>在时间窗口内通过的请求&gt;=5</strong>，两个条件同时满足后触发降级，窗口期过后关闭断路器</li><li>RT最大为4900，更大的需要通过 <strong>-Dcsp.sentinel.statistic.max.rt=XXXX</strong> 才能生效</li></ul></li><li>异常比例，秒级<ul><li>QPS &gt;= 5 且异常比例（秒级统计）超过阈值时，触发降级；时间窗口结束后，关闭降级</li></ul></li><li>异常数，分钟级<ul><li>异常数（分钟统计）超过阈值时，触发降级；时间窗口结束后，关闭降级</li></ul></li></ul></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221172755.png" alt="image-20210221172755551"></p><h3 id="2、进一步说明"><a href="#2、进一步说明" class="headerlink" title="2、进一步说明"></a>2、进一步说明</h3><blockquote><p>Sentinel 熔断降级会在调用链路中某个资源出现不稳定状态时（例如调用超时或者异常比例升高），对这个资源的调用进行限制，让请求快速失效，避免影响到其他的资源而导致级联错误。</p><p>当资源被降级后，在接下来的降级时间窗口之内，对该资源的调用都自动熔断（默认行为时抛出DegradeException）</p><p><strong>Sentinel的断路器中没有半开状态</strong></p></blockquote><h3 id="3、RT"><a href="#3、RT" class="headerlink" title="3、RT"></a>3、RT</h3><ul><li>平均响应时间（DEGRADE_GRADE_RT）：当1s内持续进入5个请求，对应时刻的<strong>平均响应时间</strong>（秒级）均超过阈值（count，以ms为单位），那么在接下的时间窗口（DegradeRule中的timewindow,以s为单位）之内，对这个方法的调用都会自动地熔断（抛出DegradeException)。注意Sentinel默认统计的RT上限是4900ms，超出此阀值的都会算作4900ms，若需要变更此上限可以通过启动配置项-Dcsp.sentinel.statistic.max.rt-xxx来配置。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221174427.png" alt="img"></p><blockquote><p>修改业务类代码，添加方法如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testD&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">1</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">    log.info(<span class="string">&quot;testD 测试RT&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------testD&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置，新增降级规则</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221175223.png" alt="image-20210221175222781"></p><blockquote><p>使用JMeter进行压力测试</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221175305.png" alt="image-20210221175305530"></p><blockquote><p>启动JMeter后访问/testD，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221175557.png" alt="image-20210221175557472"></p><blockquote><p>结论：按照上述配置，永远一秒钟打进来10个线程（大于5个）调用testD，我们希望这些请求的平均响应时间是200ms，如果平均响应时间超过200ms，在未来的一秒钟内，断路器打开，保险丝跳闸，微服务不可用。</p><p>后续停止jmeter，没有那么大的访问量后，断路器关闭，微服务恢复。</p></blockquote><h3 id="4、异常比例"><a href="#4、异常比例" class="headerlink" title="4、异常比例"></a>4、异常比例</h3><ul><li>异常比例：当资源的每秒访问量 &gt;= 5，且每秒异常总数占通过量比例超过阈值之后，资源进入降级状态，即在接下来的时间窗口之内，对这个方法的调用都会自动地返回，异常比例的阈值范围为[0.0,1.0]，代表0%-100%</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221180654.png" alt="img"></p><blockquote><p>修改业务类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testD&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testD</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;testD 异常比例&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------testD&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置，设置异常比例为20%</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221181748.png" alt="image-20210221181748353"></p><blockquote><p>使用JMeter进行压测，然后再次访问/testD，查看结果</p><p>此时资源/testD挂了</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221181850.png" alt="image-20210221181850537"></p><blockquote><p>关闭jmeter，在时间窗口期结束后再次访问/testD，直接返回错误页面</p><p><strong>由于这次请求中请求数小于5，所以没有服务降级。</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221181956.png" alt="image-20210221181956643"></p><blockquote><p>结论</p></blockquote><ul><li>单独访问一次，必然来一次报错一次（int age = 10 / 0），调一次错一次</li><li>开启JMeter后，直接高并发发送请求，多次调用达到我们的配置条件了，断路器开启，微服务不可用，此时不再报error而是服务降级。</li></ul><h3 id="5、异常数"><a href="#5、异常数" class="headerlink" title="5、异常数"></a>5、异常数</h3><ul><li>异常数：当资源近一分钟的异常数目超过阈值之后会进行熔断。注意，由于统计时间窗口是分钟级别的，若时间窗口小于60s，则结束熔断后仍可能再次进入熔断状态。</li><li>时间窗口一定要大于等于60s。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221191750.png" alt="img"></p><blockquote><p>在业务类中添加方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testE&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testE</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;testE 测试异常数&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------testE 测试异常数&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在控制台中给/testE添加降级规则</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221195517.png" alt="image-20210221195516085"></p><blockquote><p>短时间内连续访问5次<a href="http://localhost:8401/testE">http://localhost:8401/testE</a> ，然后再次访问/testE，查看结果</p><ul><li>前面五次，返回的是Error Page</li><li>第六次访问返回降级提示。</li></ul></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221195655.png" alt="image-20210221195655293"></p><h1 id="五、热点key限流"><a href="#五、热点key限流" class="headerlink" title="五、热点key限流"></a>五、热点key限流</h1><h2 id="5-1、基本介绍"><a href="#5-1、基本介绍" class="headerlink" title="5.1、基本介绍"></a>5.1、基本介绍</h2><p>何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 Top K 数据，并对其访问进行限制。比如：</p><ul><li>商品 ID 为参数，统计一段时间内最常购买的商品 ID 并进行限制</li><li>用户 ID 为参数，针对一段时间内频繁访问的用户 ID 进行限制</li></ul><p>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。</p><blockquote><p>根据请求带的某些参数进行限流</p></blockquote><h2 id="5-2、配置热点限流"><a href="#5-2、配置热点限流" class="headerlink" title="5.2、配置热点限流"></a>5.2、配置热点限流</h2><h3 id="1、复习hystrix"><a href="#1、复习hystrix" class="headerlink" title="1、复习hystrix"></a>1、复习hystrix</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221212226.png" alt="img"></p><h3 id="2、在业务类中添加代码"><a href="#2、在业务类中添加代码" class="headerlink" title="2、在业务类中添加代码"></a>2、在业务类中添加代码</h3><ul><li>这里@SentinelResource注解的value属性要求唯一，一般与请求Mapping相同，将来在sentinel控制台添加热点key限流时可以用@SentinelResource注解的value作为资源名。</li><li>@SentinelResource注解的blockHandler属性用于指定兜底方法，需要在兜底方法的参数列表中添加一个BlockException类型的参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testHotKey&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;testHotkey&quot;,blockHandler = &quot;deal_testHotKey&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHotKey</span><span class="params">(<span class="meta">@RequestParam(value = &quot;p1&quot;,required = false)</span> String p1,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="meta">@RequestParam(value = &quot;p2&quot;,required = false)</span> String p2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//int age = 10/0;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------testHotKey&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//兜底方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deal_testHotKey</span> <span class="params">(String p1, String p2, BlockException exception)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------deal_testHotKey,o(╥﹏╥)o&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、在sentinel控制台中添加热点规则"><a href="#3、在sentinel控制台中添加热点规则" class="headerlink" title="3、在sentinel控制台中添加热点规则"></a>3、在sentinel控制台中添加热点规则</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221214652.png" alt="image-20210221214650652"></p><h3 id="4、在控制台中添加配置"><a href="#4、在控制台中添加配置" class="headerlink" title="4、在控制台中添加配置"></a>4、在控制台中添加配置</h3><blockquote><p>添加的配置如下</p><p>下面的配置表示：对于/testHotkey请求，如果带p1参数访问，那么一秒钟最多访问一次</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221214920.png" alt="image-20210221214920044"></p><h3 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h3><blockquote><p>在一秒钟内多次访问<a href="http://localhost:8401/testHotkey?p1=a">http://localhost:8401/testHotkey?p1=a</a> </p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221215443.png" alt="image-20210221215443934"></p><h3 id="6、结论"><a href="#6、结论" class="headerlink" title="6、结论"></a>6、结论</h3><blockquote><p>方法testHotKey里面第一个参数只要QPS超过1次/s，那么直接做降级处理，同时调用我们自己定义的兜底方法。</p><p>如果请求参数中不含有p1参数，那么如何访问都不会有问题。</p><p>如果在@SentinelResource注解中不指定blockHandler属性，那么会直接将错误页面返回到前台，十分不友好。</p></blockquote><h3 id="7、补充"><a href="#7、补充" class="headerlink" title="7、补充"></a>7、补充</h3><blockquote><p>修改业务类，在testHotkey方法中添加一个运行时异常，重启测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testHotKey&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;testHotkey&quot;,blockHandler = &quot;deal_testHotKey&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHotKey</span><span class="params">(<span class="meta">@RequestParam(value = &quot;p1&quot;,required = false)</span> String p1,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="meta">@RequestParam(value = &quot;p2&quot;,required = false)</span> String p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------testHotKey&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//兜底方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deal_testHotKey</span> <span class="params">(String p1, String p2, BlockException exception)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------deal_testHotKey,o(╥﹏╥)o&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果：直接返回了Error page</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221223928.png" alt="image-20210221223927546"></p><blockquote><p>这表明：@SentinelResouce只负责sentinel控制台出的错，不负责程序本身运行时异常。</p></blockquote><h2 id="5-3、参数例外项"><a href="#5-3、参数例外项" class="headerlink" title="5.3、参数例外项"></a>5.3、参数例外项</h2><blockquote><p>上述案例演示了第一个参数p1，当QPS超过1s一次点击后马上被限流。</p></blockquote><h3 id="1、配置"><a href="#1、配置" class="headerlink" title="1、配置"></a>1、配置</h3><blockquote><p>普通情况下：当p1的QPS达到1次1s时马上被限流</p><p>我们希望p1参数是某个特殊值时，他的限流值和平时不一样。</p></blockquote><ul><li>给p1设置一个特殊值，加入当p1的值为5时，他的阈值可以达到200</li><li>修改配置</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221222425.png" alt="image-20210221222425693"></p><blockquote><p>测试：在一秒内多次访问<a href="http://localhost:8401/testHotkey?p1=3">http://localhost:8401/testHotkey?p1=3</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221222553.png" alt="image-20210221222553598"></p><blockquote><p>测试：在一秒内多次访问<a href="http://localhost:8401/testHotkey?p1=5">http://localhost:8401/testHotkey?p1=5</a></p><p>此时由于配置了参数例外项，所以在一秒内多次访问也不会降级。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221222652.png" alt="image-20210221222652243"></p><h3 id="2、前提说明"><a href="#2、前提说明" class="headerlink" title="2、前提说明"></a>2、前提说明</h3><blockquote><p>热点参数的注意点，参数必须是<strong>基本类型</strong>或者<strong>String</strong></p></blockquote><h1 id="六、系统规则"><a href="#六、系统规则" class="headerlink" title="六、系统规则"></a>六、系统规则</h1><h2 id="6-1、介绍"><a href="#6-1、介绍" class="headerlink" title="6.1、介绍"></a>6.1、介绍</h2><blockquote><p>Sentinel 系统自适应限流从<strong>整体维度</strong>对应用入口流量进行控制，结合应用的 Load、CPU 使用率、总体平均 RT、入口 QPS 和并发线程数等几个维度的监控指标，通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p><p>在系统层面对进入的流量进行控制。</p></blockquote><h2 id="6-2、新增系统规则"><a href="#6-2、新增系统规则" class="headerlink" title="6.2、新增系统规则"></a>6.2、新增系统规则</h2><blockquote><p>在sentinel控制台中选择【系统规则】-【新增系统规则】</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221225151.png" alt="image-20210221225151304"></p><blockquote><p>添加配置页面及模式说明如下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221225306.png" alt="image-20210221225306468"></p><ul><li><strong>Load 自适应</strong>（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 <code>maxQps * minRt</code> 估算得出。设定参考值一般是 <code>CPU cores * 2.5</code>。</li><li><strong>CPU usage</strong>（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</li><li><strong>平均 RT</strong>：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li><li><strong>并发线程数</strong>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li><li><strong>入口 QPS</strong>：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li></ul><blockquote><p>添加系统规则，设置入口QPS阈值为1</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221225529.png" alt="image-20210221225529528"></p><blockquote><p>在业务类中新增方法如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testC&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;testB...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------testC&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>重启微服务，在一秒内多次访问<a href="http://localhost:8401/testC">http://localhost:8401/testC</a> ，查看结果，此时可以看到没有在流控规则中配置过的testC也被限流了</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221230134.png" alt="image-20210221230134803"></p><h1 id="七、-SentinelResource"><a href="#七、-SentinelResource" class="headerlink" title="七、@SentinelResource"></a>七、@SentinelResource</h1><h2 id="7-1、按资源名称限流-后续处理"><a href="#7-1、按资源名称限流-后续处理" class="headerlink" title="7.1、按资源名称限流 + 后续处理"></a>7.1、按资源名称限流 + 后续处理</h2><h3 id="1、启动Nacos和Sentinel"><a href="#1、启动Nacos和Sentinel" class="headerlink" title="1、启动Nacos和Sentinel"></a>1、启动Nacos和Sentinel</h3><h3 id="2、修改8401微服务"><a href="#2、修改8401微服务" class="headerlink" title="2、修改8401微服务"></a>2、修改8401微服务</h3><blockquote><p>编写一个RateLimitController业务类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimitController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/byResource&quot;)</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;byResource&quot;, blockHandler = &quot;handleException&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">byResource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>, <span class="string">&quot;按资源名称限流测试OK&quot;</span>, <span class="keyword">new</span> Payment(<span class="number">2020L</span>, <span class="string">&quot;serial001&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">handleException</span><span class="params">(BlockException exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>, exception.getClass().getCanonicalName() + <span class="string">&quot;\t 服务不可用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>重新启动，测试</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221234008.png" alt="image-20210221234008117"></p><h3 id="3、按资源名进行限流"><a href="#3、按资源名进行限流" class="headerlink" title="3、按资源名进行限流"></a>3、按资源名进行限流</h3><blockquote><p>在sentinel控制台中点击【簇点链路】，其中byResouce就是资源名称</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221234150.png" alt="image-20210221234150402"></p><blockquote><p>在【簇点链路】-【byResource】一行中点击【流控】，添加配置</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221234835.png" alt="image-20210221234835362"></p><blockquote><p>测试，在短时间内多次访问<a href="http://localhost:8401/byResource">http://localhost:8401/byResource</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221235142.png" alt="image-20210221235142379"></p><h3 id="4、额外问题"><a href="#4、额外问题" class="headerlink" title="4、额外问题"></a>4、额外问题</h3><blockquote><p>此时关闭8401微服务，查看Sentinel控制台，可以发现流控规则消失了</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221235400.png" alt="image-20210221235400848"></p><ul><li>流控规则是<strong>临时</strong>的</li></ul><h2 id="7-2、按照Url地址限流-后续处理"><a href="#7-2、按照Url地址限流-后续处理" class="headerlink" title="7.2、按照Url地址限流 + 后续处理"></a>7.2、按照Url地址限流 + 后续处理</h2><blockquote><p>通过访问的URL来限流，会返回Sentinel自带默认的限流处理信息。</p></blockquote><h3 id="1、修改RateLimitController"><a href="#1、修改RateLimitController" class="headerlink" title="1、修改RateLimitController"></a>1、修改RateLimitController</h3><blockquote><p>新增一个方法，这个方法没有自定义的兜底方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/rateLimit/byUrl&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;byUrl&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">byUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;按url限流测试OK&quot;</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">&quot;serial002&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、访问新增的方法"><a href="#2、访问新增的方法" class="headerlink" title="2、访问新增的方法"></a>2、访问新增的方法</h3><blockquote><p>访问 <a href="http://localhost:8401/rateLimit/byUrl">http://localhost:8401/rateLimit/byUrl</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210221235934.png" alt="image-20210221235934057"></p><h3 id="3、在Sentinel控制台进行配置"><a href="#3、在Sentinel控制台进行配置" class="headerlink" title="3、在Sentinel控制台进行配置"></a>3、在Sentinel控制台进行配置</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222000127.png" alt="image-20210222000127076"></p><h3 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h3><blockquote><p>在一秒内多次访问 <a href="http://localhost:8401/rateLimit/byUrl">http://localhost:8401/rateLimit/byUrl</a> ，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222000301.png" alt="image-20210222000301562"></p><blockquote><p>可以看出，如果没有自定义兜底方法，就直接用sentinel自带的兜底方法</p></blockquote><h2 id="7-3、上面兜底方案面临的问题"><a href="#7-3、上面兜底方案面临的问题" class="headerlink" title="7.3、上面兜底方案面临的问题"></a>7.3、上面兜底方案面临的问题</h2><ul><li>系统默认的，没有体现我们自己的业务需求</li><li>依照现有条件，我们自定义的处理方法又和业务代码耦合在一块，不直观</li><li>每一个业务方法都有自己的兜底方法，代码膨胀加剧</li><li>全局统一的处理方法没有体现。</li></ul><h2 id="7-4、客户自定义限流处理逻辑"><a href="#7-4、客户自定义限流处理逻辑" class="headerlink" title="7.4、客户自定义限流处理逻辑"></a>7.4、客户自定义限流处理逻辑</h2><h3 id="1、创建CustomerBlockerHandler类"><a href="#1、创建CustomerBlockerHandler类" class="headerlink" title="1、创建CustomerBlockerHandler类"></a>1、创建CustomerBlockerHandler类</h3><blockquote><p>这个类用于自定义限流处理逻辑</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerBlockerHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">handlerException</span> <span class="params">(BlockException blockException)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">7777</span>,<span class="string">&quot;客户自定义，global handlerException ------------1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">handlerException2</span> <span class="params">(BlockException blockException)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">7777</span>,<span class="string">&quot;客户自定义，global handlerException ------------2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、修改业务类"><a href="#2、修改业务类" class="headerlink" title="2、修改业务类"></a>2、修改业务类</h3><blockquote><p>添加方法如下，@SentinleResource参数中</p><ul><li>value指定资源名</li><li>blockHandlerClass指定限流处理类</li><li>blockHandler指定限流处理类中的限流处理方法</li></ul><p>即customerBlockerHandler方法的限流处理业务由<strong>CustomerBlockerHandler类</strong>中的<strong>handlerException2方法</strong>处理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/rateLimit/customerBlockerHandler&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(</span></span><br><span class="line"><span class="meta">    value = &quot;customerBlockerHandler&quot;,</span></span><br><span class="line"><span class="meta">    blockHandlerClass = CustomerBlockerHandler.class,</span></span><br><span class="line"><span class="meta">    blockHandler = &quot;handlerException2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">customerBlockerHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;客户自定义处理类&quot;</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">&quot;serial002&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、重启服务，测试新方法，添加流控规则"><a href="#3、重启服务，测试新方法，添加流控规则" class="headerlink" title="3、重启服务，测试新方法，添加流控规则"></a>3、重启服务，测试新方法，添加流控规则</h3><blockquote><p>访问<a href="http://localhost/rateLimit/customerBlockerHandler">http://localhost/rateLimit/customerBlockerHandler</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222002549.png" alt="image-20210222002549684"></p><blockquote><p>为customerBlockerHandler方法添加流控规则</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222002539.png" alt="image-20210222002538578"></p><h3 id="4、测试我们自定义的限流处理业务类"><a href="#4、测试我们自定义的限流处理业务类" class="headerlink" title="4、测试我们自定义的限流处理业务类"></a>4、测试我们自定义的限流处理业务类</h3><blockquote><p>在一秒钟内连续访问 <a href="http://localhost/rateLimit/customerBlockerHandler">http://localhost/rateLimit/customerBlockerHandler</a> 查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222002732.png" alt="image-20210222002732531"></p><h3 id="5、Controller方法与自定义限流业务处理方法对于关系"><a href="#5、Controller方法与自定义限流业务处理方法对于关系" class="headerlink" title="5、Controller方法与自定义限流业务处理方法对于关系"></a>5、Controller方法与自定义限流业务处理方法对于关系</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222002830.png" alt="image-20210222002830021"></p><h1 id="八、服务熔断功能"><a href="#八、服务熔断功能" class="headerlink" title="八、服务熔断功能"></a>八、服务熔断功能</h1><blockquote><p>sentinel整合<strong>ribbon</strong> + <strong>openFeign</strong> + <strong>fallback</strong></p></blockquote><h2 id="8-1、sentinel整合Ribbon"><a href="#8-1、sentinel整合Ribbon" class="headerlink" title="8.1、sentinel整合Ribbon"></a>8.1、sentinel整合Ribbon</h2><blockquote><p>程序架构图如下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222104755.png" alt="image-20210222104747783"></p><h3 id="1、创建服务提供者9003"><a href="#1、创建服务提供者9003" class="headerlink" title="1、创建服务提供者9003"></a>1、创建服务提供者9003</h3><blockquote><p>创建微服务模块 【cloudalibaba-provider-payment9003】</p></blockquote><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cloudstudy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9003</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>主启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain9003</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain9003.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>业务类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Long, Payment&gt; hashMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        hashMap.put(<span class="number">1L</span>, <span class="keyword">new</span> Payment(<span class="number">1L</span>, <span class="string">&quot;28a8c1e3bc2742d8848569891fb42181&quot;</span>));</span><br><span class="line">        hashMap.put(<span class="number">2L</span>, <span class="keyword">new</span> Payment(<span class="number">2L</span>, <span class="string">&quot;bba8c1e3bc2742d8848569891ac32182&quot;</span>));</span><br><span class="line">        hashMap.put(<span class="number">3L</span>, <span class="keyword">new</span> Payment(<span class="number">3L</span>, <span class="string">&quot;6ua8c1e3bc2742d8848569891xt92183&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        Payment payment = hashMap.get(id);</span><br><span class="line">        CommonResult&lt;Payment&gt; result = <span class="keyword">new</span> CommonResult(<span class="number">200</span>, <span class="string">&quot;from mysql,serverPort:  &quot;</span> + serverPort, payment);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><blockquote><p>启动9003，访问 <a href="http://localhost:9003/paymentSQL/1">http://localhost:9003/paymentSQL/1</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222113152.png" alt="image-20210222113152026"></p><h3 id="2、根据9003创建服务提供者9004"><a href="#2、根据9003创建服务提供者9004" class="headerlink" title="2、根据9003创建服务提供者9004"></a>2、根据9003创建服务提供者9004</h3><h3 id="3、创建服务消费者84"><a href="#3、创建服务消费者84" class="headerlink" title="3、创建服务消费者84"></a>3、创建服务消费者84</h3><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cloudstudy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>yml配置文件</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">84</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order-comsumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8179</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos-payment-provider</span></span><br></pre></td></tr></table></figure><ul><li>主启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosMain84</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderNacosMain84.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ApplicationContextConfig</li></ul><blockquote><p>往Spring 容器中注入一个RestTemplate对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、84微服务中的业务类"><a href="#4、84微服务中的业务类" class="headerlink" title="4、84微服务中的业务类"></a>4、84微服务中的业务类</h3><blockquote><p>CircleBreakerController的全部代码</p><ul><li>其中fallback管java运行时异常</li><li>blockHandler管sentinel违规异常</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleBreakerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_URL = <span class="string">&quot;http://nacos-payment-provider&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/fallback/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="comment">//@SentinelResource(value = &quot;fallback&quot;) //没有配置</span></span><br><span class="line"><span class="comment">//@SentinelResource(value = &quot;fallback&quot;,fallback = &quot;handlerFallback&quot;) //fallback只负责业务异常</span></span><br><span class="line"><span class="comment">//@SentinelResource(value = &quot;fallback&quot;,blockHandler = &quot;blockHandler&quot;) //blockHandler只负责sentinel控制台配置违规</span></span><br><span class="line">    <span class="comment">//@SentinelResource(value = &quot;fallback&quot;, fallback = &quot;handlerFallback&quot;, blockHandler = &quot;blockHandler&quot;,</span></span><br><span class="line">            exceptionsToIgnore = &#123;IllegalArgumentException.class&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">fallback</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123;</span><br><span class="line">        CommonResult&lt;Payment &gt; result = restTemplate.getForObject(SERVICE_URL + <span class="string">&quot;/paymentSQL/&quot;</span> + id, CommonResult.class, id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;IllegalArgumentException,非法参数异常....&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.getData() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;NullPointerException,该ID没有对应记录,空指针异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//fallback</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">handlerFallback</span><span class="params">(<span class="meta">@PathVariable</span> Long id, Throwable e)</span> </span>&#123;</span><br><span class="line">        Payment payment = <span class="keyword">new</span> Payment(id, <span class="string">&quot;null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>, <span class="string">&quot;兜底异常handlerFallback,exception内容  &quot;</span> + e.getMessage(), payment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//blockHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">blockHandler</span><span class="params">(<span class="meta">@PathVariable</span> Long id, BlockException blockException)</span> </span>&#123;</span><br><span class="line">        Payment payment = <span class="keyword">new</span> Payment(id, <span class="string">&quot;null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">445</span>, <span class="string">&quot;blockHandler-sentinel限流,无此流水: blockException  &quot;</span> + blockException.getMessage(), payment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动9003、9004、84微服务，输入测试地址，查看结果</li></ul><blockquote><p>测试地址：<a href="http://localhost:84/consumer/fallback/1">http://localhost:84/consumer/fallback/1</a></p><p>实现了负载均衡和微服务调用</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222121549.png" alt="image-20210222121547497"></p><h3 id="5、84微服务业务类不做任何配置的情况下"><a href="#5、84微服务业务类不做任何配置的情况下" class="headerlink" title="5、84微服务业务类不做任何配置的情况下"></a>5、84微服务业务类不做任何配置的情况下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(value = &quot;fallback&quot;)</span> <span class="comment">//没有配置</span></span><br></pre></td></tr></table></figure><blockquote><p>此时访问 <a href="http://localhost:84/consumer/fallback/4">http://localhost:84/consumer/fallback/4</a> ，那么会报非法参数异常，直接返回一个错误页面</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222122142.png" alt="image-20210222122142619"></p><blockquote><p>此时如果访问  <a href="http://localhost:84/consumer/fallback/5">http://localhost:84/consumer/fallback/5</a> ，那么汇报空指针异常，也是直接返回一个错误页面</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222122258.png" alt="image-20210222122258779"></p><h3 id="6、84微服务业务类只配置fallback"><a href="#6、84微服务业务类只配置fallback" class="headerlink" title="6、84微服务业务类只配置fallback"></a>6、84微服务业务类只配置fallback</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fallback只负责业务异常</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;fallback&quot;,fallback = &quot;handlerFallback&quot;)</span> </span><br></pre></td></tr></table></figure><blockquote><p>此时访问 <a href="http://localhost:84/consumer/fallback/4">http://localhost:84/consumer/fallback/4</a> ，那么会报非法参数异常，此时调用fallback配置的兜底方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fallback</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">handlerFallback</span><span class="params">(<span class="meta">@PathVariable</span> Long id, Throwable e)</span> </span>&#123;</span><br><span class="line">    Payment payment = <span class="keyword">new</span> Payment(id, <span class="string">&quot;null&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>, <span class="string">&quot;兜底异常handlerFallback,exception内容  &quot;</span> + e.getMessage(), payment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222123003.png" alt="image-20210222123003397"></p><blockquote><p>此时访问 <a href="http://localhost:84/consumer/fallback/5">http://localhost:84/consumer/fallback/5</a> ，那么会报空指针异常，此时调用fallback配置的兜底方法</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222123246.png" alt="image-20210222123246739"></p><h3 id="7、84微服务业务类只配置blockHandler"><a href="#7、84微服务业务类只配置blockHandler" class="headerlink" title="7、84微服务业务类只配置blockHandler"></a>7、84微服务业务类只配置blockHandler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//blockHandler只负责sentinel控制台配置违规</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;fallback&quot;,blockHandler = &quot;blockHandler&quot;)</span> </span><br></pre></td></tr></table></figure><blockquote><p>此时blockHandler配置的兜底方法只管sentinel控制台违规配置，不管java程序运行时异常错误。</p><p>此时访问<a href="http://localhost:84/consumer/fallback/5">http://localhost:84/consumer/fallback/5</a> ，由于输入的id不合法，所以直接返回错误页面</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222124841.png" alt="image-20210222124841012"></p><blockquote><p>在sentinel中新增一个降级规则</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222125259.png" alt="image-20210222125258965"></p><blockquote><p>在短时间内连续访问两次 <a href="http://localhost:84/consumer/fallback/4">http://localhost:84/consumer/fallback/4</a> 后，由于触犯了sentinel配置的降级规则，所以该方法被降级，调用了blockHandler配置的降级方法。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222125359.png" alt="image-20210222125359108"></p><h3 id="8、84微服务fallback和blockHandler都配置"><a href="#8、84微服务fallback和blockHandler都配置" class="headerlink" title="8、84微服务fallback和blockHandler都配置"></a>8、84微服务fallback和blockHandler都配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(value = &quot;fallback&quot;, fallback = &quot;handlerFallback&quot;, blockHandler = &quot;blockHandler&quot;)</span></span><br></pre></td></tr></table></figure><blockquote><p>fallback和blockHandler对应的兜底方法如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fallback</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">handlerFallback</span><span class="params">(<span class="meta">@PathVariable</span> Long id, Throwable e)</span> </span>&#123;</span><br><span class="line">    Payment payment = <span class="keyword">new</span> Payment(id, <span class="string">&quot;null&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>, <span class="string">&quot;兜底异常handlerFallback,exception内容  &quot;</span> + e.getMessage(), payment);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//blockHandler</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">blockHandler</span><span class="params">(<span class="meta">@PathVariable</span> Long id, BlockException blockException)</span> </span>&#123;</span><br><span class="line">    Payment payment = <span class="keyword">new</span> Payment(id, <span class="string">&quot;null&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">445</span>, <span class="string">&quot;blockHandler-sentinel限流,无此流水: blockException  &quot;</span> + blockException.getMessage(), payment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在sentinel控制台中为资源fallback新增一个流控规则</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222130542.png" alt="image-20210222130541531"></p><blockquote><p>在短时间内多次访问 <a href="http://localhost:84/consumer/fallback/1">http://localhost:84/consumer/fallback/1</a> ，违反sentinel的流控规则，触发blockHandler中配置的兜底方法</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222130711.png" alt="image-20210222130711708"></p><blockquote><p>访问 <a href="http://localhost:84/consumer/fallback/4">http://localhost:84/consumer/fallback/4</a> ，触发fallback中配置的兜底方法</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222130912.png" alt="image-20210222130912853"></p><blockquote><p>如果在短时间内多次访问 <a href="http://localhost:84/consumer/fallback/4">http://localhost:84/consumer/fallback/4</a> ，既报异常又违反sentinel的限流规则，此时归blockHandler配置的兜底方法管</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222131141.png" alt="image-20210222131140908"></p><h3 id="9、结论"><a href="#9、结论" class="headerlink" title="9、结论"></a>9、结论</h3><blockquote><p>若 <strong>blockHandler</strong> 和 <strong>fallback</strong> 都进行了配置，则被<strong>限流降级</strong>而抛出 <strong>BlockException **时只会进入 **blockHandler 处理逻辑。</strong></p></blockquote><h3 id="10、异常忽略属性"><a href="#10、异常忽略属性" class="headerlink" title="10、异常忽略属性"></a>10、异常忽略属性</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222132107.png" alt="image-20210222132107534"></p><blockquote><p>在业务类中添加配置如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(value = &quot;fallback&quot;, fallback = &quot;handlerFallback&quot;, blockHandler = &quot;blockHandler&quot;, exceptionsToIgnore = &#123;IllegalArgumentException.class&#125;)</span></span><br></pre></td></tr></table></figure><blockquote><p>此时再次访问 <a href="http://localhost:84/consumer/fallback/4">http://localhost:84/consumer/fallback/4</a> </p><p>由于IllegalArgumentException异常被忽略，所以直接返回了error page</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222132208.png" alt="image-20210222132208156"></p><h2 id="8-2、sentinel整合OpenFeign"><a href="#8-2、sentinel整合OpenFeign" class="headerlink" title="8.2、sentinel整合OpenFeign"></a>8.2、sentinel整合OpenFeign</h2><h3 id="1、修改微服务消费者84模块"><a href="#1、修改微服务消费者84模块" class="headerlink" title="1、修改微服务消费者84模块"></a>1、修改微服务消费者84模块</h3><ul><li>yml配置文件中添加配置， 激活Sentinel对feign的支持</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 激活Sentinel对feign的支持</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>在主启动类上添加@EnableFeignClients注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br></pre></td></tr></table></figure><ul><li>编写一个PaymentService接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;nacos-payment-provider&quot;,fallback = PaymentFallbackService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写一个PaymentFallbackService实现PaymentService接口</li></ul><blockquote><p>这个类用于对PayService接口中的方法做兜底处理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">44444</span>, <span class="string">&quot;服务降级返回,---PaymentFallbackService&quot;</span>, <span class="keyword">new</span> Payment(id, <span class="string">&quot;errorSerial&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、修改Controller层"><a href="#2、修改Controller层" class="headerlink" title="2、修改Controller层"></a>2、修改Controller层</h3><blockquote><p>CircleBreakerController</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//===========================OpenFeign</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/consumer/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> paymentService.paymentSQL(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、启动9003、9004和84微服务，测试"><a href="#3、启动9003、9004和84微服务，测试" class="headerlink" title="3、启动9003、9004和84微服务，测试"></a>3、启动9003、9004和84微服务，测试</h3><blockquote><p>访问 <a href="http://localhost:84/consumer/paymentSQL/1">http://localhost:84/consumer/paymentSQL/1</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222143053.png" alt="image-20210222143051685"></p><h3 id="4、查看降级效果"><a href="#4、查看降级效果" class="headerlink" title="4、查看降级效果"></a>4、查看降级效果</h3><blockquote><p>测试84调用9003，此时<strong>故意关闭9003微服务提供者</strong>，看84消费侧自动降级，不会被耗死</p></blockquote><ul><li><p>关闭9003和9004</p></li><li><p>访问  <a href="http://localhost:84/consumer/paymentSQL/1">http://localhost:84/consumer/paymentSQL/1</a>  </p></li><li><p>查看结果</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210222143834.png" alt="image-20210222143834182"></p>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
            <tag> 👢Spring Boot </tag>
            
            <tag> 👨‍✈️Sentinel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法学习（六）-HashMap源码解读</title>
      <link href="posts/717860798.html"/>
      <url>posts/717860798.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1、集合容器"><a href="#1、集合容器" class="headerlink" title="1、集合容器"></a>1、集合容器</h2><h3 id="1-1、概述"><a href="#1-1、概述" class="headerlink" title="1.1、概述"></a>1.1、概述</h3><blockquote><p>Java集合容器主要包含了三个接口，分别为<strong>List</strong>，<strong>Set</strong>和<strong>Map</strong>，以及实现了这些接口的诸多子类。</p><p>其中List和Set继承了Collection接口，而Map是单独的接口。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210217221746.png" alt="image-20210217221746006"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210217221735.png" alt="image-20210217221733459"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210217221829.png" alt="image-20210217221829486"></p><h3 id="1-2、对比"><a href="#1-2、对比" class="headerlink" title="1.2、对比"></a>1.2、对比</h3><blockquote><p>List是有序的，有序指插入元素的顺序，其中可以存放重复值和null值</p><p>Set是无序的，且元素具有唯一性，所以只能存放一个null值</p><p>Map存放的是Entry键值对，键必须是唯一的，所以只能存放一个key为null的entry，但可以存放多个值为null的entry</p></blockquote><h3 id="1-3、HashMap的基本概念"><a href="#1-3、HashMap的基本概念" class="headerlink" title="1.3、HashMap的基本概念"></a>1.3、HashMap的基本概念</h3><blockquote><p>HashMap基于哈希表的Map接口实现，是以key-value存储形式存在，即主要用于存放键值对。HashMap的实现不是同步的，这意味着它不是线程安全的。它的key-value都可以为null（只能有一个key为null，可以有多个值为null），此外，HashMap中的映射不是有序的（不保证存取顺序）。</p><p>JDK1.8之前HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突（两个对象调用的hashCode方法计算的哈希码值一致导致计算的数组系引值相同）而存在的（“拉链法“解决冲突）JDK1.8以后在解决哈希冲突时有了较大的变化，<strong>当链表长度大于阀值（或者红黑树的边界值，默认为8）并且当前数组的长度大于64时</strong>，此时此案引位置上的所有数据改为使用<strong>红黑树</strong>存储。</p><p>补充：将链表转换成红黑树前会判断，即便阈值大于8，但是数组长度小于64，此时并不会将链表变为红黑树。而是选择进行数组扩容。</p><p>这样做的目的是因为效组比较小，尽量避开红黑树结构，这种情况下变为红黑树结构，反而会降低效率，因为红黑树需要进行左旋，右旋，变色这些操作来保持平衡。同时数组长度小于64时，搜索时间相对要快些。所以综上所述为了提高性能和减少搜索时间，底层在调值大于8并且数组长度大于64时，链表才转换为红黑树。吴体可以参考treeifyBin方法。</p><p>当然虽然增了红黑树作为底层数据结构，结构变得复杂了，但是阈值大于8并且数组长度大于64时，链表转换为红黑树时，效率也变的更高效。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210218113025.png" alt="image-20210218113018160"></p><blockquote><p>特点总结：</p></blockquote><ul><li>存取是无序的</li><li>键和值位置都可以是null，但是键位置只能有一个null</li><li>键位置是唯一的</li><li>1.8之前数据结构是数组+链表；1.8之后数据结构是数组+链表+红黑树</li><li>阈值（边界值）》8且数组长度大于64，才将链表转换为红黑树，变为红黑树的目的是为了更高效的查询。</li></ul><h3 id="1-4、Hash和Hash算法"><a href="#1-4、Hash和Hash算法" class="headerlink" title="1.4、Hash和Hash算法"></a>1.4、Hash和Hash算法</h3><blockquote><p>Hash也称散列、哈希，基本原理就是把任意长度的输入，通过Hash算法变为固定长度的输出，这个映射的规则就是对应的Hash算法，而原始数据映射后的二进制串就是哈希值。</p><p>Hash的特点：</p></blockquote><ul><li>从Hash值不能反向推导出原始的数据</li><li>输入数据的微小变化会得到完全不同的Hash值，相同的数据会得到相同的值。</li><li>Hash算法的执行效率要高效，长的文本也能快速计算出Hash值</li><li>Hash算法的冲突概率要小</li></ul><blockquote><p>由于Hash算法的原理是将输入空间的值映射成Hash空间内，而hash值的空间远小于输入的空间，根据抽屉原理，一定会存在不同的输入被映射为相同输出的情况。</p><p>抽屉原理：10个苹果放到9个抽屉中，无论怎么放，我们会发现至少会有一个抽屉里面放不少于两个苹果。</p></blockquote><h2 id="2、HashMap原理"><a href="#2、HashMap原理" class="headerlink" title="2、HashMap原理"></a>2、HashMap原理</h2><h3 id="2-1、HashMap的继承体系"><a href="#2-1、HashMap的继承体系" class="headerlink" title="2.1、HashMap的继承体系"></a>2.1、HashMap的继承体系</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210218123331.png" alt="image-20210218123330894"></p><h3 id="2-3、底层数据结构介绍"><a href="#2-3、底层数据结构介绍" class="headerlink" title="2.3、底层数据结构介绍"></a>2.3、底层数据结构介绍</h3><ul><li>JDK1.7及之前</li></ul><blockquote><p>HashMap底层使用数组 + 链表的形式来实现HashMap，当创建HashMap集合对象时，构造方法中会<strong>创建一个长度为16的Entry[] table</strong>来存储键值对数据。</p></blockquote><ul><li>JDK1.8之后</li></ul><blockquote><p>HashMap底层使用数组 + 链表 + 红黑树来实现HashMap，在JDK8之后不再使用HashMap的构造方法底层创建数组了，而是在第一次使用put存储时才创建数组，使用Node[] table来存储键值对数据。</p></blockquote><h3 id="2-4、Hash表使用什么算法计算hash值？"><a href="#2-4、Hash表使用什么算法计算hash值？" class="headerlink" title="2.4、Hash表使用什么算法计算hash值？"></a>2.4、Hash表使用什么算法计算hash值？</h3><ul><li>底层采用的是key的hashCode方法的值结合数组长度进行无符号右移(&gt;&gt;&gt;),按位异或(^),按位与(&amp;)计算出索引</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>还可以使用平方取中法、取余数、伪随机数法计算hash值</p></li><li><p>为什么底层采用的无符号右移、按位异或、按位与而不是采用取余呢？</p></li></ul><blockquote><p>其他计算方式效率比较低，而上述位运算效率较高。</p></blockquote><h3 id="2-5、put数据原理分析"><a href="#2-5、put数据原理分析" class="headerlink" title="2.5、put数据原理分析"></a>2.5、put数据原理分析</h3><ul><li>map.put(“芜湖”,”起飞”);</li><li>获取键”芜湖”字符串的Hash值</li><li>经过hash值扰动函数，使此hash值更散列</li><li>构造出Node对象</li><li>通过路由算法，找出Node应当存放在数组中的位置</li></ul><blockquote><p>路由寻址公式：(table.length - 1) &amp; node.hash</p><p>这里要注意，table数组的大小为2^n</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210218220841.png" alt="2021-02-18_220529"></p><h3 id="2-6、什么是Hash碰撞"><a href="#2-6、什么是Hash碰撞" class="headerlink" title="2.6、什么是Hash碰撞"></a>2.6、什么是Hash碰撞</h3><blockquote><p>如果两个输入串的hash函数的值一样，则称这两个串是一个碰撞(Collision)。既然是把任意长度的字符串变成固定长度的字符串，所以必有一个输出串对应无穷多个输入串，碰撞是必然存在的。</p><p>即元素的key不同，但得出的hash值相同</p></blockquote><h3 id="2-7、什么引入红黑树？"><a href="#2-7、什么引入红黑树？" class="headerlink" title="2.7、什么引入红黑树？"></a>2.7、什么引入红黑树？</h3><blockquote><p>在jdk8之前HashMap的实现是数组＋链表，即使哈希函数取得再好，也很难达到元素百分百均匀分布。当HashMap中有大量的元素都存放在同一个桶中时，这个桶下有一条长长的链表，这个时候HashMap就相当于一个单链表，假如单链表有n个元素，遍历的时间复杂度就是O(n)，完全失去了它的优势。针对这种情况，JDK1.8中引入了红黑树（查找时间复杂度为O(logn)）来优化这个问题。当链表长度很小的时候，即使遍历，速度也非常快，但是当链表长度不断变长，肯定会对查询性能有一定的影响，所以才需要转成树。</p></blockquote><h2 id="3、HashMap源码分析"><a href="#3、HashMap源码分析" class="headerlink" title="3、HashMap源码分析"></a>3、HashMap源码分析</h2><h3 id="3-1、核心属性分析"><a href="#3-1、核心属性分析" class="headerlink" title="3.1、核心属性分析"></a>3.1、核心属性分析</h3><blockquote><p>DEFAULT_INITIAL_CAPACITY</p></blockquote><ul><li>table数组的默认大小，当使用无参函数构造HashMap时，HashMap对象的大小默认为16</li></ul><blockquote><p>TREEIFY_THRESHOLD</p></blockquote><ul><li>树化阈值之一，默认为8</li></ul><blockquote><p>UNTREEIFY_THRESHOLD</p></blockquote><ul><li>树降级为链表的阈值，默认为6</li></ul><blockquote><p>MIN_TREEIFY_CAPACITY</p></blockquote><ul><li>树化阈值之一，只有当table数组中元素大小超过这个值时，数组中长度大于TREEIFY_THRESHOLD的链表才能转换为红黑树。</li></ul><blockquote><p>transient Node&lt;K,V&gt;[] table</p></blockquote><ul><li>ashmap中维护的散列表结构，是一个Node数组</li><li>JDK1.8后，HashMap对象在被构造出来时不初始化散列表，而是等到第一次往该对象中put键值对时才初始化散列表。</li></ul><blockquote><p>transient int size</p></blockquote><ul><li>当前哈希表中的元素个数，即HashMap对象中键值对个数。</li></ul><blockquote><p>transient int modCount</p></blockquote><ul><li>当前hash表结构的修改次数,往hashMap中放入一个键值对，删除一个键值对时，modCount+1，但使用相同key，不同value的Node覆盖旧值时，modCount不会+1</li></ul><blockquote><p>threshold</p></blockquote><ul><li>扩容阈值，当Hash表中的元素超过此值时触发扩容</li><li>threshold = capacity * loadFactory，其中capacity表示当前hash表的数组长度</li></ul><blockquote><p>loadFactory</p></blockquote><ul><li>负载因子，默认负载因子大小为0.75</li></ul><h3 id="3-2、构造方法分析"><a href="#3-2、构造方法分析" class="headerlink" title="3.2、构造方法分析"></a>3.2、构造方法分析</h3><ul><li>构造方法一，自定义初始化大小和负载因子</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tableSizeFor(initialCapacity)方法，<strong>就是返回一个大于等于当前capacity的一个数字，这个数字一定是2的次方数。</strong></p><p>假设传入的cap为10</p><p>那么n = cap - 1 = 9</p><p>将n转换为二进制，n变为1001</p><p>n &gt;&gt;&gt; 1 = 0100，右移就是在1001的最前面补上一个0，使其变为01001，然后截去最后一位，变为0100，而1001 | 0100 = 1101，此时n = 1101</p><p>同理可得1101 &gt;&gt;&gt; 2 = 0011，1101 | 0011 = 1111</p><p>同理可得1111  &gt;&gt;&gt;&gt; 4 = 0000，1111 | 0000 = 1111</p><p>此时n&gt;&gt;&gt;8、n&gt;&gt;&gt;16的结果和上面一致，故n = 1111(2) = 15(10)</p><p>最后执行return语句，此时返回15 + 1 = 16，为2^ 4</p><p>如果不减一，那么会得到一个比预期结果大一倍的数字</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>构造方法二：自定义初始化大小，调用了上面的构造方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>构造方法三：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>构造方法四：根据传入的Map构造HashMap</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3、put方法分析"><a href="#3-3、put方法分析" class="headerlink" title="3.3、put方法分析"></a>3.3、put方法分析</h3><blockquote><p>分析源码可知，put方法内部调用了putVal方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>hash(key)方法，扰动函数，作用是让key的hash值的高16位也参与运算，增加散列性，减少hash冲突的概率。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>核心putVal方法</p><p>注意：这里HashMap实现了延迟初始化，即new HashMap的时候不创建散列表，等到第一次往hashMap中put键值对时才初始化，节省了内存空间。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//tab：引用当前hashMap的散列表</span></span><br><span class="line"><span class="comment">//p：表示当前散列表的元素</span></span><br><span class="line"><span class="comment">//n：表示散列表数组的长度</span></span><br><span class="line"><span class="comment">//i：表示路由寻址结果的下标</span></span><br><span class="line">      Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">      <span class="comment">//如果当前hashmap中的散列表为null，或者散列表长度为0</span></span><br><span class="line">      <span class="comment">//n = (tab = resize()).length;创建散列表</span></span><br><span class="line">      <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">          n = (tab = resize()).length;</span><br><span class="line">      <span class="comment">//i = (n - 1) &amp; hash，使用路由寻址算法计算出要当前键值对要存放的位置</span></span><br><span class="line">      <span class="comment">//如果散列表中该下标对应元素为null，那么就new 一个Node节点</span></span><br><span class="line">      <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">          tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//e：node临时元素</span></span><br><span class="line"><span class="comment">//k：表示临时的一个key</span></span><br><span class="line">          Node&lt;K,V&gt; e; K k;</span><br><span class="line">          <span class="comment">//表示桶位中的该元素，与你当前插入的元素的key完全一致，表示后续需要进行替换操作。</span></span><br><span class="line">          <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">              ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">              e = p;</span><br><span class="line">          <span class="comment">//如果要插入的桶位对应的元素已经树化，即要插入的位置不是一根链表而是一棵红黑树</span></span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">              e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">          <span class="comment">//如果不是树也不相等，那么只能是链表了</span></span><br><span class="line">          <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//循环遍历找到的链表，如果链表中有key与待插入键值对相同的元素，那么用新的值替换旧的值</span></span><br><span class="line">              <span class="comment">//否则将待插入元素加入到该链表中</span></span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                  <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                      p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                      <span class="comment">//表示当前链表中的元素大于临界值，此时可能需要树化</span></span><br><span class="line">                      <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                          treeifyBin(tab, hash);</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="comment">//找到了含有相同key的元素，需要进行替换操作</span></span><br><span class="line">                  <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                      ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  p = e;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//如果e不为null，说明找到了一个与你插入元素key完全一致的元素，需要替换</span></span><br><span class="line">          <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">              V oldValue = e.value;</span><br><span class="line">              <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                  e.value = value;</span><br><span class="line">              afterNodeAccess(e);</span><br><span class="line">              <span class="keyword">return</span> oldValue;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//让散列表被修改的次数+1</span></span><br><span class="line">      ++modCount;</span><br><span class="line">      <span class="comment">//如果size自增后值大于扩容阈值，则触发扩容。</span></span><br><span class="line">      <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">          resize();</span><br><span class="line">      afterNodeInsertion(evict);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结如下：</p></blockquote><ul><li>先通过hash值计算出key映射到哪个桶</li><li>如果桶上没有Hash冲突，则直接插入</li><li>如果出现hash冲突，则需要处理冲突<ul><li>如果该桶采用红黑树处理冲突，则调用红黑树的方法插入数据。</li><li>否则采用传统的链式方法插入，如果链表长度达到临界值且桶个数达到64个，则把链变为红黑树。</li></ul></li><li>如果桶中存在重复的值，则为该键替换新值value</li><li>如果size大于阈值threshold，则进行扩容</li></ul><blockquote><p>具体方法如下：</p><p>hash(key)，获取key的hash值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> h;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1)如果key等于null;</span></span><br><span class="line"><span class="comment">可以看到当key等于null的时候也是有哈希值的，返回的是0.</span></span><br><span class="line"><span class="comment">2)如果key不等于null;</span></span><br><span class="line"><span class="comment">首先计算出key的hashCode赋值给h,然后与h无符号右移16位后的二进制进行按位异或得到最后的hash值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在putVal函数中使用了上述hash函数计算出的hash值，根据公式(n - 1) &amp; hash来决定要放入哪个桶中，其中n为HashMap对象中的桶个数（数组长度）。</p><ul><li>&amp;（按位与运算）：运算规则：相同二进制位上，都是1的时候，结果为1，否则为0。</li><li>^（按位异或运算）：运算规则：相同的二进制数位上，数字相同，结果为0，不同则为1。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent, <span class="keyword">boolean</span> evict)</span></span>&#123;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">if</span>((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)<span class="comment">//这里的n表示数组的长度16</span></span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4、resize扩容方法分析"><a href="#3-4、resize扩容方法分析" class="headerlink" title="3.4、resize扩容方法分析"></a>3.4、resize扩容方法分析</h3><blockquote><p>为什么需要扩容？</p><p>为了解决因哈希冲突而导致的链化影响查询效率的问题，扩容可以缓解这个问题。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    <span class="comment">//odTab引用未扩容的哈希表</span></span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="comment">//oldCap：表示扩容前的table数组长度</span></span><br><span class="line">    <span class="comment">//如果扩容前的table为空，则oldCap = 0</span></span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="comment">//表示扩容前的扩容阈值，触发本词扩容的阈值</span></span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="comment">//newCap：扩容之后想要达到的大小</span></span><br><span class="line">    <span class="comment">//newThr：扩容后再次触发扩容的条件</span></span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//如果oldCap&gt;0，那么证明哈希表中的散列表已经被初始化过了</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//如果扩容前数组长度已经达到HashMap定义的最大值，此时无法扩容</span></span><br><span class="line">        <span class="comment">//将扩容阈值赋值为Integer类型的最大值后返回旧的散列表</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//令newCap = 2 * oldCap，如果扩容后的newCap小于HashMap规定的最小值且原来的oldCap大于等于默认初始化大小，让新的扩容阈值 = 2 * 原来的扩容阈值</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这里和下面两种情况均说明oldCap == 0</span></span><br><span class="line">    <span class="comment">//会执行这一步的情况如下：</span></span><br><span class="line">    <span class="comment">//1 new HashMap(initCap,loadFactory)</span></span><br><span class="line">    <span class="comment">//2 new HashMap(initCap)</span></span><br><span class="line">    <span class="comment">//3 new HashMap(map)，并且这个map有数据</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="comment">//oldCap == 0</span></span><br><span class="line">    <span class="comment">//执行这一步的情况如下</span></span><br><span class="line">    <span class="comment">//new HashMap()</span></span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;<span class="comment">//16</span></span><br><span class="line">        <span class="comment">//12</span></span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//newThr为0时，通过负载因子和扩容后的容量计算得到结果</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将扩容阈值设置为newThr</span></span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="comment">//根据newCap创建一个新的Node数组</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="comment">//此条件说明Hashmap在本次扩容之前不为null，里面可能有数据</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="comment">//说明当前桶位有数据，但具体是单个数据、链表还是树尚未得知</span></span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//方便jvm回收内存</span></span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">//表示该桶位中只有一个元素，从未发生过Hash碰撞</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="comment">//直接计算出当前元素应该存放在新数组中的位置，然后放进去</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="comment">//当前的桶位存放了一个树</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="comment">//桶位已经形成链表</span></span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    <span class="comment">//低位链表：存放在扩容之后的数组的下标位置，与当前数组的下标位置一致</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">//高位链表：存放再扩容之后的数组的下标位置为当前数组下标位置+扩容之前数组的长度</span></span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="comment">//如果等于0，那么证明放在低位桶</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//不为0则放在高位桶</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>HashMap的扩容是什么?</p></blockquote><ul><li><p><strong>进行扩容，会伴随着一次重新hash分配，并且会遍历hash表中所有的元素，是非常耗时的。在编写程序中，要尽可能避免resize。</strong></p></li><li><p><strong>HashMap在进行扩容时，使用的rehash方式非常巧妙，因为每次扩容都是翻倍，与原来计算的（n-1）&amp;hash的结果相比，只是多了一个bit位，所以节点要么就在原来的位置，要么就被分配到”原位置+旧容量”这个位置。</strong></p></li><li><p><strong>怎么理解呢？例如我们从16扩展为32时，具体的变化如下所示：</strong></p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210218232608.png" alt="image-20210218232607701"></p><blockquote><p><strong>扩容之后的索引位要么是原来索引，要么是原来索引+旧数组容量<br>因此元素在重新计算hash之后，因为n变为2倍，那么n-1的标记范围在高位多1bit（红色），因此新的index就会发生这样的变化：</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210218232714.png" alt="image-20210218232713970"></p><blockquote><p>*说明：5是假设计算出来的原来的索引。这样就验证了上述描述的：扩容之后所以节点要么放在原来的位置，要么被分配到<strong>“原位置+旧容量”**这个位置。<br>因此，我们在扩容HashMap的时候，不需要重新计算hash，只需要看看原来的hash值新增的那个bit是1还是0就可以了，是0的话索引就不变，是1的话索引变成</strong>“原索引+oldCap(原位置+旧容量)”**。可以看看下图为16扩容为32的resize示意图：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210218232749.png" alt="image-20210218232749785"></p><blockquote><p>正是因为这样巧妙的rehash方式，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以认为是随机的，在resize的过程中保证了rehash之后每个桶上的节点数一定小于等于原来桶上的节点数，保证了rehash之后不会出现更严重的hash冲突，均匀的把之前hash冲突的节点分散到新的桶中了。</p></blockquote><h3 id="3-5、get方法分析"><a href="#3-5、get方法分析" class="headerlink" title="3.5、get方法分析"></a>3.5、get方法分析</h3><blockquote><p>实现思路</p></blockquote><ul><li>计算传入key的hash值</li><li>通过hash值获取该key映射到的桶</li><li>桶上的key正好是要删除的key，则直接找到并返回</li><li>桶商的key不是要找的key，则查看后续节点<ul><li>如果后续节点是红黑树节点，则通过调用红黑树方法根据key获取value</li><li>如果后续节点是链表节点，则通过循环遍历链表根据key获取value</li></ul></li></ul><blockquote><p>get方法中调用了getNode方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>getNode方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//tab：引用当前HashMap的散列表</span></span><br><span class="line">    <span class="comment">//first：桶位中的头元素</span></span><br><span class="line">    <span class="comment">//e：临时Node元素</span></span><br><span class="line">    <span class="comment">//n：table数组长度</span></span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="comment">//散列表不为空且table数组中hash对应的桶不为空时才进行取元素</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//说明路由寻址出来的桶的头元素就是要寻找的值</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">//寻找出来的桶位不是单个元素，且头元素不是我们要找的，此时桶位元素可能是一条链表或一棵红黑树</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//桶位元素升级成了红黑树</span></span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="comment">//桶位元素是一条链表</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">//遍历整个链表，找到就返回，否则跳出循环返回null</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6、remove方法分析"><a href="#3-6、remove方法分析" class="headerlink" title="3.6、remove方法分析"></a>3.6、remove方法分析</h3><blockquote><p>remove方法底层调用了removeNode方法</p><p>思路</p></blockquote><ul><li>根据传入的key计算出key的hash值</li><li>再根据路由寻址公式(n - 1) &amp; hash找到桶的位置<ul><li>如果找到的桶是链表，则遍历链表使用equals方法找到元素后删除，</li><li>如果是红黑树就需要遍历树然后删除元素，桶元素小于6后转为链表。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</span><br><span class="line">        <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>removeNode方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//tab：引用当前hashMap的散列表</span></span><br><span class="line">       <span class="comment">//p：当前node元素</span></span><br><span class="line">       <span class="comment">//n：表示散列表数组长度</span></span><br><span class="line">       <span class="comment">//index：表示寻址结果</span></span><br><span class="line">       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, index;</span><br><span class="line">       <span class="comment">//只有当散列表不为空且table数组中寻址结果对应的桶不为空时，才继续删除</span></span><br><span class="line">       <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">           (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">           Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; K k; V v;</span><br><span class="line">           <span class="comment">//如果寻址结果对应的桶元素就是要删除的Node，此时将p赋值给node</span></span><br><span class="line">           <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">               ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">               node = p;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">//表示桶位中的元素是一棵红黑树</span></span><br><span class="line">               <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                   node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">               <span class="comment">//表示桶位中的元素是一条链表</span></span><br><span class="line">               <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="keyword">do</span> &#123;</span><br><span class="line">                       <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                           ((k = e.key) == key ||</span><br><span class="line">                            (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                           node = e;</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       p = e;</span><br><span class="line">                   &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//上面的代码是为了找到要删除的元素，然后将其赋给node引用</span></span><br><span class="line">           <span class="comment">//当node不为空时进行删除</span></span><br><span class="line">           <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                                (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">               <span class="comment">//根据node的类型删除</span></span><br><span class="line">               <span class="comment">//node是一个树节点</span></span><br><span class="line">               <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                   ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</span><br><span class="line">               <span class="comment">//让table[寻址结果]指向node的下一个节点，这个节点可能为空，可能为一个Node</span></span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                   tab[index] = node.next;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                   <span class="comment">//如果node在一条链表中，就按照链表的删除方式删除此node</span></span><br><span class="line">                   p.next = node.next;</span><br><span class="line">               <span class="comment">//modCount++</span></span><br><span class="line">               ++modCount;</span><br><span class="line">               <span class="comment">//散列表中元素个数-1</span></span><br><span class="line">               --size;</span><br><span class="line">               </span><br><span class="line">               afterNodeRemoval(node);</span><br><span class="line">               <span class="keyword">return</span> node;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="3-7、replace方法分析"><a href="#3-7、replace方法分析" class="headerlink" title="3.7、replace方法分析"></a>3.7、replace方法分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">replace</span><span class="params">(K key, V oldValue, V newValue)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e; V v;</span><br><span class="line">    <span class="keyword">if</span> ((e = getNode(hash(key), key)) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">        ((v = e.value) == oldValue || (v != <span class="keyword">null</span> &amp;&amp; v.equals(oldValue)))) &#123;</span><br><span class="line">        e.value = newValue;</span><br><span class="line">        afterNodeAccess(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个replace传入三个参数，只有当key匹配且oldValue等于HashMap中键值对的值时，才使用newValue进行替换。</p></blockquote><p>本文参考自：</p><ul><li><p>[1]  <a href="https://www.bilibili.com/video/BV1LJ411W7dP">小刘讲源码</a></p></li><li><p>[2]  <a href="https://blog.csdn.net/qq_38616503/article/details/111218480">Java进阶之HashMap</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法学习（五）-雪花算法生成唯一ID</title>
      <link href="posts/3410178450.html"/>
      <url>posts/3410178450.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>面试题: 集群高并发情况下如何保证分布式唯一全局ID生成?</p></blockquote><h2 id="1、问题"><a href="#1、问题" class="headerlink" title="1、问题"></a>1、问题</h2><h3 id="1-1、为什么需要分布式全局唯一ID以及分布式ID的业务需求"><a href="#1-1、为什么需要分布式全局唯一ID以及分布式ID的业务需求" class="headerlink" title="1.1、为什么需要分布式全局唯一ID以及分布式ID的业务需求"></a>1.1、为什么需要分布式全局唯一ID以及分布式ID的业务需求</h3><blockquote><p>在复杂分布式系统中，往往需要对大量的数据和消息进行唯一标识。</p><p>如在美团点评的金融、支付、餐饮、酒店；</p><p>猫眼电影等产品的系统中数据日渐增长，对数据分库分表后需要有一个唯一ID来表示一条数据或者消息。</p><p>特别一点的如订单、骑手、优惠劵也都需要一个唯一ID做为标识。</p><p>此时一个能<strong>生成唯一ID的系统是非常必要的</strong>。</p></blockquote><h3 id="1-2、ID生成规则部分硬性要求"><a href="#1-2、ID生成规则部分硬性要求" class="headerlink" title="1.2、ID生成规则部分硬性要求"></a>1.2、ID生成规则部分硬性要求</h3><ul><li>全局唯一</li></ul><blockquote><p>既然是唯一标识，那么<strong>全局唯一是最基本的要求</strong>。</p></blockquote><ul><li>趋势递增</li></ul><blockquote><p>在MySQL的InnoDB引擎中使用的是聚集索引，由于多数RDBMS使用Btree的数据结构来存储索引数据，在主键的选择上面我们应该尽量使用有序的主键来保证写入性能。</p></blockquote><ul><li>单调递增</li></ul><blockquote><p>保证下一个ID一定大于上一个ID，例如事务版本号、IM增量消息、排序等特殊需求。</p></blockquote><ul><li>信息安全</li></ul><blockquote><p>如果ID是连续的，那么恶意用户的扒取工作就非常容易做了，直接按照顺序下载指定URL即可；</p><p>如果是订单号那么更加危险，竞争对手可以知道我们一天的单量。</p><p>所以在一些应用场景下，需要ID无规则不规则，让竞争对手不好猜。</p></blockquote><ul><li>含时间戳</li></ul><blockquote><p>这样就能在开发中快速了解这个分布式ID的生成时间。</p></blockquote><h3 id="1-3、ID生成系统的可用性要求"><a href="#1-3、ID生成系统的可用性要求" class="headerlink" title="1.3、ID生成系统的可用性要求"></a>1.3、ID生成系统的可用性要求</h3><ul><li>高可用</li></ul><blockquote><p>发一个获取分布式ID的请求，服务器就要保证99.999%的情况下给我创建一个唯一分布式ID</p></blockquote><ul><li>低延迟</li></ul><blockquote><p>发一个获取分布式ID的请求，服务器就要快，极速</p></blockquote><ul><li>高QPS</li></ul><blockquote><p>假如并发一口气10万个创建分布式ID请求同时过来，服务器需要顶得住且成功创建10万个分布式ID</p></blockquote><h2 id="2、一般通用方案"><a href="#2、一般通用方案" class="headerlink" title="2、一般通用方案"></a>2、一般通用方案</h2><h3 id="2-1、UUID"><a href="#2-1、UUID" class="headerlink" title="2.1、UUID"></a>2.1、UUID</h3><ul><li>是什么？</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String uuid = UUID.randomUUID().toString();</span><br><span class="line">    System.out.println(uuid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210217110837.png" alt="image-20210217110837065"></p><blockquote><p>如果只是考虑唯一性，那么UUID基本可以满足需求。</p></blockquote><ul><li>缺点：入数据库性能差，原因如下</li></ul><blockquote><p>1 无序，无法预测他的生成顺序，不能生成递增有序的数字</p><p>2 主键，ID作为主键时在特定的环境下会存在一些问题，比如做DB主键的场景下，UUID非常不适用，MySQL官方有明确的建议主键要尽量越短越好，36位的UUID不合要求。</p><p>3 索引，会导致B+树索引的分裂。</p></blockquote><h3 id="2-2、数据库自增主键"><a href="#2-2、数据库自增主键" class="headerlink" title="2.2、数据库自增主键"></a>2.2、数据库自增主键</h3><blockquote><p>在高并发集群上此策略不可用。</p></blockquote><h3 id="2-3、基于Redis生成全局ID策略"><a href="#2-3、基于Redis生成全局ID策略" class="headerlink" title="2.3、基于Redis生成全局ID策略"></a>2.3、基于Redis生成全局ID策略</h3><ul><li>因为Redis是单线程，天生保证原子性，所以可以使用INCR和INCRBY来实现。</li><li>集群分布式</li></ul><blockquote><p>在Redis集群下，同样和MySQL一样需要<strong>设置不同的增长步数</strong>，同时key需要设置有效期。</p><p>可以使用Redis集群来获取更高的吞吐量。</p><p>假如一个集群中有五个Redis，那么初始化每台Redis步长分别是1，2，3，4，5，然后步长都是5。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210217113313.png" alt="image-20210217113312811"></p><h2 id="3、snowflake"><a href="#3、snowflake" class="headerlink" title="3、snowflake"></a>3、snowflake</h2><h3 id="3-1、概述"><a href="#3-1、概述" class="headerlink" title="3.1、概述"></a>3.1、概述</h3><ul><li><p>雪花算法是推特的分布式唯一ID生成算法。</p></li><li><p>经测试雪花算法每秒钟可以生产26万个自增可排序的ID</p></li></ul><blockquote><p>1 推特的雪花算法生成ID能够按照时间有序生成。</p><p>2 雪花算法生成ID的结果是一个64bit大小的整数，为一个Long型（转换为字符串后长度最多19）</p><p>3 分布式系统内不会产生ID碰撞（由datecenter和workerId作区分），并且效率较高。</p></blockquote><ul><li>分布式系统中，有一些需要使用全局唯一ID的场景，生成ID的基本需求</li></ul><blockquote><p>1 分布式环境下必须全局且唯一。</p><p>2 一般都需要单调递增，因为一般唯一ID都会存到数据库，而lnnodb的特性就是将内容存储在主键索引树上的叶子节点，而且是从左往右，递增的，所以考虑到数据库性能，一般生成的id也最好是单调递增。为了防止ID冲突可以使用36位的UUID，但是UUID有一些缺点，首先他相对比较长，另外UUID般是无序的。</p><p>3 可能还会需要无规则，因为如果使用唯一lD作为订单号这种，为了不然别人知道一天的订单量是多少，就需要这个规则。</p></blockquote><h3 id="3-2、结构"><a href="#3-2、结构" class="headerlink" title="3.2、结构"></a>3.2、结构</h3><blockquote><p>雪花算法的几个核心组成部分</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210217114752.png" alt="image-20210217114752319"></p><blockquote><p>号段解析</p></blockquote><ul><li><p>1bit符号位：不用，因为二进制最高位是符号位，1表示负数，0表示正数，生成的id一般都是用正数，所以最高位固定位0</p></li><li><p>41bit时间戳，用于记录时间戳，毫秒级</p><ul><li>41位可以表示2^41 - 1个数字</li><li>如果只用来表示正整数（计算机正数包含0），可以表示的数值范围是0-2^41 - 1，<strong>减一是因为可表示的数值范围是从0开始算的，而不是1</strong></li><li>也就是说41位可以表示2^41 - 1个毫秒的值，转换为单位年则是69年。</li></ul></li><li><p>10bit工作进程位，用于记录工作机器id</p><ul><li>可以部署在2^10 = 1024个节点，包括五位datacenterId和五位workerId</li><li>五位可以表示的最大整数位2^5 - 1 = 31，即可以使用0，1，2…31这32个数字来表示不同的datacenterId和workerId</li></ul></li><li><p>12bit序列号，序列号，用来记录同<strong>毫秒内</strong> 产生的不同的ID</p><ul><li>12bit可以表示的最大正整数位2^12 - 1 = 4095，即可以表示0，1….4094这4095个数字</li><li>表示同一机器同一时间戳（毫秒）中产生的4095个ID序号</li></ul></li></ul><blockquote><p>雪花算法可以保证</p></blockquote><ul><li>所有生成的id按时间趋势递增</li><li>整个分布式内不会产生重复id，因为有datacenterId和workerId来做区分。</li></ul><h3 id="3-3、源码"><a href="#3-3、源码" class="headerlink" title="3.3、源码"></a>3.3、源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * twitter的snowflake算法 -- java实现</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> beyond</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016/11/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowFlake</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 起始的时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> START_STMP = <span class="number">1480166465631L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每一部分占用的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> SEQUENCE_BIT = <span class="number">12</span>; <span class="comment">//序列号占用的位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MACHINE_BIT = <span class="number">5</span>;   <span class="comment">//机器标识占用的位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> DATACENTER_BIT = <span class="number">5</span>;<span class="comment">//数据中心占用的位数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每一部分的最大值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MAX_DATACENTER_NUM = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; DATACENTER_BIT);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MAX_MACHINE_NUM = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; MACHINE_BIT);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MAX_SEQUENCE = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; SEQUENCE_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每一部分向左的位移</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MACHINE_LEFT = SEQUENCE_BIT;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> datacenterId;  <span class="comment">//数据中心</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> machineId;     <span class="comment">//机器标识</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequence = <span class="number">0L</span>; <span class="comment">//序列号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastStmp = -<span class="number">1L</span>;<span class="comment">//上一次时间戳</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SnowFlake</span><span class="params">(<span class="keyword">long</span> datacenterId, <span class="keyword">long</span> machineId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (datacenterId &gt; MAX_DATACENTER_NUM || datacenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;datacenterId can&#x27;t be greater than MAX_DATACENTER_NUM or less than 0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (machineId &gt; MAX_MACHINE_NUM || machineId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;machineId can&#x27;t be greater than MAX_MACHINE_NUM or less than 0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.datacenterId = datacenterId;</span><br><span class="line">        <span class="keyword">this</span>.machineId = machineId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 产生下一个ID</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> currStmp = getNewstmp();</span><br><span class="line">        <span class="keyword">if</span> (currStmp &lt; lastStmp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Clock moved backwards.  Refusing to generate id&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (currStmp == lastStmp) &#123;</span><br><span class="line">            <span class="comment">//相同毫秒内，序列号自增</span></span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; MAX_SEQUENCE;</span><br><span class="line">            <span class="comment">//同一毫秒的序列数已经达到最大</span></span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0L</span>) &#123;</span><br><span class="line">                currStmp = getNextMill();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//不同毫秒内，序列号置为0</span></span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        lastStmp = currStmp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (currStmp - START_STMP) &lt;&lt; TIMESTMP_LEFT <span class="comment">//时间戳部分</span></span><br><span class="line">                | datacenterId &lt;&lt; DATACENTER_LEFT       <span class="comment">//数据中心部分</span></span><br><span class="line">                | machineId &lt;&lt; MACHINE_LEFT             <span class="comment">//机器标识部分</span></span><br><span class="line">                | sequence;                             <span class="comment">//序列号部分</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getNextMill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> mill = getNewstmp();</span><br><span class="line">        <span class="keyword">while</span> (mill &lt;= lastStmp) &#123;</span><br><span class="line">            mill = getNewstmp();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getNewstmp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SnowFlake snowFlake = <span class="keyword">new</span> SnowFlake(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; <span class="number">12</span>); i++) &#123;</span><br><span class="line">            System.out.println(snowFlake.nextId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试，使用雪花算法生成id</p></blockquote><ul><li>构造SnowFlake对象，构造方法中传入一个datacenterId和workerId</li><li>使用SnowFlake对象的nextId方法生成唯一Id</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试使用雪花算法生成ID</span></span><br><span class="line"><span class="comment">//构造函数中传入datacenterId和workerId</span></span><br><span class="line">SnowFlake snowFlake = <span class="keyword">new</span> SnowFlake(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">long</span> id = snowFlake.nextId();</span><br><span class="line">    System.out.println(<span class="string">&quot;id：&quot;</span> + id + <span class="string">&quot;\t&quot;</span> + String.valueOf(id).length() + <span class="string">&quot;位&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210217143342.png" alt="image-20210217143341390"></p><h3 id="3-4、Spring-Boot整合雪花算法"><a href="#3-4、Spring-Boot整合雪花算法" class="headerlink" title="3.4、Spring Boot整合雪花算法"></a>3.4、Spring Boot整合雪花算法</h3><blockquote><p>引入<strong>hutool-all</strong>，maven依赖引入如下</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用SnowFlake对象的nextId方法即可生成唯一ID</p></blockquote><ul><li>创建一个SnowFlake配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowFlakeConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;application.datacenterId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long datacenterId;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;application.workerId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long workerId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 注入一个生成雪花ID的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Snowflake <span class="title">snowflake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Snowflake(workerId,datacenterId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>yml配置文件</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">application:</span></span><br><span class="line">  <span class="attr">datacenterId:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">workerId:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7777</span></span><br></pre></td></tr></table></figure><ul><li>Service层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Snowflake snowflake;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIdBySnowFlake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(snowflake.nextId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Controller层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/snowflake&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderService.getIdBySnowFlake();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动主启动类，访问<a href="http://localhost:7777/snowflake">http://localhost:7777/snowflake</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210217151414.png" alt="image-20210217151414112"></p><h3 id="3-4、优点"><a href="#3-4、优点" class="headerlink" title="3.4、优点"></a>3.4、优点</h3><blockquote><ul><li>毫秒数在高位，自增序列在低位，整个ID都是趋势递增的</li><li>不依赖数据库、redis等第三方系统，以服务的方式部署，稳定性更高，生成ID的性能也是非常高的。</li><li>可以根据自身业务分配bit位，非常灵活。</li></ul></blockquote><h3 id="3-5、缺点"><a href="#3-5、缺点" class="headerlink" title="3.5、缺点"></a>3.5、缺点</h3><blockquote><ul><li><strong>依赖机器时钟，如果机器时钟回退，会导致重复ID生成</strong></li><li>在单机上是递增的，但是由于设计到分布式环境，每台机器上的时钟不可能完全同步，有时候会出现不是全局递增的情况。（此缺点可以认为芜锁胃，一般分布式ID只要求趋势递增，并不会严格要求递增，90%的需求都只需要趋势递增）</li></ul></blockquote><h2 id="4、其他补充"><a href="#4、其他补充" class="headerlink" title="4、其他补充"></a>4、其他补充</h2><blockquote><p>雪花算法的改进方案：</p></blockquote><ul><li>百度开源的分布式唯一ID生成器UidGenerator</li><li>Leaf–美团点评分布式ID生成系统</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
            <tag> 👢Spring Boot </tag>
            
            <tag> ❄雪花算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud学习（五）-Nacos服务注册与配置中心</title>
      <link href="posts/87309235.html"/>
      <url>posts/87309235.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、Nacos简介"><a href="#一、Nacos简介" class="headerlink" title="一、Nacos简介"></a>一、Nacos简介</h1><h2 id="1-1、为什么叫Nacos？"><a href="#1-1、为什么叫Nacos？" class="headerlink" title="1.1、为什么叫Nacos？"></a>1.1、为什么叫Nacos？</h2><blockquote><p>前四个字母分别为Naming和Configuration的前两个字母，最后的s为Service。</p></blockquote><h2 id="1-2、是什么？"><a href="#1-2、是什么？" class="headerlink" title="1.2、是什么？"></a>1.2、是什么？</h2><blockquote><p>一个更易于构建云原生应用的动态服务发现，配置管理和服务管理中心</p><p><strong>Nacos</strong>就是<strong>注册中心</strong>+<strong>配置中心</strong>的组合</p></blockquote><h2 id="1-3、能干嘛？"><a href="#1-3、能干嘛？" class="headerlink" title="1.3、能干嘛？"></a>1.3、能干嘛？</h2><blockquote><p>替代Eureka做服务注册中心</p><p>替代Config做微服务配置中心</p></blockquote><h1 id="二、安装并运行Nacos"><a href="#二、安装并运行Nacos" class="headerlink" title="二、安装并运行Nacos"></a>二、安装并运行Nacos</h1><blockquote><p>进入Nacos的官网下载，地址：<a href="http://nacos.io/">http://nacos.io</a></p></blockquote><ul><li>启动，打开nacos/bin，windows环境下点击startup.cmd启动nacos</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210215154748.png" alt="image-20210215154741130"></p><ul><li>启动后访问localhost:8848/nacos启动nacos</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210215154854.png" alt="image-20210215154854073"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210215154937.png" alt="image-20210215154937350"></p><ul><li>登录后页面如下</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210215155000.png" alt="image-20210215155000197"></p><h1 id="三、Nacos作为服务注册中心演示"><a href="#三、Nacos作为服务注册中心演示" class="headerlink" title="三、Nacos作为服务注册中心演示"></a>三、Nacos作为服务注册中心演示</h1><h2 id="3-1、创建基于Nacos的服务提供者"><a href="#3-1、创建基于Nacos的服务提供者" class="headerlink" title="3.1、创建基于Nacos的服务提供者"></a>3.1、创建基于Nacos的服务提供者</h2><h3 id="1、新建Module"><a href="#1、新建Module" class="headerlink" title="1、新建Module"></a>1、新建Module</h3><blockquote><p>新建cloudalibaba-provider-payment9001</p></blockquote><h3 id="2、引入依赖"><a href="#2、引入依赖" class="headerlink" title="2、引入依赖"></a>2、引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、编写yml配置文件"><a href="#3、编写yml配置文件" class="headerlink" title="3、编写yml配置文件"></a>3、编写yml配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#配置Nacos地址</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4、主启动类"><a href="#4、主启动类" class="headerlink" title="4、主启动类"></a>4、主启动类</h3><blockquote><p>在需要注册入注册中心的模块主启动类上添加@EnableDiscoveryClient注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain9001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain9001.class,args);</span><br><span class="line">        System.out.println(<span class="string">&quot;http://localhost:8848/nacos&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、业务类"><a href="#5、业务类" class="headerlink" title="5、业务类"></a>5、业务类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/nacos/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;nacos registry, serverPort: &quot;</span>+ serverPort+<span class="string">&quot;\t id&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、启动9001微服务，查看nacos控制台"><a href="#6、启动9001微服务，查看nacos控制台" class="headerlink" title="6、启动9001微服务，查看nacos控制台"></a>6、启动9001微服务，查看nacos控制台</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210215161607.png" alt="image-20210215161605817"></p><h3 id="7、仿照9001创建9002微服务，启动查看结果"><a href="#7、仿照9001创建9002微服务，启动查看结果" class="headerlink" title="7、仿照9001创建9002微服务，启动查看结果"></a>7、仿照9001创建9002微服务，启动查看结果</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210215162714.png" alt="image-20210215162714116"></p><h2 id="3-2、创建基于Nacos的服务消费者"><a href="#3-2、创建基于Nacos的服务消费者" class="headerlink" title="3.2、创建基于Nacos的服务消费者"></a>3.2、创建基于Nacos的服务消费者</h2><h3 id="1、新建Module-1"><a href="#1、新建Module-1" class="headerlink" title="1、新建Module"></a>1、新建Module</h3><blockquote><p>新建cloudalibaba-consumer-nacos-order83</p></blockquote><h3 id="2、引入依赖-1"><a href="#2、引入依赖-1" class="headerlink" title="2、引入依赖"></a>2、引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cloudstudy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>为什么Nacos支持负载均衡?</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210215164039.png" alt="image-20210215164039536"></p><h3 id="3、编写yml配置文件-1"><a href="#3、编写yml配置文件-1" class="headerlink" title="3、编写yml配置文件"></a>3、编写yml配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">83</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line"><span class="comment"># 消费者要访问的服务提供者。</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos-payment-provider</span></span><br></pre></td></tr></table></figure><h3 id="4、主启动类-1"><a href="#4、主启动类-1" class="headerlink" title="4、主启动类"></a>4、主启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosMain83</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderNacosMain83.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、业务类-1"><a href="#5、业务类-1" class="headerlink" title="5、业务类"></a>5、业务类</h3><blockquote><p>OrderNacosController</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;service-url.nacos-user-service&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverURL;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/payment/nacos/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(serverURL+<span class="string">&quot;/payment/nacos/&quot;</span>+id,String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ApplicationContextConfig</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、启动83微服务，查看nacos控制台"><a href="#6、启动83微服务，查看nacos控制台" class="headerlink" title="6、启动83微服务，查看nacos控制台"></a>6、启动83微服务，查看nacos控制台</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210215165717.png" alt="image-20210215165716365"></p><h3 id="7、使用83消费者调用服务提供方"><a href="#7、使用83消费者调用服务提供方" class="headerlink" title="7、使用83消费者调用服务提供方"></a>7、使用83消费者调用服务提供方</h3><blockquote><p>访问<a href="http://localhost:83/consumer/payment/nacos/13">http://localhost:83/consumer/payment/nacos/13</a></p></blockquote><ul><li>第一次</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210215165922.png" alt="image-20210215165922630"></p><ul><li>第二次</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210215165950.png" alt="image-20210215165950241"></p><blockquote><p>这样就实现了负载均衡和远程调用</p></blockquote><h2 id="3-3、各种服务注册中心对比"><a href="#3-3、各种服务注册中心对比" class="headerlink" title="3.3、各种服务注册中心对比"></a>3.3、各种服务注册中心对比</h2><h3 id="1、Nacos全景图"><a href="#1、Nacos全景图" class="headerlink" title="1、Nacos全景图"></a>1、Nacos全景图</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210215171620.png" alt="img"></p><h3 id="2、Nacos和CAP"><a href="#2、Nacos和CAP" class="headerlink" title="2、Nacos和CAP"></a>2、Nacos和CAP</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210215171729.png" alt="image-20210215171729262"></p><h1 id="四、Nacos作为服务配置中心演示"><a href="#四、Nacos作为服务配置中心演示" class="headerlink" title="四、Nacos作为服务配置中心演示"></a>四、Nacos作为服务配置中心演示</h1><h2 id="4-1、Nacos作为配置中心–基础配置"><a href="#4-1、Nacos作为配置中心–基础配置" class="headerlink" title="4.1、Nacos作为配置中心–基础配置"></a>4.1、Nacos作为配置中心–基础配置</h2><h3 id="1、新建Module-2"><a href="#1、新建Module-2" class="headerlink" title="1、新建Module"></a>1、新建Module</h3><blockquote><p>创建微服务模块：cloudalibaba-config-nacos-client3377</p></blockquote><h3 id="2、引入依赖-2"><a href="#2、引入依赖-2" class="headerlink" title="2、引入依赖"></a>2、引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、编写yml配置文件-2"><a href="#3、编写yml配置文件-2" class="headerlink" title="3、编写yml配置文件"></a>3、编写yml配置文件</h3><blockquote><p>bootstrap.yml</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nacos配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3377</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># Nacos服务注册中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="comment"># 指定Nacos配置中心的地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 指定yaml格式的配置</span></span><br></pre></td></tr></table></figure><blockquote><p>application.yml</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="comment"># 表示开发环境</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><blockquote><p>为何编写两个配置文件？</p><p>Nacos同Spring Cloud Config一致，在项目初始化时，要保证先从配置中心进行配置拉取，拉取配置后，才能保证项目的正常启动。</p><p>Spring Boot中配置文件的加载是存在优先级顺序的，<strong>bootstrap（全局）优先级高于application（自定义）</strong></p></blockquote><h3 id="4、主启动类-2"><a href="#4、主启动类-2" class="headerlink" title="4、主启动类"></a>4、主启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfigClientMain3377</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosConfigClientMain3377.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、业务类-2"><a href="#5、业务类-2" class="headerlink" title="5、业务类"></a>5、业务类</h3><blockquote><p>@RefreshScope注解用于动态刷新，作用在Controller层</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/config/info&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、Nacos的配置规则"><a href="#6、Nacos的配置规则" class="headerlink" title="6、Nacos的配置规则"></a>6、Nacos的配置规则</h3><ul><li>理论：Nacos中的dataid的组成格式与SpringBoot配置文件中的匹配规则</li></ul><blockquote><p>说明：之所以要配置<em>spring.application.name</em> ，示音为它是构成Nacos配置管理<em>dataId</em>字段的一部分。</p><p>在Nacos Spring Cloud中，dataId的完整格式如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;prefix&#125;-$&#123;spring.profile.active&#125;.$&#123;file-extension&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>prefix</strong> 默认为 <strong>spring.application.name</strong> 的值，也可以通过配置项 <strong>spring.cloud.nacos.config.prefix</strong> 来配置。</li><li><strong>spring.profile.active</strong> 即为当前环境对于的profile，详情可以参考 <a href="https://www.docs4dev.com/docs/zh/spring-boot/2.1.1.RELEASE/reference">Spring Boot文档</a> 注意：当<strong>spring.profile.active</strong> 为空时，对应的 <strong>-</strong> 也将不存在，此时dataId的拼接格式变为 <strong>${prefix}-${file-extension}</strong> ，<strong>file-extension</strong> 为配置内容的数据格式，可以通过配置项 <strong>spring.cloud.nacos.config.file-extension</strong> 来配置，目前只支持<strong>properties</strong>  和 <strong>yaml</strong> 类型。</li><li>通过Spring Cloud原生注解 <strong>@RefreshScope</strong> 实现配置自动更新。</li></ul><blockquote><p>最后公式为：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;spring.application.name&#125;-$&#123;spring.profile.active&#125;.$&#123;file-extension&#125;</span><br></pre></td></tr></table></figure><blockquote><p>根据上面的公式，我们可以得到cloudalibaba-config-nacos-client3377微服务配置的dataId为：<strong>nacos-config-client-dev.yaml</strong></p></blockquote><h3 id="7、实操"><a href="#7、实操" class="headerlink" title="7、实操"></a>7、实操</h3><blockquote><p>在nacos控制台中选择<strong>配置管理</strong>-<strong>配置列表</strong>，点击“+”号添加配置</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210215203233.png" alt="image-20210215203231682"></p><blockquote><p>添加的配置如下：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210215203636.png" alt="image-20210215203636355"></p><h3 id="8、测试"><a href="#8、测试" class="headerlink" title="8、测试"></a>8、测试</h3><blockquote><p>运行cloudalibaba-config-nacos-client3377微服务，调用接口查看配置信息，接口地址为：<a href="http://localhost:3377/config/info">http://localhost:3377/config/info</a></p></blockquote><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210215205027.png" alt="image-20210215205027075"></p><h3 id="9、配置的动态刷新"><a href="#9、配置的动态刷新" class="headerlink" title="9、配置的动态刷新"></a>9、配置的动态刷新</h3><blockquote><p>修改下Nacos中的yaml配置文件，再次调用查看配置的端口，就会发现配置已经刷新。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210215210048.png" alt="image-20210215210048752"></p><blockquote><p>重新调用查看配置的接口，查看配置</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210215210140.png" alt="image-20210215210140349"></p><h2 id="4-2、Nacos作为配置中心–分类配置"><a href="#4-2、Nacos作为配置中心–分类配置" class="headerlink" title="4.2、Nacos作为配置中心–分类配置"></a>4.2、Nacos作为配置中心–分类配置</h2><h3 id="1、问题一"><a href="#1、问题一" class="headerlink" title="1、问题一"></a>1、问题一</h3><blockquote><p>实际开发中，通常一个系统会准备</p><ul><li>dev开发环境</li><li>test测试环境</li><li>prod生产环境</li></ul><p>如何保证指定环境启动时服务能正确读取到Nacos上相应环境的配置文件呢？</p></blockquote><h3 id="2、问题二"><a href="#2、问题二" class="headerlink" title="2、问题二"></a>2、问题二</h3><blockquote><p>一个大型分布式微服务系统会有很多个微服务子项目</p><p>每个微服务又有对应的开发环境、预发环境、测试环境、正式环境…</p><p>那么又怎么对这些配置进行处理呢？</p></blockquote><h3 id="3、什么是分类配置？"><a href="#3、什么是分类配置？" class="headerlink" title="3、什么是分类配置？"></a>3、什么是分类配置？</h3><blockquote><p>类似Java中的package + 类名</p><p>最外层的namespace用于区别部署环境，Group和DataId从逻辑上区分两个对象</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210215212745.png" alt="image-20210215212745121"></p><blockquote><p>默认情况下</p></blockquote><ul><li>Namespace=public</li><li>Group=DEFAULT_GROUP</li></ul><blockquote><p>Nacos默认的命名空间为public，Namespace主要用来隔离，比如说我们有三个（生产、开发、测试）环境，那么我们就可以创建三个Namespace，不同的Namespace之间是隔离的。</p><p>Group默认是DEFAULT_GROUP，Group可以把不同微服务划分到一个分组中。</p><p>Service就是微服务，一个Service可以包括多个Cluster（集群），Nacos默认Cluster是Default，Cluster是对指定微服务的一个虚拟划分。</p><p>比如说为了容灾，将Service微服务分别部署在了杭州机房和广州机房，这个时候给杭州机房的Service微服务起一个集群名称（HZ），给广州计方的Service微服务起一个集群名称（GZ），还可以尽量让同一个机房中的微服务相互调用，提升性能。</p><p>Instance：微服务实例</p></blockquote><h3 id="4、通过DataId读取不同配置"><a href="#4、通过DataId读取不同配置" class="headerlink" title="4、通过DataId读取不同配置"></a>4、通过DataId读取不同配置</h3><blockquote><p>默认空间+默认分组+新建dev和test两个DataId</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210215233720.png" alt="image-20210215233719100"></p><ul><li>修改3377微服务的application.yml配置文件，指定记载环境</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="comment"># 配置什么环境就加载什么配置</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br><span class="line">  <span class="comment"># 表示开发环境</span></span><br><span class="line">    <span class="comment"># active: dev</span></span><br></pre></td></tr></table></figure><blockquote><p>此时读取的配置的DataId为 <strong>nacos-config-client-test.yaml</strong> ，配置为</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210215234528.png" alt="image-20210215234528455"></p><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210215234506.png" alt="image-20210215234506773"></p><h3 id="5、通过Group读取不同配置"><a href="#5、通过Group读取不同配置" class="headerlink" title="5、通过Group读取不同配置"></a>5、通过Group读取不同配置</h3><blockquote><p>新建一个开发组DEV_GROUP</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210215235657.png" alt="image-20210215235657328"></p><blockquote><p>新建一个测试组TEST_GROUP</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210216000114.png" alt="image-20210216000114864"></p><blockquote><p>此时配置列表如下，两个不同组有相同DataId的配置</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210216000529.png" alt="image-20210216000529294"></p><blockquote><p>在bootstrap.yml配置文件中添加一条配置，指定要加载的配置组</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># 配置哪个组就加载哪个组</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">TEST_GROUP</span></span><br></pre></td></tr></table></figure><blockquote><p>同时修改application.yml配置文件中启动的环境</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="comment"># 配置什么环境就加载什么配置</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">info</span></span><br><span class="line">  <span class="comment"># 表示开发环境</span></span><br><span class="line">    <span class="comment"># active: dev</span></span><br></pre></td></tr></table></figure><blockquote><p>重启3377，访问<a href="http://localhost:3377/config/info">http://localhost:3377/config/info</a> ，结果如下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210216001128.png" alt="image-20210216001128542"></p><blockquote><p>修改bootstrap.yml配置文件，重启</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># 配置哪个组就加载哪个组</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEV_GROUP</span></span><br></pre></td></tr></table></figure><blockquote><p>结果为：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210216001326.png" alt="image-20210216001326298"></p><h3 id="6、通过Namespace读取不同配置"><a href="#6、通过Namespace读取不同配置" class="headerlink" title="6、通过Namespace读取不同配置"></a>6、通过Namespace读取不同配置</h3><blockquote><p>默认的namespace不能删除，新建DEV/TEST命名空间</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210216001648.png" alt="image-20210216001648259"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210216001734.png" alt="image-20210216001734240"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210216002033.png" alt="image-20210216002033214"></p><blockquote><p>切换到dev namespace，新建三个分组，分组中配置DataId一致。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210216002615.png" alt="image-20210216002615825"></p><blockquote><p>切换namespace，在bootstrap.yml配置文件中添加如下配置，同时修改application.yml中配置环境为dev：</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">a9ec0b1e-e254-4b99-84ec-fa4ca62bf5a6</span></span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210216003211.png" alt="image-20210216003211534"></p><h1 id="五、Nacos集群和持久化配置（重要）"><a href="#五、Nacos集群和持久化配置（重要）" class="headerlink" title="五、Nacos集群和持久化配置（重要）"></a>五、Nacos集群和持久化配置（重要）</h1><h2 id="5-1、官网说明"><a href="#5-1、官网说明" class="headerlink" title="5.1、官网说明"></a>5.1、官网说明</h2><h3 id="1、官网文档"><a href="#1、官网文档" class="headerlink" title="1、官网文档"></a>1、官网文档</h3><blockquote><p><a href="https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html">https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html</a></p></blockquote><h3 id="2、官网架构图"><a href="#2、官网架构图" class="headerlink" title="2、官网架构图"></a>2、官网架构图</h3><blockquote><p>VIP：virtual IP，虚拟IP，也就是nginx</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210216111649.png" alt="img"></p><h3 id="3、根据官网翻译，我们可得以下架构图"><a href="#3、根据官网翻译，我们可得以下架构图" class="headerlink" title="3、根据官网翻译，我们可得以下架构图"></a>3、根据官网翻译，我们可得以下架构图</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210216112702.jpg" alt="未命名文件 (1)"></p><h3 id="4、说明"><a href="#4、说明" class="headerlink" title="4、说明"></a>4、说明</h3><blockquote><p>按照上面的架构图，我们需要Mysql数据库；</p><p>默认Nacos使用嵌入式数据库实现了数据的存储。所以，如果启动多个默认配置的Nacos节点，数据存储是存在一致性问题的。为了解决这个问题，Nacos采用了<strong>集中式存储的方式支持集群体部署，目前只支持MySQL的存储。</strong></p></blockquote><h2 id="5-2、Nacos持久化配置解释"><a href="#5-2、Nacos持久化配置解释" class="headerlink" title="5.2、Nacos持久化配置解释"></a>5.2、Nacos持久化配置解释</h2><h3 id="1、Nacos自带了嵌入式数据库"><a href="#1、Nacos自带了嵌入式数据库" class="headerlink" title="1、Nacos自带了嵌入式数据库"></a>1、Nacos自带了嵌入式数据库</h3><blockquote><p>Nacos默认自带<strong>嵌入式数据库derby</strong>，打开Nacos的依赖坐标：<a href="https://github.com/alibaba/nacos/blob/develop/config/pom.xml">https://github.com/alibaba/nacos/blob/develop/config/pom.xml</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210216114401.png" alt="image-20210216114401758"></p><blockquote><p>但当我们做Nacos集群时，每个Nacos都各自带着一个derby嵌入式数据库，此时会出现持久化数据不一致的问题，此时我们引入外部的MySQL数据库，将配置数据持久化到MySQL中。 </p></blockquote><h3 id="2、derby到MySQL切换配置步骤"><a href="#2、derby到MySQL切换配置步骤" class="headerlink" title="2、derby到MySQL切换配置步骤"></a>2、derby到MySQL切换配置步骤</h3><blockquote><p>在<strong>nacos-server-1.1.4\nacos\conf</strong>目录下找到并执行 <strong>nacos-mysql.sql</strong> 脚本</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210216115406.png" alt="image-20210216115406872"></p><blockquote><p>在<strong>nacos-server-1.1.4\nacos\conf</strong>目录下找到<strong>application.properties</strong>，增加支持mysql数据源配置，添加mysql数据库的url、用户名和密码</p><p>注：nacos默认不支持mysql8.0，如需支持8.0，需要下载mysql8.0驱动进行更换。</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将持久化配置从derby迁移到mysql配置</span></span><br><span class="line"><span class="meta">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://localhost:3306/nacos_config?&amp;connectTimeout=10000&amp;socketTimeout=30000&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">tianxin1230.</span></span><br></pre></td></tr></table></figure><blockquote><p>重启Nacos，可以看到是个全新的空记录页面</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
            <tag> 👢Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud学习（四）-Eureka服务注册中心</title>
      <link href="posts/995752607.html"/>
      <url>posts/995752607.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、Eureka基础知识"><a href="#一、Eureka基础知识" class="headerlink" title="一、Eureka基础知识"></a>一、Eureka基础知识</h1><h2 id="1-1、什么是服务治理"><a href="#1-1、什么是服务治理" class="headerlink" title="1.1、什么是服务治理"></a>1.1、什么是服务治理</h2><blockquote><p>Spring Cloud 封装了Netflix公司开发的Eureka模块来实现服务治理</p><p>在传统的rpc远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务于服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册。</p></blockquote><h2 id="1-2、什么是服务注册"><a href="#1-2、什么是服务注册" class="headerlink" title="1.2、什么是服务注册"></a>1.2、什么是服务注册</h2><blockquote><p>​        Eureka采用了CS的设计架构，Eureka Server作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用Eureka的客户端连接到Eureka Server并维持心跳连接。这样系统的维护人员就可以通过Eureka Server来监控系统中各个微服务是否正常运行。</p><p>​        在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己服务器的信息比如服务地址通讯地址等以别名方式注册到注册中心上。另一方（消费者服务提供者），以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地RPC调用RPC远程调用框架核心设计思想：在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系（服务治理概念）。在任何rpc远程框架中，都会有一个注册中心（存放服务地址相关信息（接口地址））</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210214161851.png" alt="img"></p><h2 id="1-3、Eureka两组件"><a href="#1-3、Eureka两组件" class="headerlink" title="1.3、Eureka两组件"></a>1.3、Eureka两组件</h2><blockquote><p>Eureka包括两个组件：Eureka Server和Eureka Client，其中</p></blockquote><ul><li><strong>Eureka Server提供服务注册服务</strong>，各个微服务节点通过配置启动后，会在Eureka Server中进行注册，这样Eureka Server中的服务注册表将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到。</li><li><strong>Eureka Client通过服务注册中心访问</strong>，是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询（Round-robin）负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳（默认时间周期为30s）。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，Eureka Server将会从注册服务表中把这个服务节点移除（默认为90s）。</li></ul><h1 id="二、单击Eureka构建步骤"><a href="#二、单击Eureka构建步骤" class="headerlink" title="二、单击Eureka构建步骤"></a>二、单击Eureka构建步骤</h1><h2 id="2-1、创建cloud-eureka-server-7001"><a href="#2-1、创建cloud-eureka-server-7001" class="headerlink" title="2.1、创建cloud-eureka-server-7001"></a>2.1、创建cloud-eureka-server-7001</h2><blockquote><p>这个微服务就是eureka Server服务注册中心，为其他微服务提供服务注册。</p></blockquote><h2 id="2-2、引入依赖"><a href="#2-2、引入依赖" class="headerlink" title="2.2、引入依赖"></a>2.2、引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cloudstudy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Eureka 1.x和Eureka 2.x的区别</p></blockquote><ul><li>Eureka 1.x 老版本，依赖中不分服务端和客户端</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Eureka 2.x 新版本</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3、编写yml配置文件"><a href="#2-3、编写yml配置文件" class="headerlink" title="2.3、编写yml配置文件"></a>2.3、编写yml配置文件</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">erver:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">  <span class="comment"># 表示不向服务注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 表示自己就是服务注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><h2 id="2-4、主启动类"><a href="#2-4、主启动类" class="headerlink" title="2.4、主启动类"></a>2.4、主启动类</h2><blockquote><p>在主启动类上添加@EnableEurekaServer注解，表示这个微服务为服务注册中心。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServer7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServer7001.class,args);</span><br><span class="line">        System.out.println(<span class="string">&quot;http://localhost:7001&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5、启动eureka7001"><a href="#2-5、启动eureka7001" class="headerlink" title="2.5、启动eureka7001"></a>2.5、启动eureka7001</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210214171752.png" alt="image-20210214171751846"></p><h2 id="2-6、修改payment8001和order80"><a href="#2-6、修改payment8001和order80" class="headerlink" title="2.6、修改payment8001和order80"></a>2.6、修改payment8001和order80</h2><blockquote><p>引入eureka Client依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在yml配置文件中添加配置</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><blockquote><p>在payment8001、order80主启动类上添加注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br></pre></td></tr></table></figure><blockquote><p>启动payment8001、order80</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210214173444.png" alt="image-20210214173444635"></p><blockquote><p>Eureka Server列表中会显示已经注册入注册中心的微服务的spring.application.name</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210214173637.png" alt="image-20210214173637695"></p><h1 id="三、集群Eureka构建步骤"><a href="#三、集群Eureka构建步骤" class="headerlink" title="三、集群Eureka构建步骤"></a>三、集群Eureka构建步骤</h1><h2 id="3-1、单机eureka存在的问题"><a href="#3-1、单机eureka存在的问题" class="headerlink" title="3.1、单机eureka存在的问题"></a>3.1、单机eureka存在的问题</h2><blockquote><p><strong>微服务RPC远程服务调用最核心的是什么？</strong></p><ul><li>高可用，如果注册中心为单机，那么一旦它出现故障，就会导致整个系统不可用。</li></ul><p><strong>解决方法</strong></p><ul><li>搭建Eureka注册中心集群，实现负载均衡+故障容错</li></ul></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210214181019.png" alt="img"></p><h2 id="3-2、eureka集群的实质"><a href="#3-2、eureka集群的实质" class="headerlink" title="3.2、eureka集群的实质"></a>3.2、eureka集群的实质</h2><blockquote><p>互相注册，相互守望。</p><p>集群中的每一台eureka Server要有<strong>除自己之外的所有eureka server</strong>的信息。</p></blockquote><h2 id="3-3、新建Eureka-7002微服务"><a href="#3-3、新建Eureka-7002微服务" class="headerlink" title="3.3、新建Eureka 7002微服务"></a>3.3、新建Eureka 7002微服务</h2><blockquote><p>修改本地hosts文件，添加域名和ip映射</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># My hosts</span><br><span class="line">127.0.0.1 eureka7001.com</span><br><span class="line">127.0.0.1 eureka7002.com</span><br></pre></td></tr></table></figure><blockquote><p>由于依赖、主启动类与7001类似，所以这里只给出yml配置文件</p><p>此时需要修改一下7001的配置文件</p></blockquote><ul><li>7001</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#集群时7001需要注册到7002</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure><ul><li>7002</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span>     <span class="comment">#设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br></pre></td></tr></table></figure><h2 id="3-4、启动7001和7002，测试"><a href="#3-4、启动7001和7002，测试" class="headerlink" title="3.4、启动7001和7002，测试"></a>3.4、启动7001和7002，测试</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210214201207.png" alt="image-20210214201206201"></p><h2 id="3-5、将payment8001和order80注册到eureka集群"><a href="#3-5、将payment8001和order80注册到eureka集群" class="headerlink" title="3.5、将payment8001和order80注册到eureka集群"></a>3.5、将payment8001和order80注册到eureka集群</h2><blockquote><p>修改payment8001和order80的yml文件</p></blockquote><ul><li>payment8001</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>    <span class="comment">#表识不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span>   <span class="comment">#表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span>    <span class="comment">#设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-hystrix-payment</span></span><br></pre></td></tr></table></figure><ul><li>order80</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span></span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210214210220.png" alt="image-20210214210219113"></p><h1 id="四、actuator微服务信息完善"><a href="#四、actuator微服务信息完善" class="headerlink" title="四、actuator微服务信息完善"></a>四、actuator微服务信息完善</h1><h2 id="4-1、主机名，服务名称修改"><a href="#4-1、主机名，服务名称修改" class="headerlink" title="4.1、主机名，服务名称修改"></a>4.1、主机名，服务名称修改</h2><h3 id="1、当前问题"><a href="#1、当前问题" class="headerlink" title="1、当前问题"></a>1、当前问题</h3><blockquote><p>eureka注册表中含有主机名称</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210214211411.png" alt="image-20210214211411127"></p><h3 id="2、修改payment8001"><a href="#2、修改payment8001" class="headerlink" title="2、修改payment8001"></a>2、修改payment8001</h3><blockquote><p>修改payment8001微服务的yml配置文件，添加配置如下</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span></span><br></pre></td></tr></table></figure><blockquote><p>重启，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210214212223.png" alt="image-20210214212222852"></p><h2 id="4-2、访问信息有IP信息提示"><a href="#4-2、访问信息有IP信息提示" class="headerlink" title="4.2、访问信息有IP信息提示"></a>4.2、访问信息有IP信息提示</h2><h3 id="1、遇到的问题"><a href="#1、遇到的问题" class="headerlink" title="1、遇到的问题"></a>1、遇到的问题</h3><blockquote><p>在eureka点击微服务时没有ip提示</p></blockquote><h3 id="2、添加配置"><a href="#2、添加配置" class="headerlink" title="2、添加配置"></a>2、添加配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210214212622.png" alt="image-20210214212622010"></p><h2 id="4-3、总结"><a href="#4-3、总结" class="headerlink" title="4.3、总结"></a>4.3、总结</h2><blockquote><p>修改主机名、添加IP信息提示的步骤如下：</p></blockquote><h3 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、yml文件添加配置"><a href="#2、yml文件添加配置" class="headerlink" title="2、yml文件添加配置"></a>2、yml文件添加配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">服务名称</span></span><br><span class="line">    <span class="comment"># 开启IP信息提示</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="五、服务发现Discovery"><a href="#五、服务发现Discovery" class="headerlink" title="五、服务发现Discovery"></a>五、服务发现Discovery</h1><h2 id="5-1、概述"><a href="#5-1、概述" class="headerlink" title="5.1、概述"></a>5.1、概述</h2><blockquote><p>对于注册入Eureka中的微服务，可以通过服务发现来获得该服务的信息。</p></blockquote><h2 id="5-2、使用"><a href="#5-2、使用" class="headerlink" title="5.2、使用"></a>5.2、使用</h2><blockquote><p>这里以payment8001为例</p></blockquote><h3 id="1、修改payment8001的Controller"><a href="#1、修改payment8001的Controller" class="headerlink" title="1、修改payment8001的Controller"></a>1、修改payment8001的Controller</h3><blockquote><p>注入一个DiscoveryClient对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br></pre></td></tr></table></figure><blockquote><p>在Controller中添加一个方法，这个方法用户获取微服务的信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/payment/discovery&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">    services.stream().forEach(service -&gt; &#123;</span><br><span class="line">        log.info(<span class="string">&quot;-----------element:&quot;</span> + service);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在getInstances方法中输入注册到eureka中的微服务名称</span></span><br><span class="line">    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">    instances.stream().forEach(instance -&gt; &#123;</span><br><span class="line">        log.info(instance.getServiceId() + <span class="string">&quot;\t&quot;</span> + instance.getHost() + <span class="string">&quot;\t&quot;</span> + instance.getPort() + <span class="string">&quot;\t&quot;</span> + instance.getUri());</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.discoveryClient;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、在payment8001主启动类上添加注解"><a href="#2、在payment8001主启动类上添加注解" class="headerlink" title="2、在payment8001主启动类上添加注解"></a>2、在payment8001主启动类上添加注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure><h3 id="3、重启payment8001"><a href="#3、重启payment8001" class="headerlink" title="3、重启payment8001"></a>3、重启payment8001</h3><blockquote><p>访问 <a href="http://localhost:8001/payment/discovery">http://localhost:8001/payment/discovery</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210214214947.png" alt="image-20210214214946293"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210214215325.png" alt="image-20210214215324991"></p><h1 id="六、Eureka自我保护"><a href="#六、Eureka自我保护" class="headerlink" title="六、Eureka自我保护"></a>六、Eureka自我保护</h1><h2 id="6-1、概述"><a href="#6-1、概述" class="headerlink" title="6.1、概述"></a>6.1、概述</h2><blockquote><p>保护模式主要用于一组客户端和Eureka Server之间存在网络分区场景。一旦进入保护模式，<strong>Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据，也就是不会注销任何服务</strong>。</p><p>即：某时刻某一个微服务不可用了，Eureka不会立即清理，依旧会对该微服务的信息进行保存。</p></blockquote><ul><li>如果在Eureka Server首页中看到以下这段提示，则说明Eureka进入了保护模式</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210214220119.png" alt="image-20210214220118806"></p><h2 id="6-2、导致原因"><a href="#6-2、导致原因" class="headerlink" title="6.2、导致原因"></a>6.2、导致原因</h2><h3 id="1、为什么会产生Eureka自我保护机制？"><a href="#1、为什么会产生Eureka自我保护机制？" class="headerlink" title="1、为什么会产生Eureka自我保护机制？"></a>1、为什么会产生Eureka自我保护机制？</h3><blockquote><p>为了防止EurekaClient可以正常运行，但是与EurekaServer网络不通情况下，Eurekaserver不会立刻将EurekaClient服务剔除</p></blockquote><h3 id="2、什么是自我保护模式"><a href="#2、什么是自我保护模式" class="headerlink" title="2、什么是自我保护模式"></a>2、什么是自我保护模式</h3><blockquote><p>​    默认情况下，如果EurekaServer在一定时间内没有接收到某个微服务实例的心跳，EurekaServer将会注销该实例（默认90秒）。但当网络分区故障发生（延时、卡顿、拥挤）时，微服务与EurekaServer之间无法正常通信，以上行为可能变得非常危险了——因为微务本身其实是健康的，此时本不应该注销这个微服务。Eureka通过“自我保护模式”来解决这个问题——当EurekaServer节点在短时间内丢失过多客户端时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210214221434.png" alt="img"></p><h2 id="6-3、禁止自我保护"><a href="#6-3、禁止自我保护" class="headerlink" title="6.3、禁止自我保护"></a>6.3、禁止自我保护</h2><blockquote><p>以eureka7001和payment8001举例说明</p></blockquote><h3 id="1、修改eureka7001的配置文件"><a href="#1、修改eureka7001的配置文件" class="headerlink" title="1、修改eureka7001的配置文件"></a>1、修改eureka7001的配置文件</h3><blockquote><p>禁用自我保护模式</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="comment"># 关闭自我保护机制</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>重启7001，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210214222939.png" alt="image-20210214222939563"></p><h3 id="2、修改payment8001的配置文件"><a href="#2、修改payment8001的配置文件" class="headerlink" title="2、修改payment8001的配置文件"></a>2、修改payment8001的配置文件</h3><blockquote><p>设置eureka客户端向服务端发送心跳的时间间隔</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment">#Eureka客户端向服务端发送心跳的时间间隔，单位为秒（默认为10s）</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment">#Eureka服务端在收到最后一次心跳后等待时间上限，单位为s，超时直接剔除服务</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><blockquote><p>重启payment8001，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210214223337.png" alt="image-20210214223337465"></p><blockquote><p>关闭payment8001，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210214223531.png" alt="image-20210214223531487"></p><blockquote><p>可以看到，在禁用自我保护模式的情况下，关闭payment8001后服务被剔除</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
            <tag> 👢Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud学习（三）-Hystrix的使用</title>
      <link href="posts/4157920692.html"/>
      <url>posts/4157920692.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1-1、分布式系统面临的问题"><a href="#1-1、分布式系统面临的问题" class="headerlink" title="1.1、分布式系统面临的问题"></a>1.1、分布式系统面临的问题</h2><blockquote><p><strong>复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免的失败。</strong></p><p>微服务之间调用关系错综复杂，一个请求，可能需要调用多个微服务接口才能实现，会形成非常复杂的调用链路：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210212114450.png" alt="img"></p><h2 id="1-2、服务雪崩"><a href="#1-2、服务雪崩" class="headerlink" title="1.2、服务雪崩"></a>1.2、服务雪崩</h2><blockquote><p>多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其它的微服务，这就是所谓的**“扇出”**。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”。</p><p>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。</p><p>所以，通常当你发现一个模块下的某个实例失败后，这时候这个模块依然还会接收流量，然后这个有问题的模块还调用了其他的模块，这样就会发生<strong>级联故障</strong>，或者叫<strong>雪崩</strong>。</p></blockquote><p>如图，一次业务请求，需要调用A、P、H、I四个服务，这四个服务又可能调用其它服务。</p><p>如果此时，某个服务出现异常：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210212115722.png" alt="image-20210212115722168"></p><p>例如微服务I发生异常，请求阻塞，用户不会得到响应，则tomcat的这个线程不会释放，于是越来越多的用户请求到来，越来越多的线程会阻塞：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210212115754.png" alt="image-20210212115754001"></p><p><strong>服务器支持的线程和并发数有限，请求一直阻塞，会导致服务器资源耗尽，从而导致所有其它服务都不可用，形成雪崩效应。</strong></p><p>这就好比，一个汽车生产线，生产不同的汽车，需要使用不同的零件，如果某个零件因为种种原因无法使用，那么就会造成整台车无法装配，陷入等待零件的状态，直到零件到位，才能继续组装。  此时如果有很多个车型都需要这个零件，那么整个工厂都将陷入等待的状态，导致所有生产都陷入瘫痪。一个零件的波及范围不断扩大。 </p><blockquote><p>Hystix解决雪崩问题的手段有两个：</p></blockquote><ul><li>线程隔离</li><li>服务熔断</li></ul><h2 id="1-3、Hystrix是什么？"><a href="#1-3、Hystrix是什么？" class="headerlink" title="1.3、Hystrix是什么？"></a>1.3、Hystrix是什么？</h2><blockquote><p>​    Hystrix是一个用于处理分布式系统的<strong>延迟</strong>和<strong>容错</strong>的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，<strong>不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。</strong><br>​    “断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），<strong>向调用方返回一个符合预期的、可处理的备选响应（FallBack)**，而</strong>不是长时间的等待或者抛出调用方无法处理的异常**，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p></blockquote><h1 id="二、Hystrix重要概念"><a href="#二、Hystrix重要概念" class="headerlink" title="二、Hystrix重要概念"></a>二、Hystrix重要概念</h1><h2 id="2-1、服务降级（fallback）"><a href="#2-1、服务降级（fallback）" class="headerlink" title="2.1、服务降级（fallback）"></a>2.1、服务降级（fallback）</h2><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><blockquote><p>假设要调用的微服务/系统<strong>出现故障不可用</strong>了，此时不让客户端<strong>等待</strong>并<strong>立刻返回一个友好提示</strong>，fallback</p></blockquote><h3 id="2、会触发服务降级的情况"><a href="#2、会触发服务降级的情况" class="headerlink" title="2、会触发服务降级的情况"></a>2、会触发服务降级的情况</h3><ul><li>程序运行异常</li><li>超时</li><li>服务熔断触发服务降级</li><li>线程池/信号量打满也会触发服务降级。</li></ul><h2 id="2-2、服务熔断（break）"><a href="#2-2、服务熔断（break）" class="headerlink" title="2.2、服务熔断（break）"></a>2.2、服务熔断（break）</h2><h3 id="1、介绍-1"><a href="#1、介绍-1" class="headerlink" title="1、介绍"></a>1、介绍</h3><blockquote><p>类比保险丝，当电器总功率达到一定限度后直接熔断，不让电器继续工作。即<strong>服务达到最大访问量后直接拒绝访问</strong>，拉闸限电，然后<strong>调用服务降级的方法并返回友好提示</strong>，这样可以放置整个系统被拖垮。</p><p>故服务熔断会<strong>触发</strong>服务降级。</p></blockquote><p>服务熔断就是保险丝：<strong>服务的降级</strong>-&gt;<strong>进而熔断</strong>-&gt;<strong>恢复调用链路</strong></p><h3 id="2、Hystrix的弹性容错"><a href="#2、Hystrix的弹性容错" class="headerlink" title="2、Hystrix的弹性容错"></a>2、Hystrix的弹性容错</h3><blockquote><p>​    不同于电路熔断只能断不能自动重连，Hystrix可以实现弹性容错，当情况好转之后，可以自动重连。这就好比魔术师把鸽子变没了容易，但是真正考验技术的是如何把消失的鸽子再变回来。<br>​    通过断路的方式，可以将后续请求直接拒绝掉，一段时间之后允许部分请求通过，如果调用成功则回到电路闭合状态，否则继续断开。</p></blockquote><h3 id="3、Hystrix熔断状态机的三个状态"><a href="#3、Hystrix熔断状态机的三个状态" class="headerlink" title="3、Hystrix熔断状态机的三个状态"></a>3、Hystrix熔断状态机的三个状态</h3><ul><li>Closed：关闭状态，所有请求都正常访问。</li><li>Open：打开状态，所有请求都会被降级。Hystix会对请求情况计数，当一定时间内失败请求百分比达到阈值，则触发熔断，断路器会完全打开。默认失败比例的阈值是50%，请求次数最少不低于20次。</li><li>Half Open：半开状态，open状态不是永久的，打开后会进入休眠时间（默认是5S）。随后断路器会自动进入半开状态。此时会释放部分请求通过，若这些请求都是健康的，则会完全关闭断路器，否则继续保持打开，再次进行休眠计时</li></ul><h2 id="2-3、服务限流（float-limited）"><a href="#2-3、服务限流（float-limited）" class="headerlink" title="2.3、服务限流（float limited）"></a>2.3、服务限流（float limited）</h2><blockquote><p>秒杀高并发等操作中，严禁请求一窝蜂地过来拥挤，需要使请求排队，一秒钟N个，有序进行。</p></blockquote><h1 id="三、Hystrix案例"><a href="#三、Hystrix案例" class="headerlink" title="三、Hystrix案例"></a>三、Hystrix案例</h1><h2 id="3-1、构建基础项目"><a href="#3-1、构建基础项目" class="headerlink" title="3.1、构建基础项目"></a>3.1、构建基础项目</h2><blockquote><p>新建cloud-provider-hystrix-payment8001微服务</p></blockquote><h3 id="1、POM"><a href="#1、POM" class="headerlink" title="1、POM"></a>1、POM</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--新增hystrix--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cloudstudy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、YML"><a href="#2、YML" class="headerlink" title="2、YML"></a>2、YML</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-hystrix-payment</span>  </span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>    <span class="comment">#表识不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span>   <span class="comment">#表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure><h3 id="3、主启动类"><a href="#3、主启动类" class="headerlink" title="3、主启动类"></a>3、主启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentHystrixMain8001.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、业务类"><a href="#4、业务类" class="headerlink" title="4、业务类"></a>4、业务类</h3><blockquote><p>在service层中编写一个正常访问和一个超时的方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentServiceImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;paymentInfo_OK,id:&quot;</span> + id + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;😄&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> timeOut = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(timeOut);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException interruptedException) &#123;</span><br><span class="line">            interruptedException.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;paymentInfo_TimeOut,id:&quot;</span> + id + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;😢耗时(S):&quot;</span> + timeOut;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、Controller层"><a href="#5、Controller层" class="headerlink" title="5、Controller层"></a>5、Controller层</h3><blockquote><p>编写一个正常访问接口和一个超时接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentServiceImpl paymentService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_Ok</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfo_OK(id);</span><br><span class="line">        log.info(<span class="string">&quot;*********result:&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfo_TimeOut(id);</span><br><span class="line">        log.info(<span class="string">&quot;*********result:&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、测试"><a href="#6、测试" class="headerlink" title="6、测试"></a>6、测试</h3><blockquote><p>打开eureka7001、hystrix-payment8001，测试</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210212132513.png" alt="image-20210212132512369"></p><blockquote><p>调用成功的方法：<a href="http://localhost:8001/payment/hystrix/ok/31">http://localhost:8001/payment/hystrix/ok/31</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210212132619.png" alt="image-20210212132619143"></p><blockquote><p>调用超时方法：<a href="http://localhost:8001/payment/hystrix/timeout/31">http://localhost:8001/payment/hystrix/timeout/31</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210212132704.png" alt="image-20210212132704481"></p><h2 id="3-2、高并发测试"><a href="#3-2、高并发测试" class="headerlink" title="3.2、高并发测试"></a>3.2、高并发测试</h2><blockquote><p>以上面的项目为根基</p></blockquote><h3 id="1、使用JMeter进行压力测试"><a href="#1、使用JMeter进行压力测试" class="headerlink" title="1、使用JMeter进行压力测试"></a>1、使用JMeter进行压力测试</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210212133943.png" alt="image-20210212133943440"></p><blockquote><p>启动Jmeter后再次访问<a href="http://localhost:8001/payment/hystrix/ok/31%E6%8E%A5%E5%8F%A3%EF%BC%8C%E5%8F%91%E7%8E%B0%E5%93%8D%E5%BA%94%E6%98%8E%E6%98%BE%E5%8F%98%E6%85%A2%EF%BC%8C%E5%8D%B3http://localhost:8001/payment/hystrix/timeout/31%E6%8E%A5%E5%8F%A3%E8%A2%AB%E6%8C%A4%E7%88%86%E5%90%8E%EF%BC%8Chttp://localhost:8001/payment/hystrix/ok/31%E6%8E%A5%E5%8F%A3%E4%B9%9F%E4%BC%9A%E8%A2%AB%E6%8B%96%E7%B4%AF%E3%80%82">http://localhost:8001/payment/hystrix/ok/31接口，发现响应明显变慢，即http://localhost:8001/payment/hystrix/timeout/31接口被挤爆后，http://localhost:8001/payment/hystrix/ok/31接口也会被拖累。</a></p></blockquote><h3 id="2、使用消费者调用Payment8001"><a href="#2、使用消费者调用Payment8001" class="headerlink" title="2、使用消费者调用Payment8001"></a>2、使用消费者调用Payment8001</h3><blockquote><p>新建一个cloud-consumer-feign-hystrix-order80微服务</p></blockquote><blockquote><p>引入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--新增hystrix--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cloudstudy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>编写yml文件</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>    <span class="comment">#表识不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span>   <span class="comment">#表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-hystrix-order</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.hzx.springcloud&quot;,&quot;com.hzx.common&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderHystrixMain80.class,args);</span><br><span class="line">        System.out.println(<span class="string">&quot;http://localhost/swagger-ui.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务类：service</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;cloud-provider-hystrix-payment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务类：Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentHystrixService paymentHystrixService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        String result = paymentHystrixService.paymentInfo_OK(id);</span><br><span class="line">        log.info(<span class="string">&quot;结果为：&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TIMEOUT</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        String result = paymentHystrixService.paymentInfo_TimeOut(id);</span><br><span class="line">        log.info(<span class="string">&quot;结果为：&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>故障原因：</p><p>8001同一层次的其他接口服务被困死，因为tomcat线程里面的工作线程已经被挤占完毕</p><p>80此时调用8001，客户端访问响应缓慢，转圈圈</p></blockquote><h2 id="3-3、解决方案"><a href="#3-3、解决方案" class="headerlink" title="3.3、解决方案"></a>3.3、解决方案</h2><h3 id="1、问题1"><a href="#1、问题1" class="headerlink" title="1、问题1"></a>1、问题1</h3><blockquote><p>超时导致服务器变慢（转圈）</p></blockquote><p>超时不再等待</p><h3 id="2、问题2"><a href="#2、问题2" class="headerlink" title="2、问题2"></a>2、问题2</h3><blockquote><p>出错（服务器宕机或者程序运行错误）</p></blockquote><p>出错要有兜底方案</p><h3 id="3、解决"><a href="#3、解决" class="headerlink" title="3、解决"></a>3、解决</h3><blockquote><p>对方服务（8001）超时了，调用者（80）不能一直卡死等待，必须有服务降级</p><p>对方服务（8001）down机了，调用者（80）不能一直卡死等待，必须有服务降级</p><p>对方服务（8001）OK，调用者（80）自己出故障或有自我要求（自己的等待时间小于服务提供者），自己处理降级</p></blockquote><h2 id="3-4、服务降级（fallback）"><a href="#3-4、服务降级（fallback）" class="headerlink" title="3.4、服务降级（fallback）"></a>3.4、服务降级（fallback）</h2><h3 id="1、对自身进行降级配置"><a href="#1、对自身进行降级配置" class="headerlink" title="1、对自身进行降级配置"></a>1、对自身进行降级配置</h3><blockquote><p>先从8001自身找问题：需要设置自身调用超时时间的峰值，在峰值时间内可以正常运行，超过峰值后需要有兜底的方法处理，做降级处理。</p><p>使用步骤如下</p></blockquote><ul><li>在业务类中启用@HystrixCommand注解</li><li>使用@HystrixCommand注解的fallbackMethod属性指定兜底方法</li><li>使用@HystrixCommand注解的commandProperties属性指定自身调用超时时间的峰值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentInfo_TimeOutHandler&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;3000&quot;)  //3秒钟以内就是正常的业务逻辑</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure><ul><li>若业务时间在超时时间峰值之内，那么走正常的业务逻辑，超过峰值后直接调用兜底方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentServiceImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;paymentInfo_OK,id:&quot;</span> + id + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;😄&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentInfo_TimeOutHandler&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;3000&quot;)  //3秒钟以内就是正常的业务逻辑</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> timeOut = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(timeOut);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException interruptedException) &#123;</span><br><span class="line">            interruptedException.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;paymentInfo_TimeOut,id:&quot;</span> + id + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;😢耗时(S):&quot;</span> + timeOut;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOutHandler</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;paymentInfo_TimeOutHandler,id:&quot;</span> + id + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;😓&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在主启动类上添加@EnableCircuitBreaker注解激活服务降级</li><li>测试，由于我们设置了峰值时间为3s，而我们在业务中休眠了5s，所以会触发服务降级</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210212153100.png" alt="image-20210212153058330"></p><blockquote><p>除超市外，系统出现异常时也会调用兜底方案</p></blockquote><h3 id="2、对消费端进行降级配置"><a href="#2、对消费端进行降级配置" class="headerlink" title="2、对消费端进行降级配置"></a>2、对消费端进行降级配置</h3><blockquote><p>对于需要<strong>远程调用payment8001的订单微服务80</strong>，它也可以更好地保护自己，<strong>对自己进行客户端降级保护</strong>。</p><p>hystrix的服务降级既可以做在消费（调用服务）端，也可以做在服务（提供服务）端，但服务降级一般做在消费端</p></blockquote><ul><li>在80订单微服务的yml文件中添加配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#如果处理自身的容错就开启。开启方式与生产端不一样。</span></span><br></pre></td></tr></table></figure><ul><li>在80订单微服务的主启动类上添加@EnableHystrix注解激活Hystrix</li><li>修改业务类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentTimeOutFallbackMethod&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;1500&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TIMEOUT</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">    String result = paymentHystrixService.paymentInfo_TimeOut(id);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentTimeOutFallbackMethod</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我是消费者80，对付支付系统繁忙请10秒钟后再试或者自己运行出错请检查自己,(┬＿┬)&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试</p><ul><li>修改paymentHystrix8001中的业务类，确保8001中的方法可以正常运行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentInfo_TimeOutHandler&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;5000&quot;)  //3秒钟以内就是正常的业务逻辑</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> timeOut = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(timeOut);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException interruptedException) &#123;</span><br><span class="line">        interruptedException.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;线程池：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;paymentInfo_TimeOut,id:&quot;</span> + id + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;😢耗时(S):&quot;</span> + timeOut;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动微服务，此时由于80订单中微服务的超时时间峰值为1.5s，而8001休眠了3s，所以80会调用失败，此时会调用自身的兜底方法</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210213205233.png"></p></li></ul><blockquote><p>如果80微服务端发生运行时异常，那么也会直接执行兜底方案。</p></blockquote><h3 id="3、以上配置存在的问题"><a href="#3、以上配置存在的问题" class="headerlink" title="3、以上配置存在的问题"></a>3、以上配置存在的问题</h3><ul><li>每个业务方法对应一个兜底的方法，代码膨胀</li><li>业务逻辑和兜底方法混杂在一起，代码混乱。</li><li>全局兜底方法和自定义兜底方法分开</li></ul><blockquote><p>配置一个全局兜底方法，使用@DefaultProperties(defaultFallback = “全局兜底方法名”) 来指定全局兜底方法。</p><p>加入全局兜底方法后，代码结构可变为</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210213210443.png" alt="img"></p><blockquote><p>1对N，除了个别重要核心业务有专属兜底方法，其余普通的方法都可以通过全局兜底方法统一兜底。</p><p>修改80订单微服务的Controller层</p></blockquote><ul><li>添加一个全局兜底方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 下面是全局fallback方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">payment_Global_FallbackMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Global异常处理信息，请稍后再试...😓&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在控制器上添加注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;payment_Global_FallbackMethod&quot;)</span></span><br></pre></td></tr></table></figure><ul><li>修改业务类，使用全局兜底方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@HystrixCommand</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TIMEOUT</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">    String result = paymentHystrixService.paymentInfo_TimeOut(id);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、为远程调用接口添加一个统一降级类"><a href="#4、为远程调用接口添加一个统一降级类" class="headerlink" title="4、为远程调用接口添加一个统一降级类"></a>4、为远程调用接口添加一个统一降级类</h3><blockquote><p>服务降级，客户端去调用服务端，碰上服务端宕机或关闭。</p><p>修改order80订单微服务，根据order80订单微服务已经有的PaymentHystrixService接口，重新新建一个类（PaymentFallbackService）实现该接口，统一为接口里面的方法进行异常处理。</p><p>编写一个类，实现PaymentHystrixService接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;----PaymentFallbackService fall back-payment_OK，😂&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;----PaymentFallbackService fall back-paymentInfo_TimeOut，😂&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时没有配置任何兜底方法的paymentInfo_OK方法由PaymentFallbackService类中的实现方法兜底</p><p>测试</p></blockquote><ul><li>正常测试，访问：<a href="http://localhost/consumer/payment/hystrix/ok/31">http://localhost/consumer/payment/hystrix/ok/31</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210213214055.png" alt="image-20210213214054384"></p><ul><li>关闭payment8001，模拟服务端宕机，重新访问：<a href="http://localhost/consumer/payment/hystrix/ok/31">http://localhost/consumer/payment/hystrix/ok/31</a> ，此时可以看到调用了PaymentFallbackService类中的实现方法兜底。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210213214153.png" alt="image-20210213214152979"></p><blockquote><p>此时服务端provider已经down了，但是我们做了服务降级处理，让客户端在服务端不可用时也会获得提示信息而不会挂起耗死服务器</p></blockquote><h2 id="3-5、服务熔断"><a href="#3-5、服务熔断" class="headerlink" title="3.5、服务熔断"></a>3.5、服务熔断</h2><h3 id="1、修改cloud-provider-hystrix-payment8001"><a href="#1、修改cloud-provider-hystrix-payment8001" class="headerlink" title="1、修改cloud-provider-hystrix-payment8001"></a>1、修改cloud-provider-hystrix-payment8001</h3><ul><li>修改PaymentService</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentCircuitBreaker_fallback&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;,value = &quot;true&quot;),  //是否开启断路器</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;,value = &quot;10&quot;),   //请求次数</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;10000&quot;),  //时间范围</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;60&quot;), //失败率达到多少后跳闸</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (id &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;*****id 不能负数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    String serialNumber = IdUtil.simpleUUID();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Thread.currentThread().getName()+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;调用成功,流水号：&quot;</span>+serialNumber;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//兜底方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker_fallback</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;id 不能负数，请稍候再试,(┬＿┬)/~~     id: &quot;</span> +id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>@HystrixProperty(name = “circuitBreaker.enabled”,value = “true”)</td><td>是否开启断路器</td></tr><tr><td>@HystrixProperty(name = “circuitBreaker.requestVolumeThreshold”,value = “10”)</td><td>请求次数</td></tr><tr><td>@HystrixProperty(name = “circuitBreaker.sleepWindowInMilliseconds”,value = “10000”)</td><td>时间窗口期/时间范围</td></tr><tr><td>@HystrixProperty(name = “circuitBreaker.errorThresholdPercentage”,value = “60”)</td><td>失败率到达多少后跳闸</td></tr></tbody></table><blockquote><p>上面设置的意思时，如果10秒内10次请求中有60以上失败，就直接跳闸</p></blockquote><ul><li>Controller层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//===服务熔断</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/circuit/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    String result = paymentService.paymentCircuitBreaker(id);</span><br><span class="line">    log.info(<span class="string">&quot;*******result:&quot;</span>+result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、测试符合条件的参数"><a href="#2、测试符合条件的参数" class="headerlink" title="2、测试符合条件的参数"></a>2、测试符合条件的参数</h3><ul><li>访问 <a href="http://localhost:8001/payment/circuit/31">http://localhost:8001/payment/circuit/31</a> ，由于id为正数，所以测试通过。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210213220833.png" alt="image-20210213220832634"></p><h3 id="3、演示服务熔断"><a href="#3、演示服务熔断" class="headerlink" title="3、演示服务熔断"></a>3、演示服务熔断</h3><ul><li>演示服务熔断，在短时间内连续多次输入小于0的id号，然后再输入正确的id，查看结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210213221321.png" alt="image-20210213221321526"></p><blockquote><p>一段时间之后（默认是5秒），这个时候断路器是半开状态，会让其中一个请求进行转发。如果成功，断路器会关闭，若失败，继续开启。</p></blockquote><h3 id="4、结论"><a href="#4、结论" class="headerlink" title="4、结论"></a>4、结论</h3><blockquote><p>熔断类型</p><ul><li>熔断打开：请求不再进行调用当前服务，内部设置时钟一般为MTTR(平均故障处理时间)，当打开时长达到所设时钟则进入熔断状态</li><li>熔断关闭：熔断关闭不会对服务进行熔断</li><li>熔断半开：部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</li></ul><p>熔断器开启、半开、关闭的转化关系大致如下</p><ul><li>当请求错误次数在一定时间内没达到峰值或者请求成功的情况下，熔断器关闭。</li><li>当请求错误次数在一定时间内达到峰值时，熔断器打开，此时进入服务熔断状态，通过服务降级对任何请求返回提示。</li><li>当熔断一定时间后，熔断器会进入半开状态，此时它会试着通过一些请求，如果请求通过，那么它会从半开状态转换为关闭状态，此时服务恢复，否则仍然进入打开状态，服务继续熔断。</li></ul></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210213222919.png" alt="image-20210213222918954"></p><h3 id="5、断路器的三个重要参数"><a href="#5、断路器的三个重要参数" class="headerlink" title="5、断路器的三个重要参数"></a>5、断路器的三个重要参数</h3><blockquote><p>分别是<strong>快照时间窗</strong>、<strong>请求总数阈值</strong>和<strong>错误百分比阈值</strong></p></blockquote><ul><li>快照时间窗：断路器确定是否打开需要统计一些请求和错误数据，而统计的时间范围就是快照时间窗，默认为最近的10秒。</li><li>请求总数阀值：在快照时间窗内，必须满足请求总数阀值才有资格熔断。默认为20，意味着在10秒内，如果该hystrix命令的调用次数不足20次，即使所有的请求都超时或其他原因失败，断路器都不会打开。</li><li>错误百分比阀值：当请求总数在快照时间窗内超过了阀值，比如发生了30次调用，如果在这30次调用中，有15次发生了超时异常，也就是超过50%的错误百分比，在默认设定50%阀值情况下，这时候就会将断路器打开。</li></ul><h3 id="6、Hystrix如何自动恢复？"><a href="#6、Hystrix如何自动恢复？" class="headerlink" title="6、Hystrix如何自动恢复？"></a>6、Hystrix如何自动恢复？</h3><blockquote><p>对于这一问题，hystrix也为我们实现了自动恢复功能。<br>当断路器打开，对主逻辑进行熔断之后，hystrix会启动一个<strong>休眠时间窗</strong>，在这个时间窗内，降级逻辑是临时的成为主逻辑，当休眠时间窗到期，断路器将进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将继续闭合，主逻辑恢复，如果这次请求依然有问题，断路器继续进入打开状态，休眠时间窗重新计时。</p></blockquote><h2 id="3-6、服务限流"><a href="#3-6、服务限流" class="headerlink" title="3.6、服务限流"></a>3.6、服务限流</h2><blockquote><p>暂时留空</p></blockquote><h1 id="四、Hystrix工作流程"><a href="#四、Hystrix工作流程" class="headerlink" title="四、Hystrix工作流程"></a>四、Hystrix工作流程</h1><h2 id="4-1、流程图"><a href="#4-1、流程图" class="headerlink" title="4.1、流程图"></a>4.1、流程图</h2><p><img src= "/img/loading.gif" data-lazy-src="https://github.com/Netflix/Hystrix/wiki/images/hystrix-command-flow-chart-640.png" alt="img"></p><h2 id="4-2、步骤说明"><a href="#4-2、步骤说明" class="headerlink" title="4.2、步骤说明"></a>4.2、步骤说明</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210213225605.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
            <tag> 👢Spring Boot </tag>
            
            <tag> 🐷Hystrix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线教育项目总结（五）-统一返回结果、分页条件查询、订单操作和定时任务</title>
      <link href="posts/1717741625.html"/>
      <url>posts/1717741625.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1、统一返回格式"><a href="#1、统一返回格式" class="headerlink" title="1、统一返回格式"></a>1、统一返回格式</h2><blockquote><p>在前后端接口交互中，前端按照约定请求URL路径，并传入相关参数，后端服务器接收请求，进行业务处理，返回数据给前端。在前后端分离的项目中，我们往往会将后端的结果<strong>封装为JSON数据</strong>返回，统一的数据格式会使前端对数据的操作更一致、轻松。</p><p>一般情况下，统一返回数据格式没有固定的格式，只要能描述清楚返回的数据状态以及要返回的具体数据就可以。但是一般会包含<strong>状态码</strong>、<strong>返回消息</strong>、<strong>数据</strong>这几部分内容</p></blockquote><p>例如，我们的系统要求返回的基本数据格式如下：</p><ul><li><strong>列表：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;success&quot;</span>: <span class="keyword">true</span>,</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;items&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;刘德华&quot;</span>,</span><br><span class="line">        <span class="string">&quot;intro&quot;</span>: <span class="string">&quot;毕业于师范大学数学系，热爱教育事业，执教数学思维6年有余&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>分页：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;success&quot;</span>: <span class="keyword">true</span>,</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: <span class="number">17</span>,</span><br><span class="line">    <span class="string">&quot;rows&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;刘德华&quot;</span>,</span><br><span class="line">        <span class="string">&quot;intro&quot;</span>: <span class="string">&quot;毕业于师范大学数学系，热爱教育事业，执教数学思维6年有余&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>没有返回数据：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;success&quot;</span>: <span class="keyword">true</span>,</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>失败：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;success&quot;</span>: <span class="keyword">false</span>,</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">20001</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;失败&quot;</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们定义统一返回格式为：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;success&quot;</span>: 布尔, <span class="comment">//响应是否成功</span></span><br><span class="line">  <span class="string">&quot;code&quot;</span>: 数字, <span class="comment">//响应码</span></span><br><span class="line">  <span class="string">&quot;message&quot;</span>: 字符串, <span class="comment">//返回消息</span></span><br><span class="line">  <span class="string">&quot;data&quot;</span>: HashMap <span class="comment">//返回数据，放在键值对中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、定义统一返回结果"><a href="#2、定义统一返回结果" class="headerlink" title="2、定义统一返回结果"></a>2、定义统一返回结果</h2><h3 id="2-1、创建返回码定义枚举类"><a href="#2-1、创建返回码定义枚举类" class="headerlink" title="2.1、创建返回码定义枚举类"></a>2.1、创建返回码定义枚举类</h3><blockquote><p>状态码定义枚举类对于特殊响应情况做了定义。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ResultCodeEnum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    SUCCESS(<span class="keyword">true</span>, <span class="number">20000</span>,<span class="string">&quot;成功&quot;</span>),</span><br><span class="line">    UNKNOWN_REASON(<span class="keyword">false</span>, <span class="number">20001</span>, <span class="string">&quot;未知错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    BAD_SQL_GRAMMAR(<span class="keyword">false</span>, <span class="number">21001</span>, <span class="string">&quot;sql语法错误&quot;</span>),</span><br><span class="line">    JSON_PARSE_ERROR(<span class="keyword">false</span>, <span class="number">21002</span>, <span class="string">&quot;json解析异常&quot;</span>),</span><br><span class="line">    PARAM_ERROR(<span class="keyword">false</span>, <span class="number">21003</span>, <span class="string">&quot;参数不正确&quot;</span>),</span><br><span class="line"></span><br><span class="line">    FILE_UPLOAD_ERROR(<span class="keyword">false</span>, <span class="number">21004</span>, <span class="string">&quot;文件上传错误&quot;</span>),</span><br><span class="line">    FILE_DELETE_ERROR(<span class="keyword">false</span>, <span class="number">21005</span>, <span class="string">&quot;文件刪除错误&quot;</span>),</span><br><span class="line">    EXCEL_DATA_IMPORT_ERROR(<span class="keyword">false</span>, <span class="number">21006</span>, <span class="string">&quot;Excel数据导入错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    VIDEO_UPLOAD_ALIYUN_ERROR(<span class="keyword">false</span>, <span class="number">22001</span>, <span class="string">&quot;视频上传至阿里云失败&quot;</span>),</span><br><span class="line">    VIDEO_UPLOAD_TOMCAT_ERROR(<span class="keyword">false</span>, <span class="number">22002</span>, <span class="string">&quot;视频上传至业务服务器失败&quot;</span>),</span><br><span class="line">    VIDEO_DELETE_ALIYUN_ERROR(<span class="keyword">false</span>, <span class="number">22003</span>, <span class="string">&quot;阿里云视频文件删除失败&quot;</span>),</span><br><span class="line">    FETCH_VIDEO_UPLOADAUTH_ERROR(<span class="keyword">false</span>, <span class="number">22004</span>, <span class="string">&quot;获取上传地址和凭证失败&quot;</span>),</span><br><span class="line">    REFRESH_VIDEO_UPLOADAUTH_ERROR(<span class="keyword">false</span>, <span class="number">22005</span>, <span class="string">&quot;刷新上传地址和凭证失败&quot;</span>),</span><br><span class="line">    FETCH_PLAYAUTH_ERROR(<span class="keyword">false</span>, <span class="number">22006</span>, <span class="string">&quot;获取播放凭证失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    URL_ENCODE_ERROR(<span class="keyword">false</span>, <span class="number">23001</span>, <span class="string">&quot;URL编码失败&quot;</span>),</span><br><span class="line">    ILLEGAL_CALLBACK_REQUEST_ERROR(<span class="keyword">false</span>, <span class="number">23002</span>, <span class="string">&quot;非法回调请求&quot;</span>),</span><br><span class="line">    FETCH_ACCESSTOKEN_FAILD(<span class="keyword">false</span>, <span class="number">23003</span>, <span class="string">&quot;获取accessToken失败&quot;</span>),</span><br><span class="line">    FETCH_USERINFO_ERROR(<span class="keyword">false</span>, <span class="number">23004</span>, <span class="string">&quot;获取用户信息失败&quot;</span>),</span><br><span class="line">    LOGIN_ERROR(<span class="keyword">false</span>, <span class="number">23005</span>, <span class="string">&quot;登录失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    COMMENT_EMPTY(<span class="keyword">false</span>, <span class="number">24006</span>, <span class="string">&quot;评论内容必须填写&quot;</span>),</span><br><span class="line"></span><br><span class="line">    PAY_RUN(<span class="keyword">false</span>, <span class="number">25000</span>, <span class="string">&quot;支付中&quot;</span>),</span><br><span class="line">    PAY_UNIFIEDORDER_ERROR(<span class="keyword">false</span>, <span class="number">25001</span>, <span class="string">&quot;统一下单错误&quot;</span>),</span><br><span class="line">    PAY_ORDERQUERY_ERROR(<span class="keyword">false</span>, <span class="number">25002</span>, <span class="string">&quot;查询支付结果错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    ORDER_EXIST_ERROR(<span class="keyword">false</span>, <span class="number">25003</span>, <span class="string">&quot;课程已购买&quot;</span>),</span><br><span class="line"></span><br><span class="line">    GATEWAY_ERROR(<span class="keyword">false</span>, <span class="number">26000</span>, <span class="string">&quot;服务不能访问&quot;</span>),</span><br><span class="line"></span><br><span class="line">    CODE_ERROR(<span class="keyword">false</span>, <span class="number">28000</span>, <span class="string">&quot;验证码错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    LOGIN_PHONE_ERROR(<span class="keyword">false</span>, <span class="number">28009</span>, <span class="string">&quot;手机号码不正确&quot;</span>),</span><br><span class="line">    LOGIN_MOBILE_ERROR(<span class="keyword">false</span>, <span class="number">28001</span>, <span class="string">&quot;账号不正确&quot;</span>),</span><br><span class="line">    LOGIN_PASSWORD_ERROR(<span class="keyword">false</span>, <span class="number">28008</span>, <span class="string">&quot;密码不正确&quot;</span>),</span><br><span class="line">    LOGIN_DISABLED_ERROR(<span class="keyword">false</span>, <span class="number">28002</span>, <span class="string">&quot;该用户已被禁用&quot;</span>),</span><br><span class="line">    REGISTER_MOBLE_ERROR(<span class="keyword">false</span>, <span class="number">28003</span>, <span class="string">&quot;手机号已被注册&quot;</span>),</span><br><span class="line">    LOGIN_AUTH(<span class="keyword">false</span>, <span class="number">28004</span>, <span class="string">&quot;需要登录&quot;</span>),</span><br><span class="line">    LOGIN_ACL(<span class="keyword">false</span>, <span class="number">28005</span>, <span class="string">&quot;没有权限&quot;</span>),</span><br><span class="line">    SMS_SEND_ERROR(<span class="keyword">false</span>, <span class="number">28006</span>, <span class="string">&quot;短信发送失败&quot;</span>),</span><br><span class="line">    SMS_SEND_ERROR_BUSINESS_LIMIT_CONTROL(<span class="keyword">false</span>, <span class="number">28007</span>, <span class="string">&quot;短信发送过于频繁&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    ResultCodeEnum(Boolean success, Integer code, String message) &#123;</span><br><span class="line">        <span class="keyword">this</span>.success = success;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2、创建结果类"><a href="#2-2、创建结果类" class="headerlink" title="2.2、创建结果类"></a>2.2、创建结果类</h3><blockquote><p>对于返回数据有两种赋值方法，一是传入一个Map对象，二是传入一个Key和一个Value。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;全局统一返回结果&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">R</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;是否成功&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;返回码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;返回消息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;返回数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; data = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">R</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> R <span class="title">ok</span><span class="params">()</span></span>&#123;</span><br><span class="line">        R r = <span class="keyword">new</span> R();</span><br><span class="line">        r.setSuccess(ResultCodeEnum.SUCCESS.getSuccess());</span><br><span class="line">        r.setCode(ResultCodeEnum.SUCCESS.getCode());</span><br><span class="line">        r.setMessage(ResultCodeEnum.SUCCESS.getMessage());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> R <span class="title">error</span><span class="params">()</span></span>&#123;</span><br><span class="line">        R r = <span class="keyword">new</span> R();</span><br><span class="line">        r.setSuccess(ResultCodeEnum.UNKNOWN_REASON.getSuccess());</span><br><span class="line">        r.setCode(ResultCodeEnum.UNKNOWN_REASON.getCode());</span><br><span class="line">        r.setMessage(ResultCodeEnum.UNKNOWN_REASON.getMessage());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> R <span class="title">setResult</span><span class="params">(ResultCodeEnum resultCodeEnum)</span></span>&#123;</span><br><span class="line">        R r = <span class="keyword">new</span> R();</span><br><span class="line">        r.setSuccess(resultCodeEnum.getSuccess());</span><br><span class="line">        r.setCode(resultCodeEnum.getCode());</span><br><span class="line">        r.setMessage(resultCodeEnum.getMessage());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">success</span><span class="params">(Boolean success)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setSuccess(success);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">message</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">code</span><span class="params">(Integer code)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setCode(code);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">data</span><span class="params">(String key, Object value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">data</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setData(map);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、分页条件查询"><a href="#3、分页条件查询" class="headerlink" title="3、分页条件查询"></a>3、分页条件查询</h2><h3 id="3-1、需求说明"><a href="#3-1、需求说明" class="headerlink" title="3.1、需求说明"></a>3.1、需求说明</h3><blockquote><p>在讲师分页列表中，我们需要根据讲师名进行模糊查询，根据讲师头衔、讲师入驻时间进行查询。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210212210910.png" alt="image-20210212210909529"></p><h3 id="3-2、创建查询对象"><a href="#3-2、创建查询对象" class="headerlink" title="3.2、创建查询对象"></a>3.2、创建查询对象</h3><blockquote><p>创建讲师条件查询类TeacherQueryVo，该类定义了3.1中的四个条件属性。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherQueryVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line">    <span class="keyword">private</span> String joinDateBegin;</span><br><span class="line">    <span class="keyword">private</span> String joinDateEnd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3、在TeacherController中编写一个分页条件查询接口"><a href="#3-3、在TeacherController中编写一个分页条件查询接口" class="headerlink" title="3.3、在TeacherController中编写一个分页条件查询接口"></a>3.3、在TeacherController中编写一个分页条件查询接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 实现条件查询带分页查询的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page 当前页</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> limit 每页记录数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> queryVo 条件封装成的查询对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 总记录数及讲师列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;list/&#123;page&#125;/&#123;limit&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;实现条件查询带分页&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">listPage</span><span class="params">(<span class="meta">@ApiParam(value = &quot;当前页&quot;,required = true)</span> <span class="meta">@PathVariable(&quot;page&quot;)</span> Long page,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="meta">@ApiParam(value = &quot;每页记录数&quot;,required = true)</span> <span class="meta">@PathVariable(&quot;limit&quot;)</span> Long limit,</span></span></span><br><span class="line"><span class="function"><span class="params">                  TeacherQueryVo queryVo)</span> </span>&#123;</span><br><span class="line">    Page&lt;Teacher&gt; pageParam = <span class="keyword">new</span> Page&lt;&gt;(page, limit);</span><br><span class="line">    IPage&lt;Teacher&gt; pageModel = teacherService.selectPage(pageParam, queryVo);</span><br><span class="line">    List&lt;Teacher&gt; records = pageModel.getRecords();</span><br><span class="line">    <span class="keyword">long</span> total = pageModel.getTotal();</span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">&quot;total&quot;</span>, total).data(<span class="string">&quot;rows&quot;</span>, records);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4、在Service层实现selectPage方法"><a href="#3-4、在Service层实现selectPage方法" class="headerlink" title="3.4、在Service层实现selectPage方法"></a>3.4、在Service层实现selectPage方法</h3><blockquote><p>这个方法接收传入的分页对象和条件查询对象，首先对传入的条件对象进行判断，如果条件对象为空，那么直接进行一次普通的分页查询;</p><p>如果条件对象不为空，那么分别取出其中的四个属性，根据属性类型使用QueryWrapper拼接不为空的条件属性。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IPage&lt;Teacher&gt; <span class="title">selectPage</span><span class="params">(Page&lt;Teacher&gt; pageParam, TeacherQueryVo teacherQueryVo)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示分页查询列表</span></span><br><span class="line"><span class="comment">//        1、排序：按照sort字段排序</span></span><br><span class="line">    QueryWrapper&lt;Teacher&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.orderByAsc(<span class="string">&quot;sort&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2、分页查询</span></span><br><span class="line">    <span class="keyword">if</span>(teacherQueryVo == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectPage(pageParam, queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        3、条件查询</span></span><br><span class="line">    String name = teacherQueryVo.getName();</span><br><span class="line">    Integer level = teacherQueryVo.getLevel();</span><br><span class="line">    String joinDateBegin = teacherQueryVo.getJoinDateBegin();</span><br><span class="line">    String joinDateEnd = teacherQueryVo.getJoinDateEnd();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(name))&#123;</span><br><span class="line">        queryWrapper.likeRight(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(level != <span class="keyword">null</span>)&#123;</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;level&quot;</span>, level);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(joinDateBegin))&#123;</span><br><span class="line">        queryWrapper.ge(<span class="string">&quot;join_date&quot;</span>, joinDateBegin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(joinDateEnd))&#123;</span><br><span class="line">        queryWrapper.le(<span class="string">&quot;join_date&quot;</span>, joinDateEnd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> baseMapper.selectPage(pageParam, queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5、测试"><a href="#3-5、测试" class="headerlink" title="3.5、测试"></a>3.5、测试</h3><blockquote><p>打开swagger，进行测试</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210212213414.png" alt="image-20210212213413862"></p><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210212213429.png" alt="image-20210212213429863"></p><h2 id="4、订单操作"><a href="#4、订单操作" class="headerlink" title="4、订单操作"></a>4、订单操作</h2><blockquote><p>由于只有登录后的用户才可以下订单，而且订单除了必需的商品号外，还必须有用户号，在合法用户登录后，我们会下发给用户一个token，在之后的订单操作中，用户需要在发起请求的时候在请求头中带上这个token，服务器解析请求头中的token后即可获取用户id。</p></blockquote><h3 id="4-1、创建JWTUtils"><a href="#4-1、创建JWTUtils" class="headerlink" title="4.1、创建JWTUtils"></a>4.1、创建JWTUtils</h3><blockquote><p>这个工具类封装了一系列有关token的方法，包括根据密钥生成token，鉴定token是否合法，从请求中的token解析出用户信息等。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String APP_SECRET = <span class="string">&quot;ukc8BDbRigUDaY6pZFfWus2jZWLPHO&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Key <span class="title">getKeyInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = DatatypeConverter.parseBase64Binary(APP_SECRET);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SecretKeySpec(bytes,signatureAlgorithm.getJcaName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJwtToken</span><span class="params">(JwtInfo jwtInfo, <span class="keyword">int</span> expire)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String JwtToken = Jwts.builder()</span><br><span class="line">                .setHeaderParam(<span class="string">&quot;typ&quot;</span>, <span class="string">&quot;JWT&quot;</span>)</span><br><span class="line">                .setHeaderParam(<span class="string">&quot;alg&quot;</span>, <span class="string">&quot;HS256&quot;</span>)</span><br><span class="line">                .setSubject(<span class="string">&quot;guli-user&quot;</span>)<span class="comment">//主题</span></span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> Date())<span class="comment">//颁发时间</span></span><br><span class="line">                .setExpiration(DateTime.now().plusSeconds(expire).toDate())<span class="comment">//过期时间</span></span><br><span class="line">                .claim(<span class="string">&quot;id&quot;</span>, jwtInfo.getId())<span class="comment">//用户id</span></span><br><span class="line">                .claim(<span class="string">&quot;nickname&quot;</span>, jwtInfo.getNickname())<span class="comment">//用户昵称</span></span><br><span class="line">                .claim(<span class="string">&quot;avatar&quot;</span>, jwtInfo.getAvatar())<span class="comment">//用户头像</span></span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, getKeyInstance())</span><br><span class="line">                .compact();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JwtToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断token是否存在与有效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwtToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkJwtTToken</span><span class="params">(String jwtToken)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(jwtToken)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Jwts.parser().setSigningKey(getKeyInstance()).parseClaimsJws(jwtToken);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断token是否存在与有效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkJwtTToken</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String jwtToken = request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isEmpty(jwtToken)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Jwts.parser().setSigningKey(getKeyInstance()).parseClaimsJws(jwtToken);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据token获取会员id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JwtInfo <span class="title">getMemberIdByJwtToken</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String jwtToken = request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(jwtToken)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Jws&lt;Claims&gt; claimsJws = Jwts.parser().setSigningKey(getKeyInstance()).parseClaimsJws(jwtToken);</span><br><span class="line">        Claims claims = claimsJws.getBody();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtInfo(claims.get(<span class="string">&quot;id&quot;</span>).toString(), claims.get(<span class="string">&quot;nickname&quot;</span>).toString(), claims.get(<span class="string">&quot;avatar&quot;</span>).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2、新增订单–Controller层"><a href="#4-2、新增订单–Controller层" class="headerlink" title="4.2、新增订单–Controller层"></a>4.2、新增订单–Controller层</h3><blockquote><p>这个方法除了接收课程Id外，还需要接收一个HttpServletRequest对象，我们需要从这个request对象中获取用户信息（用户id）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;新增订单&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;auth/save/&#123;courseId&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">save</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@ApiParam(value = &quot;课程Id&quot;,required = true)</span></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@PathVariable</span> String courseId, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    JwtInfo jwtInfo = JwtUtils.getMemberIdByJwtToken(request);</span><br><span class="line">    <span class="comment">// 调用service层添加订单的方法，需要传入课程id和用户id</span></span><br><span class="line">    <span class="comment">// 这个方法将返回新增的订单id</span></span><br><span class="line">    String orderId = orderService.saveOrder(courseId,jwtInfo.getId());</span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">&quot;orderId&quot;</span>,orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3、新增订单–Service层"><a href="#4-3、新增订单–Service层" class="headerlink" title="4.3、新增订单–Service层"></a>4.3、新增订单–Service层</h3><blockquote><p>Service层中新增订单的流程如下：</p></blockquote><ul><li>根据传入的memberId和courseId作为条件，使用QueryWrapper查询该用户是否已经存在当前课程的订单<ul><li>如果已存在，直接返回已存在的订单号即可</li></ul></li><li>查询课程信息和用户信息是否存在</li><li>创建订单，使用一个工具类生成订单号，然后将上面根据课程号查询到的课程信息，根据用户id查询到的用户信息填入订单对象中。</li><li>向数据库中插入该对象，根据Mybatis-Plus的id自动回填功能将订单对象Id返回。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveOrder</span><span class="params">(String courseId, String memberId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1 查询当前用户是否已经存在当前课程的订单</span></span><br><span class="line">    QueryWrapper&lt;Order&gt; orderQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    orderQueryWrapper.eq(<span class="string">&quot;course_id&quot;</span>,courseId);</span><br><span class="line">    orderQueryWrapper.eq(<span class="string">&quot;member_id&quot;</span>,memberId);</span><br><span class="line">    Order orderExist = baseMapper.selectOne(orderQueryWrapper);</span><br><span class="line">    <span class="comment">//如果已经存在订单，直接返回查找到的订单id即可</span></span><br><span class="line">    <span class="keyword">if</span>(orderExist != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> orderExist.getId();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2 查询课程信息</span></span><br><span class="line">    CourseDto courseDto = eduCourseService.getCourseDtoById(courseId);</span><br><span class="line">    <span class="keyword">if</span>(courseDto == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果查询courseDto为空，直接抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> GrainException(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3 查询用户信息</span></span><br><span class="line">    MemberDto memberDto = eduMemberService.getMemberDtoByMemberId(memberId);</span><br><span class="line">    <span class="keyword">if</span>(memberDto == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果查询memberDto为空，直接抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> GrainException(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4 创建订单</span></span><br><span class="line">    Order order = <span class="keyword">new</span> Order();</span><br><span class="line">    order.setOrderNo(OrderNoUtils.getOrderNo());</span><br><span class="line">    order.setCourseId(courseId);</span><br><span class="line">    order.setCourseTitle(courseDto.getTitle());</span><br><span class="line">    order.setCourseCover(courseDto.getCover());</span><br><span class="line">    order.setTeacherName(courseDto.getTeacherName());</span><br><span class="line">    <span class="comment">//分</span></span><br><span class="line">    order.setTotalFee(courseDto.getPrice().multiply(<span class="keyword">new</span> BigDecimal(<span class="number">100</span>)));</span><br><span class="line">    order.setMemberId(memberId);</span><br><span class="line">    order.setMobile(memberDto.getMobile());</span><br><span class="line">    order.setNickname(memberDto.getNickname());</span><br><span class="line">    <span class="comment">//未支付</span></span><br><span class="line">    order.setStatus(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//微信支付</span></span><br><span class="line">    order.setPayType(<span class="number">1</span>);</span><br><span class="line">    baseMapper.insert(order);</span><br><span class="line">    <span class="keyword">return</span> order.getId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、定时任务"><a href="#5、定时任务" class="headerlink" title="5、定时任务"></a>5、定时任务</h2><h3 id="5-1、定时任务实现方式"><a href="#5-1、定时任务实现方式" class="headerlink" title="5.1、定时任务实现方式"></a>5.1、定时任务实现方式</h3><blockquote><p>Timer</p></blockquote><p>使用jdk的Timer和TimerTask可以实现简单的间隔执行任务，无法实现按日历去调度执行任务</p><blockquote><p>ScheduledThreadPool线程池</p></blockquote><p>创建可以延迟或定时执行任务的线程，无法实现按日历去调度执行任务</p><blockquote><p>quartz</p></blockquote><p>使用Quartz实现 Quartz 是一个异步任务调度框架，功能丰富，可以实现按日历调度</p><blockquote><p>Spring Task</p></blockquote><p>Spring 3.0后提供Spring Task实现任务调度，支持按日历调度，相比Quartz功能稍简单，但是开发基本够用，支持注解编程方式</p><h3 id="5-2、集成Spring-Task"><a href="#5-2、集成Spring-Task" class="headerlink" title="5.2、集成Spring Task"></a>5.2、集成Spring Task</h3><blockquote><p>在启动类中添加注解@EnableScheduling</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.hzx.grain&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceStatisticsApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServiceStatisticsApplication.class, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;http://localhost:8180/doc.html&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;http://localhost:8180/swagger-ui.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3、创建定时任务类"><a href="#5-3、创建定时任务类" class="headerlink" title="5.3、创建定时任务类"></a>5.3、创建定时任务类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DailyService dailyService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron=&quot;0/3 * * * * *&quot;)</span> <span class="comment">// 每隔3秒执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">task1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;task1 执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4、测试"><a href="#5-4、测试" class="headerlink" title="5.4、测试"></a>5.4、测试</h3><blockquote><p>查看控制台，可以发现控制台定时输出日志</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210212215219.png" alt="image-20210212215219245"></p><h3 id="5-5、在线生成cron表达式"><a href="#5-5、在线生成cron表达式" class="headerlink" title="5.5、在线生成cron表达式"></a>5.5、在线生成cron表达式</h3><blockquote><p><a href="http://cron.qqe2.com/">http://cron.qqe2.com/</a></p></blockquote><blockquote><p>参考教程如下：</p></blockquote><ul><li>[1]  <a href="https://www.bilibili.com/video/BV1fi4y1x7on">尚硅谷在线教育项目</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
            <tag> 👢Spring Boot </tag>
            
            <tag> 🆔JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法学习（四）-二分查找算法</title>
      <link href="posts/1801475703.html"/>
      <url>posts/1801475703.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1、二分查找算法"><a href="#1、二分查找算法" class="headerlink" title="1、二分查找算法"></a>1、二分查找算法</h2><blockquote><p>二分查找（Binary Search）也叫作折半查找。二分查找有两个要求，一个是数列有序，另一个是数列使用顺序存储结构（比如数组）。</p></blockquote><h2 id="2、二分查找算法的思路分析"><a href="#2、二分查找算法的思路分析" class="headerlink" title="2、二分查找算法的思路分析"></a>2、二分查找算法的思路分析</h2><blockquote><p>这里以数组[1,8,10,89,1000,1234]为例</p></blockquote><ul><li>首先确定该数组中间元素的下标mid</li></ul><blockquote><p>mid = [left+right] / 2</p></blockquote><ul><li>让需要查找的数findVal和arr[mid]比较，此时会出现以下几种情况<ul><li>findVal&gt;arr[mid]，说明要查找的数在mid的右边，因此我们需要递归向右查找</li><li>findVal&lt;arr[mid]，说明要查找的数在mid的左边，因此我们需要递归向左查找</li><li>findVal=arr[mid]，说明arr[mid]就是我们要寻找的值，直接返回mid</li></ul></li><li>结束递归的条件有<ul><li>找到目标值结束递归。</li><li>递归完整个数组仍然没有找到findVal，也需要结束递归。即当left&gt;right时结束递归。</li></ul></li></ul><h2 id="3、递归二分查找算法的代码实现"><a href="#3、递归二分查找算法的代码实现" class="headerlink" title="3、递归二分查找算法的代码实现"></a>3、递归二分查找算法的代码实现</h2><blockquote><p>递归退出条件1：寻找到目标值，此时返回mid</p><p>递归退出条件2：递归完整个数组没有找到目标值，此时left &gt; right，返回-1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 二分查找算法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 要查找的目标数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> left 本次查找的左边界</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> right 本次查找的右边界</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> findVal 要查找的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> findVal在arr中的下标，如果找不到返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> findVal)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt; right) &#123;</span><br><span class="line">        <span class="comment">//如果发现left值大于right值，那么证明此时数组已经递归完毕且数组中没有要寻找的值</span></span><br><span class="line">        <span class="comment">//此时需要返回-1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> midVal = arr[mid];</span><br><span class="line">    <span class="comment">//如果要寻找的值小于当前的midVal</span></span><br><span class="line">    <span class="keyword">if</span>(findVal &gt; midVal) &#123;</span><br><span class="line">        <span class="comment">//向右递归</span></span><br><span class="line">        <span class="keyword">return</span> binarySearch(arr,mid + <span class="number">1</span>,right,findVal);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(findVal &lt; midVal) &#123;</span><br><span class="line">        <span class="comment">//向左递归</span></span><br><span class="line">        <span class="keyword">return</span> binarySearch(arr,left,mid - <span class="number">1</span>,findVal);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h2><blockquote><p>测试找不到的情况</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">89</span>,<span class="number">1000</span>,<span class="number">1234</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> resultIndex = binarySearch(arr,<span class="number">0</span>, arr.length - <span class="number">1</span>,<span class="number">10000</span>);</span><br><span class="line">    System.out.println(resultIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210212170117.png" alt="image-20210212170116299"></p><blockquote><p>测试找得到的情况</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">89</span>,<span class="number">1000</span>,<span class="number">1234</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> resultIndex = binarySearch(arr,<span class="number">0</span>, arr.length - <span class="number">1</span>,<span class="number">8</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;resultIndex:&quot;</span> + resultIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210212170225.png" alt="image-20210212170225794"></p><h2 id="5、改进二分查找算法"><a href="#5、改进二分查找算法" class="headerlink" title="5、改进二分查找算法"></a>5、改进二分查找算法</h2><blockquote><p>在一个数组中，如果有多个值与findVal值相同时，要求将这些值的下标都找到</p><p>思路分析如下:</p></blockquote><ul><li><p>在找到mid索引值时，不要马上返回</p></li><li><p>向mid索引值的左边扫描，将所有等于findVal的元素下标进入到一个集合中</p></li><li><p>向mid索引值的右边扫描，将所有等于findVal的元素下标进入到一个集合中</p></li><li><p>返回下标集合</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 二分查找算法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 要查找的目标数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> left 本次查找的左边界</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> right 本次查找的右边界</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> findVal 要查找的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> findVal在arr中的下标，如果找不到返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">binarySearchAllElements</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> findVal)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt; right) &#123;</span><br><span class="line">        <span class="comment">//如果发现left值大于right值，那么证明此时数组已经递归完毕且数组中没有要寻找的值</span></span><br><span class="line">        <span class="comment">//此时需要返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> midVal = arr[mid];</span><br><span class="line">    <span class="comment">//如果要寻找的值小于当前的midVal</span></span><br><span class="line">    <span class="keyword">if</span>(findVal &gt; midVal) &#123;</span><br><span class="line">        <span class="comment">//向右递归</span></span><br><span class="line">        <span class="keyword">return</span> binarySearchAllElements(arr,mid + <span class="number">1</span>,right,findVal);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(findVal &lt; midVal) &#123;</span><br><span class="line">        <span class="comment">//向左递归</span></span><br><span class="line">        <span class="keyword">return</span> binarySearchAllElements(arr,left,mid - <span class="number">1</span>,findVal);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; resIndexList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//实现向左边扫描</span></span><br><span class="line">        <span class="keyword">int</span> temp = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//如果数组下标越界或者左边已经没有与findVal相等的值</span></span><br><span class="line">            <span class="keyword">if</span>(temp &lt; <span class="number">0</span> || arr[temp] != findVal) &#123;</span><br><span class="line">                <span class="comment">//退出</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            resIndexList.add(temp);</span><br><span class="line">            temp -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将mid加入到集合中</span></span><br><span class="line">        resIndexList.add(mid);</span><br><span class="line">        <span class="comment">//向右边扫描</span></span><br><span class="line">        temp = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp &gt; arr.length - <span class="number">1</span> || arr[temp] != findVal) &#123;</span><br><span class="line">                <span class="comment">//退出</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            resIndexList.add(temp);</span><br><span class="line">            temp += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resIndexList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">1000</span>,<span class="number">1000</span>,<span class="number">1000</span>,<span class="number">1234</span>,<span class="number">1999</span>&#125;;</span><br><span class="line">    List&lt;Integer&gt; result = binarySearchAllElements(arr,<span class="number">0</span>, arr.length - <span class="number">1</span>,<span class="number">1000</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;结果下标为：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210212171648.png" alt="image-20210212171648097"></p><h2 id="6、非递归实现二分查找算法"><a href="#6、非递归实现二分查找算法" class="headerlink" title="6、非递归实现二分查找算法"></a>6、非递归实现二分查找算法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> findVal)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果数组为空直接return -1</span></span><br><span class="line">    <span class="keyword">if</span>(arr == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//在left小于right的情况下进行循环</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(findVal &lt; arr[mid]) &#123;</span><br><span class="line">            <span class="comment">//说明此时需要向左进行查找</span></span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(findVal &gt; arr[mid]) &#123;</span><br><span class="line">            <span class="comment">//说明此时需要向右进行查找</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果上面没有返回，证明数组中没有findVal，直接返回-1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">888</span>,<span class="number">1000</span>,<span class="number">1111</span>,<span class="number">1234</span>,<span class="number">1999</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> resIndex = binarySearch(arr,<span class="number">5</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;resIndex的值为:&quot;</span> + resIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210212172431.png" alt="image-20210212172431234"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud学习（二）-OpenFeign微服务调用</title>
      <link href="posts/2863462089.html"/>
      <url>posts/2863462089.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、OpenFeign"><a href="#一、OpenFeign" class="headerlink" title="一、OpenFeign"></a>一、OpenFeign</h1><blockquote><p>OpenFeign是Spring Cloud提供的一个声明式的伪Http客户端， 它使得调用远程服务就像调用本地服务一样简单， 只需要<strong>创建一个接口并添加一个注解</strong>即可。</p><p>Nacos很好的兼容了OpenFeign， OpenFeign默认<strong>集成了 Ribbon</strong>， 所以在Nacos下使用OpenFeign默认就实现了负载均衡的效果。</p><p>Feign是一个声明式的web服务客户端，让编写web服务客户端变得非常容易，只需创建一个接口并在接口上添加注解即可</p></blockquote><h2 id="1-1、作用"><a href="#1-1、作用" class="headerlink" title="1.1、作用"></a>1.1、作用</h2><ul><li>Feign使得编写Java Http客户端变得更加容易。</li><li>在Feign的实现下，我们只需创建一个接口并使用注解的方式来配置它（以前是Dao接口上面标注Mapper注解，现在是一个微服务接口上面标注一个Feign注解即可），即可完成对服务提供方的接口绑定，简化了使用Spring cloud Ribbon时，自动封装服务调用客户端的开发量。</li><li>Feign集成了Ribbon利用Ribbon维护了Payment的服务列表信息，并且通过轮询实现了客户端的负载均衡。而与Ribbon不同的是，通过feign只需要定义服务绑定接口目以声明式的方法，优雅而简单的实现了服务调用。</li></ul><h2 id="1-2、Feign和OpenFeign"><a href="#1-2、Feign和OpenFeign" class="headerlink" title="1.2、Feign和OpenFeign"></a>1.2、Feign和OpenFeign</h2><table><thead><tr><th>Feign</th><th>OpenFeign</th></tr></thead><tbody><tr><td>Feign是Spring Cloud组件中的一个轻量级RESTful的HTTP服务客户端Feign内置了Ribbon，用来做客户端负载均衡，去调用服务注册中心的服务。Feign的使用方式是：使用Feign的注解定义接口，调用这个接口，就可以调用服务注册中心的服务。</td><td>OpenFeign是Spring Cloud 在Feign的基础上支持了Spring MVC的注解，如@RequesMapping等等。OpenFeign的@FeignClient可以解析Spring MVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</td></tr></tbody></table><h2 id="1-3、OpenFeign使用步骤"><a href="#1-3、OpenFeign使用步骤" class="headerlink" title="1.3、OpenFeign使用步骤"></a>1.3、OpenFeign使用步骤</h2><h3 id="1、创建微服务提供者集群"><a href="#1、创建微服务提供者集群" class="headerlink" title="1、创建微服务提供者集群"></a>1、创建微服务提供者集群</h3><blockquote><p>创建微服务模块cloud-provider-payment8001和cloud-provider-payment8002，payment微服务的控制器为：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;支付功能控制器&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id查询订单&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        Payment result = paymentService.getPaymentById(id);</span><br><span class="line">        <span class="keyword">if</span>(result == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">404</span>,<span class="string">&quot;数据库中没有该订单！端口为：&quot;</span> + serverPort,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">200</span>,<span class="string">&quot;成功！端口为：&quot;</span> + serverPort,result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、创建OpenFeign客户端"><a href="#2、创建OpenFeign客户端" class="headerlink" title="2、创建OpenFeign客户端"></a>2、创建OpenFeign客户端</h3><blockquote><p>创建微服务模块cloud-consumer-feign-order80，这个微服务需要调用payment微服务中的接口。</p><p>注：OpenFeign是在<strong>消费端（微服务调用者端）</strong>使用的。</p></blockquote><h3 id="3、引入依赖"><a href="#3、引入依赖" class="headerlink" title="3、引入依赖"></a>3、引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cloudstudy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>OpenFeign中自动集成了Ribbon，实现了负载均衡</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211214254.png" alt="image-20210211214254211"></p><h3 id="4、编写yml配置文件"><a href="#4、编写yml配置文件" class="headerlink" title="4、编写yml配置文件"></a>4、编写yml配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 不注册入eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,</span> <span class="string">http://eureka7002.com:7002/eureka</span></span><br></pre></td></tr></table></figure><h3 id="5、编写启动类，添加-EnableFeignClients注解激活OpenFeign"><a href="#5、编写启动类，添加-EnableFeignClients注解激活OpenFeign" class="headerlink" title="5、编写启动类，添加@EnableFeignClients注解激活OpenFeign"></a>5、编写启动类，添加@EnableFeignClients注解激活OpenFeign</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//激活并开启OpenFeign</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderFeignMain80.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、编写一个Service接口，用于远程调用payment微服务"><a href="#6、编写一个Service接口，用于远程调用payment微服务" class="headerlink" title="6、编写一个Service接口，用于远程调用payment微服务"></a>6、编写一个Service接口，用于远程调用payment微服务</h3><blockquote><p>注意点：</p><ul><li>在Service接口上添加一个@FeignClient注解，value值为要调用的微服务在注册中心中注册的服务名；</li><li>需要完整添加远程调用接口的全路径</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;cloud-payment-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentFeignService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、在OpenFeign微服务中编写Controller"><a href="#7、在OpenFeign微服务中编写Controller" class="headerlink" title="7、在OpenFeign微服务中编写Controller"></a>7、在OpenFeign微服务中编写Controller</h3><blockquote><p>这个Controller调用上面写的OpenFeign服务接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentFeignService paymentFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、测试"><a href="#8、测试" class="headerlink" title="8、测试"></a>8、测试</h3><blockquote><p>启动eureka7001、payment8001、payment8002集群和openfeign微服务。</p></blockquote><ul><li>由于openfeign微服务没有被我们注册入eureka，所以eureka注册中心显示如下</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211220835.png" alt="image-20210211220835349"></p><ul><li>使用openfeign微服务远程调用payment微服务中的方法</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211221340.png" alt="image-20210211221340700"></p><h2 id="1-4、OpenFeign超时控制"><a href="#1-4、OpenFeign超时控制" class="headerlink" title="1.4、OpenFeign超时控制"></a>1.4、OpenFeign超时控制</h2><h3 id="1、OpenFeign默认等待时间"><a href="#1、OpenFeign默认等待时间" class="headerlink" title="1、OpenFeign默认等待时间"></a>1、OpenFeign默认等待时间</h3><blockquote><p>OpenFeign默认等待时间为1秒钟，若服务提供方超过这个时间则直接报错。</p></blockquote><h3 id="2、演示超时出错情况"><a href="#2、演示超时出错情况" class="headerlink" title="2、演示超时出错情况"></a>2、演示超时出错情况</h3><blockquote><p>在服务提供方payment微服务中新添一个接口，在接口中模拟超时情况</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/feign/timeout&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeOut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在被调用的服务提供方中休眠三秒</span></span><br><span class="line">    <span class="comment">//用于模拟长流程调用</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException interruptedException) &#123;</span><br><span class="line">        interruptedException.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> serverPort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、在OpenFeign微服务中添加远程调用接口"><a href="#3、在OpenFeign微服务中添加远程调用接口" class="headerlink" title="3、在OpenFeign微服务中添加远程调用接口"></a>3、在OpenFeign微服务中添加远程调用接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/feign/timeout&quot;)</span></span><br><span class="line">   <span class="function">String <span class="title">paymentFeignTimeOut</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h3 id="4、在OpenFeign微服务控制器中添加接口"><a href="#4、在OpenFeign微服务控制器中添加接口" class="headerlink" title="4、在OpenFeign微服务控制器中添加接口"></a>4、在OpenFeign微服务控制器中添加接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/consumer/feign/timeout&quot;)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeOut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> paymentFeignService.paymentFeignTimeOut();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h3><blockquote><p>先访问payment微服务中新增的接口</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211222304.png" alt="image-20210211222304721"></p><blockquote><p>测试远程调用payment微服务的超时接口</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211222545.png" alt="image-20210211222545603"></p><h3 id="6、设置OpenFeign的超时时间"><a href="#6、设置OpenFeign的超时时间" class="headerlink" title="6、设置OpenFeign的超时时间"></a>6、设置OpenFeign的超时时间</h3><blockquote><p>修改yml配置文件</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置Feign客户端的超时时间(OpenFeign默认支持Ribbon)</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="comment">#指的是建立连接所用的时间，适用于网络正常的情况下</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><blockquote><p>重启OpenFeign微服务，测试</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211222811.png" alt="image-20210211222811217"></p><h2 id="1-5、OpenFeign的日志打印功能"><a href="#1-5、OpenFeign的日志打印功能" class="headerlink" title="1.5、OpenFeign的日志打印功能"></a>1.5、OpenFeign的日志打印功能</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><blockquote><p>Feign 提供了日志打印功能，我们可以通过配置来调整日志级别，从而了解 Feign中Http请求的细节。<br>说白了就是对Feign接口的调用情况进行监控和输出</p></blockquote><h3 id="2、级别说明"><a href="#2、级别说明" class="headerlink" title="2、级别说明"></a>2、级别说明</h3><ul><li>NONE:默认的，不显示任何日志；</li><li>BASIC：仅记录请求方法、URL、响应状态码及执行时间；</li><li>HEADERS:除了BASIC中定义的信息之外，还有请求和响应的头信息；</li><li>FULL:除了HEADERS中定义的信息之外，还有请求和响应的正文及元数据。</li></ul><h3 id="3、编写配置类，配置日志输出级别"><a href="#3、编写配置类，配置日志输出级别" class="headerlink" title="3、编写配置类，配置日志输出级别"></a>3、编写配置类，配置日志输出级别</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignLogConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 开启详细日志</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、在yml文件中开启日志的Feign客户端"><a href="#4、在yml文件中开启日志的Feign客户端" class="headerlink" title="4、在yml文件中开启日志的Feign客户端"></a>4、在yml文件中开启日志的Feign客户端</h3><blockquote><p>指定Feign以什么级别监控哪个接口</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="comment"># feign日志以什么级别监控哪个接口</span></span><br><span class="line">    <span class="attr">com.hzx.springcloud.service.PaymentFeignService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h3 id="5、再次测试，查看日志输出"><a href="#5、再次测试，查看日志输出" class="headerlink" title="5、再次测试，查看日志输出"></a>5、再次测试，查看日志输出</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211223406.png" alt="image-20210211223406662"></p><blockquote><p>日志输出情况</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211223450.png" alt="image-20210211223450652"></p><h1 id="二、在线教育项目整合OpenFeign"><a href="#二、在线教育项目整合OpenFeign" class="headerlink" title="二、在线教育项目整合OpenFeign"></a>二、在线教育项目整合OpenFeign</h1><blockquote><p>在线教育中，我们创建了两个用于与阿里云交互的微服务，分别为用于文件上传的oss微服务和用于视频点播的vod微服务，在其他微服务中，我们需要远程调用这两个微服务中的接口来完成业务需求。</p></blockquote><h2 id="2-1、远程调用OSS微服务"><a href="#2-1、远程调用OSS微服务" class="headerlink" title="2.1、远程调用OSS微服务"></a>2.1、远程调用OSS微服务</h2><blockquote><p>在删除讲师信息时，我们希望一同删除该讲师上传至阿里云中的头像文件，该过程中需要远程调用oss微服务中的文件删除接口</p></blockquote><h3 id="1、Oss微服务中的文件删除接口"><a href="#1、Oss微服务中的文件删除接口" class="headerlink" title="1、Oss微服务中的文件删除接口"></a>1、Oss微服务中的文件删除接口</h3><ul><li>Controller层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;remove&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;图片文件删除&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">removeFile</span><span class="params">(<span class="meta">@RequestBody</span> String url)</span> </span>&#123;</span><br><span class="line">    fileService.removeFile(url);</span><br><span class="line">    <span class="keyword">return</span> R.ok().message(<span class="string">&quot;文件删除成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Service实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeFile</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//读取配置信息</span></span><br><span class="line">    String endpoint = ossProperties.getEndpoint();</span><br><span class="line">    String keyid = ossProperties.getKeyid();</span><br><span class="line">    String keysecret = ossProperties.getKeysecret();</span><br><span class="line">    String bucketname = ossProperties.getBucketname();</span><br><span class="line">    <span class="comment">//创建OSSClient实例</span></span><br><span class="line">    OSS ossClient = <span class="keyword">new</span> OSSClientBuilder().build(endpoint,keyid,keysecret);</span><br><span class="line">    <span class="comment">//获取要删除的文件名，根据url获取</span></span><br><span class="line">    <span class="comment">//主机名</span></span><br><span class="line">    String host = <span class="string">&quot;https://&quot;</span> + bucketname + <span class="string">&quot;.&quot;</span> + endpoint + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    <span class="comment">//从主机名长度的下标开始截取，就可以获取文件名</span></span><br><span class="line">    String objectName = url.substring(host.length());</span><br><span class="line">    System.out.println(objectName);</span><br><span class="line">    ossClient.deleteObject(bucketname,objectName);</span><br><span class="line">    <span class="comment">//关闭OSSClient</span></span><br><span class="line">    ossClient.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、在edu微服务中远程调用Oss微服务"><a href="#2、在edu微服务中远程调用Oss微服务" class="headerlink" title="2、在edu微服务中远程调用Oss微服务"></a>2、在edu微服务中远程调用Oss微服务</h3><blockquote><p>在edu微服务中创建一个feign包，包下存放远程调用接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;service-oss&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OssFileService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 远程调用OSS微服务中的控制器方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/admin/oss/file/remove&quot;)</span></span><br><span class="line">    <span class="function">R <span class="title">removeFile</span><span class="params">(<span class="meta">@RequestBody</span> String url)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在edu微服务中调用feign接口删除讲师头像</p><p>teacherService.removeAvatarById(id);</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 根据id删除讲师</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 要删除的讲师id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 删除结果及提示信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;remove/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;根据ID删除讲师&quot;, notes = &quot;根据ID删除讲师&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">removeById</span><span class="params">(<span class="meta">@ApiParam(value = &quot;讲师id&quot;,required = true)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//删除讲师前先删除讲师头像</span></span><br><span class="line">    teacherService.removeAvatarById(id);</span><br><span class="line">    <span class="keyword">boolean</span> flag = teacherService.removeById(id);</span><br><span class="line">    <span class="keyword">return</span> flag ? R.ok().message(<span class="string">&quot;删除成功！&quot;</span>) : R.error().message(<span class="string">&quot;删除失败！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>removeAvatarById(id)方法如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">TeacherMapper</span>, <span class="title">Teacher</span>&gt; <span class="keyword">implements</span> <span class="title">TeacherService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 注入远程调用接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OssFileService ossFileService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAvatarById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1 根据id获取讲师avatar的url</span></span><br><span class="line">        Teacher teacher = baseMapper.selectById(id);</span><br><span class="line">        <span class="keyword">if</span>(teacher != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String avatarUrl = teacher.getAvatar();</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isNotBlank(avatarUrl)) &#123;</span><br><span class="line">                <span class="comment">//头像不为空才进行远程调用</span></span><br><span class="line">                R r = ossFileService.removeFile(avatarUrl);</span><br><span class="line">                <span class="keyword">return</span> r.getSuccess();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
            <tag> 👢Spring Boot </tag>
            
            <tag> 👥OpenFeign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud学习（一）-GateWay网关</title>
      <link href="posts/337037609.html"/>
      <url>posts/337037609.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、网关基本概念"><a href="#一、网关基本概念" class="headerlink" title="一、网关基本概念"></a>一、网关基本概念</h1><h2 id="1-1、API网关介绍"><a href="#1-1、API网关介绍" class="headerlink" title="1.1、API网关介绍"></a>1.1、API网关介绍</h2><blockquote><p>API 网关出现的原因是微服务架构的出现，不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信，会有以下的问题：</p></blockquote><ul><li><p>客户端会多次请求不同的微服务，增加了客户端的复杂性。</p></li><li><p>存在跨域请求，在一定场景下处理相对复杂。</p></li><li><p>认证复杂，每个服务都需要独立认证。</p></li><li><p>难以重构，随着项目的迭代，可能需要重新划分微服务。例如，可能将多个服务合并成一个或者将一个服务拆分成多个。如果客户端直接与微服务通信，那么重构将会很难实施。</p></li></ul><p>以上这些问题可以借助 API 网关解决。API 网关是介于客户端和服务器端之间的中间层，所有的外部请求都会先经过 API 网关这一层。也就是说，API 的实现方面更多的考虑业务逻辑，而安全、性能、监控可以交由 API 网关来做，这样既提高业务灵活性又不缺安全性</p><blockquote><p>假设一个电商项目，购买一件商品需要调用多个微服务接口，才能完成下单操作，在没有使用网关之前，用户的操作流程图是这样的：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211121506.png" alt="image-20210211121505821"></p><blockquote><p>在引入网关后，架构可以演变为下图</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211121759.png" alt="image-20210211121759523"></p><blockquote><p>微服务网关是程序的大门，封装了应用程序的内部结构，用户只需要跟网关交互，无需调用特定微服务接口。</p><p>这样，开发就可以得到简化。不仅如此，使用微服务网关还有以下优点：</p></blockquote><ul><li>易于监控。可在微服务网关收集监控数据并将其推送到外部系统进行分析。</li><li>易于认证。可在微服务网关上进行认证，然后再将请求转发到后端的微服务，而无须在每个微服务中进行认证。</li><li>减少了客户端与各个微服务之间的交互次数。</li></ul><h2 id="1-2、Spring-Cloud-GateWay"><a href="#1-2、Spring-Cloud-GateWay" class="headerlink" title="1.2、Spring Cloud GateWay"></a>1.2、Spring Cloud GateWay</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><blockquote><p><strong>Spring cloud gateway</strong>是spring官方基于Spring 5.0、Spring Boot2.0和Project Reactor等技术开发的网关，Spring Cloud Gateway旨在为微服务架构提供简单、有效和统一的API路由管理方式，Spring Cloud Gateway作为Spring Cloud生态系统中的网关，目标是替代Netflix Zuul，其不仅提供统一的路由方式，并且还基于Filer链的方式提供了网关基本的功能，例如：安全、监控/埋点、限流等。</p><p>Spring Cloud Gateway作为Spring Cloud生态系统中的网关，目的是为了替代Zuul，在Spring Cloud2.0以上版本中，没有对新版本的Zuul 2.0以上的新高版本进行集成，仍然还是使用Zuul 1.x非Reactor模式的老版本。Gateway是<strong>基于webFlux框架实现的</strong>，<strong>WebFlux框架底层</strong>使用了<strong>高性能</strong>的Reactor模式通信框架<strong>Netty</strong>。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211130506.png" alt="img"></p><blockquote><p>作用：</p></blockquote><ul><li>反向代理</li><li>统一鉴权</li><li>流量控制</li><li>熔断</li><li>日志监控</li></ul><blockquote><p>所处位置</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211130628.png" alt="img"></p><h3 id="2、核心概念"><a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念</h3><ul><li><p><strong>路由</strong>：路由是网关最基础的部分，路由信息有一个ID、一个目的URL、一组断言和一组Filter组成。如果断言路由为真，则说明请求的URL和配置匹配</p><ul><li>id：路由id，没有起名规则，但要求唯一</li><li>uri：匹配路由的转发地址</li><li>predicates：配置该路由的断言，若符合该断言则会转发到匹配的地址</li><li>order：路由的优先级，数字越小优先级越高</li></ul></li><li><p><strong>断言</strong>：Java8中的断言函数。Spring Cloud Gateway中的断言函数允许开发者去定义匹配来自于http request中的任何信息，比如请求头和参数等。</p></li><li><p><strong>过滤器</strong>：一个标准的Spring webFilter。Spring cloud gateway中的filter分为两种类型的Filter，分别是Gateway Filter和Global Filter。过滤器Filter将会对请求和响应进行修改处理。</p></li></ul><h3 id="3、执行流程"><a href="#3、执行流程" class="headerlink" title="3、执行流程"></a>3、执行流程</h3><blockquote><p>如下图所示，Spring cloud Gateway发出请求。然后再由Gateway Handler Mapping中找到与请求相匹配的路由，将其发送到Gateway web handler。Handler再通过指定的过滤器链将请求发送到我们实际的服务执行业务逻辑，然后返回。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211130419.png" alt="image-20210211130417182"></p><ul><li>Filter中，”pre”类型的过滤器可以做参数校验、权限校验、流量控制、日志输出和协议转换等。”post”类型的过滤器可以做相应内容、响应头的修改、日志的输出、流量监控。</li><li>核心逻辑：路由转发+执行过滤器链。</li></ul><h3 id="4、特点"><a href="#4、特点" class="headerlink" title="4、特点"></a>4、特点</h3><p>优点：</p><ul><li>性能强劲：是第一代网关Zuul的1.6倍</li><li>功能强大：内置了很多实用的功能，例如转发、监控、限流等</li><li>设计优雅，容易扩展</li></ul><p>缺点：</p><ul><li>其实现依赖Netty与WebFlux，不是传统的Servlet编程模型，学习成本高</li><li>不能将其部署在Tomcat、Jetty等Servlet容器里，只能打成jar包执行</li><li>需要Spring Boot 2.0及以上的版本，才支持</li></ul><h1 id="二、网关使用"><a href="#二、网关使用" class="headerlink" title="二、网关使用"></a>二、网关使用</h1><h2 id="2-1、创建网关微服务cloud-gateway-9527"><a href="#2-1、创建网关微服务cloud-gateway-9527" class="headerlink" title="2.1、创建网关微服务cloud-gateway-9527"></a>2.1、创建网关微服务cloud-gateway-9527</h2><blockquote><p>pom.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--新增gateway--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cloudstudy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>application.yml配置文件</p></blockquote><p>application.yml文件中添加路由配置</p><ul><li>-：表示数组元素，可以配置多个节点</li><li>id：配置的唯一标识，可以和微服务同名，也可以起别的名字，区别于其他 Route。</li><li>uri：路由指向的目的地 uri，即客户端请求最终被转发到的微服务。</li><li>predicates：断言的作用是进行条件判断，只有断言都返回真，才会真正的执行路由。</li><li>Path：路径形式的断言。当匹配这个路径时，断言条件成立</li><li>/**：一个或多个层次的路径</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span> <span class="comment">#注册到eureka中的应用名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#路由id，没有命名规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span>  <span class="comment">#断言，路径相匹配的进行路由</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>  <span class="comment">#断言，路径相匹配的进行路由</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayMain9527</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GatewayMain9527.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2、Payment8001"><a href="#2-2、Payment8001" class="headerlink" title="2.2、Payment8001"></a>2.2、Payment8001</h2><blockquote><p>在payment微服务中有两个重要接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id查询订单&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">    Payment result = paymentService.getPaymentById(id);</span><br><span class="line">    <span class="keyword">if</span>(result == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">404</span>,<span class="string">&quot;数据库中没有该订单！端口为：&quot;</span> + serverPort,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">200</span>,<span class="string">&quot;成功！端口为：&quot;</span> + serverPort,result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/lb&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPaymentLB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> serverPort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们希望通过网关在payment服务的8001端口外再包裹一层9527端口，让用户无法直接访问8001端口。</p></blockquote><h2 id="2-3、启动微服务，进行测试"><a href="#2-3、启动微服务，进行测试" class="headerlink" title="2.3、启动微服务，进行测试"></a>2.3、启动微服务，进行测试</h2><blockquote><p>启动eureka7001、payment8001和gateway9527</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211132551.png" alt="image-20210211132551232"></p><blockquote><p>通过localhost:8001/payment/lb访问payment微服务</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211132713.png" alt="image-20210211132713170"></p><blockquote><p>通过网关，即9527端口访问payment微服务</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211133144.png" alt="image-20210211133144911"></p><blockquote><p>访问说明</p></blockquote><ul><li>payment微服务控制器的访问路径</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211133943.png" alt="image-20210211133942958"></p><ul><li>如果访问路径匹配路由断言，则转发到指定uri</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211134300.png" alt="image-20210211134259898"></p><h2 id="2-4、配置路由的另一种方式"><a href="#2-4、配置路由的另一种方式" class="headerlink" title="2.4、配置路由的另一种方式"></a>2.4、配置路由的另一种方式</h2><blockquote><p>使用网关，让网关帮我们跳转到百度新闻页面</p></blockquote><ul><li>如果访问路径匹配路由断言/guoji，则帮我们跳转到<a href="http://news.baidu.com/guoji">http://news.baidu.com/guoji</a></li><li>如果访问路径匹配路由断言/guonei，则帮我们跳转到<a href="http://news.baidu.com/guonei">http://news.baidu.com/guonei</a></li></ul><h3 id="1、创建一个GateWayConfig配置类"><a href="#1、创建一个GateWayConfig配置类" class="headerlink" title="1、创建一个GateWayConfig配置类"></a>1、创建一个GateWayConfig配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder routeLocatorBuilder)</span> </span>&#123;</span><br><span class="line">        RouteLocatorBuilder.Builder routes = routeLocatorBuilder.routes();</span><br><span class="line">        routes.route(<span class="string">&quot;path_route_wuhu&quot;</span>,</span><br><span class="line">                r -&gt; r.path(<span class="string">&quot;/guonei&quot;</span>).uri(<span class="string">&quot;http://news.baidu.com/guonei&quot;</span>));</span><br><span class="line">        routes.route(<span class="string">&quot;path_route_qifei&quot;</span>,</span><br><span class="line">                r -&gt; r.path(<span class="string">&quot;/guoji&quot;</span>).uri(<span class="string">&quot;http://news.baidu.com/guoji&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> routes.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用routes对象的route方法来配置路由断言及要转发的uri</li><li>其中route接收两个参数，一个为路由id，另一个为jdk8新添加的Function接口对象</li><li>如果访问路径中有/guonei，那么网关会帮我们跳转到<a href="http://news.baidu.com/guonei%EF%BC%9B%E5%A6%82%E6%9E%9C%E8%AE%BF%E9%97%AE%E8%B7%AF%E5%BE%84%E4%B8%AD%E6%9C%89/guoji%EF%BC%8C%E9%82%A3%E4%B9%88%E7%BD%91%E5%85%B3%E4%BC%9A%E5%B8%AE%E6%88%91%E4%BB%AC%E8%B7%B3%E8%BD%AC%E5%88%B0http://news.baidu.com/guoji">http://news.baidu.com/guonei；如果访问路径中有/guoji，那么网关会帮我们跳转到http://news.baidu.com/guoji</a></li></ul><h3 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h3><blockquote><p>访问<a href="http://localhost:9527/guoji">http://localhost:9527/guoji</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211135216.png" alt="image-20210211135215779"></p><blockquote><p>同理访问<a href="http://localhost:9527/guonei">http://localhost:9527/guonei</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211135303.png" alt="image-20210211135303881"></p><h2 id="2-5、配合注册中心实现动态路由"><a href="#2-5、配合注册中心实现动态路由" class="headerlink" title="2.5、配合注册中心实现动态路由"></a>2.5、配合注册中心实现动态路由</h2><blockquote><p>默认情况下Gateway会根据注册中心的服务列表，以注册中心上微服务名为路径创建动态路由进行转发，从而实现动态路由的功能</p></blockquote><h3 id="1、启动"><a href="#1、启动" class="headerlink" title="1、启动"></a>1、启动</h3><blockquote><p>根据payment8001微服务复刻出另一个类似的payment微服务，端口号为8002</p><p>启动eureka7001+payment8001+payment8002</p></blockquote><h3 id="2、修改网关微服务配置文件"><a href="#2、修改网关微服务配置文件" class="headerlink" title="2、修改网关微服务配置文件"></a>2、修改网关微服务配置文件</h3><blockquote><p>在路由的uri中使用lb://微服务名称的方法来动态配置路由，并实现负载均衡，使用步骤如下</p></blockquote><ul><li>在配置文件中开启从注册中心动态创建路由的功能，使用微服务名进行路由</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># 开启从注册中心动态创建路由的功能，使用微服务名进行路由</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>在配置文件中将路由uri修改为lb://微服务名来指定跳转地址，并实现负载均衡，需要注意的是uri的协议为lb，表示启用Gateway的负载均衡功能。</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#路由id，没有命名规则但要求唯一，建议配合服务名</span></span><br><span class="line">    <span class="comment"># 使用注册中心中注册的微服务名实现动态路由</span></span><br><span class="line">    <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">    <span class="attr">predicates:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span>  <span class="comment">#断言，路径相匹配的进行路由</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span></span><br><span class="line">    <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">    <span class="attr">predicates:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>  <span class="comment">#断言，路径相匹配的进行路由</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>网关微服务完整配置文件如下</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span> <span class="comment">#注册到eureka中的应用名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># 开启从注册中心动态创建路由的功能，使用微服务名进行路由</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#路由id，没有命名规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="comment"># 使用注册中心中注册的微服务名实现动态路由</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span>  <span class="comment">#断言，路径相匹配的进行路由</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>  <span class="comment">#断言，路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h3><blockquote><p>启动网关微服务，查看eureka注册中心情况</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211144519.png" alt="image-20210211144518120"></p><blockquote><p>测试，访问payment微服务的lb方法，查看调用端口情况</p></blockquote><ul><li>第一次</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211144610.png" alt="image-20210211144610176"></p><ul><li>第二次</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211144625.png" alt="image-20210211144625837"></p><blockquote><p>这样就实现了动态路由和负载均衡功能。</p></blockquote><h2 id="2-6、Predicate的使用"><a href="#2-6、Predicate的使用" class="headerlink" title="2.6、Predicate的使用"></a>2.6、Predicate的使用</h2><blockquote><p>Spring Cloud Gateway内置断言工厂，用于进行条件判断，只有断言都返回真，才会真正执行路由。</p><p>内置的断言工厂具体如下</p></blockquote><h3 id="1、基于DateTime"><a href="#1、基于DateTime" class="headerlink" title="1、基于DateTime"></a>1、基于DateTime</h3><blockquote><p>此类型的断言根据时间做判断，主要有三个：</p></blockquote><ul><li>AfterRoutePredicateFactory： 接收一个日期参数，判断请求日期是否晚于指定日期</li><li>BeforeRoutePredicateFactory： 接收一个日期参数，判断请求日期是否早于指定日期</li><li>BetweenRoutePredicateFactory： 接收两个日期参数，判断请求日期是否在指定时间段内</li></ul><blockquote><p>这里的时间格式可以由JDK8自带的ZoneDateTime生成</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ZonedDateTime dateTime = ZonedDateTime.now();</span><br><span class="line">    System.out.println(dateTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211153541.png" alt="image-20210211153541725"></p><blockquote><p>AfterRoutePredicateFactory</p></blockquote><ul><li>在yml配置文件中添加配置如下，这里将after后面的时间设置为我当前时间的一个笑是后</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>  <span class="comment">#断言，路径相匹配的进行路由</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">After=2021-02-11T16:37:54.926+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211153734.png" alt="image-20210211153734924"></p><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211153920.png" alt="image-20210211153920543"></p><ul><li>修改yml配置文件，将时间改为当前时间一个小时前，重启微服务</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">After=2021-02-11T14:37:54.926+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211154031.png" alt="image-20210211154031133"></p><blockquote><p>同理，Before断言和Between断言与After的使用方式类型，只是Between断言需要传入两个时间，如</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Between=2020-03-08T10:59:34.102+08:00[Asia/Shanghai]</span> <span class="string">,</span>  <span class="number">2020-03-08T10:59:34.102+08:00</span>[<span class="string">Asia/Shanghai</span>]</span><br></pre></td></tr></table></figure><h3 id="2、基于远程地址"><a href="#2、基于远程地址" class="headerlink" title="2、基于远程地址"></a>2、基于远程地址</h3><blockquote><p>RemoteAddrRoutePredicateFactory：接收一个IP地址段，判断请求主机地址是否在地址段中</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">RemoteAddr=192.168.1.1/24</span></span><br></pre></td></tr></table></figure><blockquote><p>修改yml配置文件，进行测试</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>  <span class="comment">#断言，路径相匹配的进行路由</span></span><br><span class="line">    <span class="comment">#- After=2021-02-11T14:37:54.926+08:00[Asia/Shanghai]</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">RemoteAddr=192.168.1.1/24</span></span><br></pre></td></tr></table></figure><ul><li>结果：由于本机地址不在配置的地址内，所以报错</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211155533.png" alt="image-20210211155532617"></p><h3 id="3、基于Cookie"><a href="#3、基于Cookie" class="headerlink" title="3、基于Cookie"></a>3、基于Cookie</h3><blockquote><p>CookieRoutePredicateFactory：接收两个参数，cookie 名字和一个正则表达式。 判断请求cookie是否具有给定名称且值与正则表达式匹配。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Cookie=chocolate,</span> <span class="string">ch.</span></span><br></pre></td></tr></table></figure><blockquote><p>修改配置文件，设置访问时需要带上的Cookie</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>  <span class="comment">#断言，路径相匹配的进行路由</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Cookie=wuhu,qifei</span></span><br></pre></td></tr></table></figure><blockquote><p>打开命令行，使用curl进行访问</p></blockquote><ul><li>不带Cookie时：curl <a href="http://localhost:9527/payment/lb">http://localhost:9527/payment/lb</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211155943.png" alt="image-20210211155943876"></p><ul><li>带上Cookie时：curl <a href="http://localhost:9527/payment/lb">http://localhost:9527/payment/lb</a> –cookie “wuhu=qifei”</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211160356.png" alt="image-20210211160356405"></p><h3 id="4、基于请求头Header"><a href="#4、基于请求头Header" class="headerlink" title="4、基于请求头Header"></a>4、基于请求头Header</h3><blockquote><p>HeaderRoutePredicateFactory：接收两个参数，标题名称和正则表达式。 判断请求Header是否具有给定名称且值与正则表达式匹配。</p></blockquote><ul><li>两个参数，一个属性名称和一个正则表达式，当属性值与正则表达式相匹配时执行</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span></span><br></pre></td></tr></table></figure><blockquote><p>修改yml文件</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>  <span class="comment">#断言，路径相匹配的进行路由</span></span><br><span class="line">    <span class="comment"># 请求头中需要含有X-Request-Id属性，且X-Request-Id属性值需要为正整数</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span></span><br></pre></td></tr></table></figure><ul><li>使用curl进行测试</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">curl</span> http://localhost:<span class="number">9527</span>/payment/lb <span class="literal">-H</span> <span class="string">&quot;X-Request-Id:123&quot;</span></span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211161019.png" alt="image-20210211161019074"></p><ul><li>使用curl进行错误示范</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">curl</span> http://localhost:<span class="number">9527</span>/payment/lb <span class="literal">-H</span> <span class="string">&quot;X-Request-Id:-123&quot;</span></span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211161133.png" alt="image-20210211161133476"></p><h3 id="5、基于Method请求方法"><a href="#5、基于Method请求方法" class="headerlink" title="5、基于Method请求方法"></a>5、基于Method请求方法</h3><blockquote><p>MethodRoutePredicateFactory：接收一个参数，判断请求类型是否跟指定的类型匹配。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Method=GET</span></span><br></pre></td></tr></table></figure><h3 id="6、基于Path请求路径"><a href="#6、基于Path请求路径" class="headerlink" title="6、基于Path请求路径"></a>6、基于Path请求路径</h3><blockquote><p>PathRoutePredicateFactory：接收一个参数，判断请求的URI部分是否满足路径规则。</p><p>最常见的一种断言</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Path=/foo/**</span></span><br></pre></td></tr></table></figure><h3 id="7、基于Query请求参数"><a href="#7、基于Query请求参数" class="headerlink" title="7、基于Query请求参数"></a>7、基于Query请求参数</h3><blockquote><p>QueryRoutePredicateFactory ：接收两个参数，请求param和正则表达式， 判断请求参数是否具有给定名称且值与正则表达式匹配。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Query=baz,</span> <span class="string">ba.</span></span><br></pre></td></tr></table></figure><blockquote><p>修改配置文件</p></blockquote><ul><li>Query=uname, wuhu断言要求请求中必须有uname参数，且参数值必须为wuhu</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>  <span class="comment">#断言，路径相匹配的进行路由</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Query=uname,</span> <span class="string">wuhu</span></span><br></pre></td></tr></table></figure><ul><li>进行测试，访问<a href="http://localhost:9527/payment/lb%EF%BC%8C%E6%9F%A5%E7%9C%8B%E7%BB%93%E6%9E%9C">http://localhost:9527/payment/lb，查看结果</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211162140.png" alt="image-20210211162139906"></p><ul><li>打开浏览器，访问<a href="http://localhost:9527/payment/lb?uname=wuhu">http://localhost:9527/payment/lb?uname=wuhu</a></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211162254.png" alt="image-20210211162254068"></p><h1 id="三、过滤器"><a href="#三、过滤器" class="headerlink" title="三、过滤器"></a>三、过滤器</h1><h2 id="3-1、过滤器基本概念"><a href="#3-1、过滤器基本概念" class="headerlink" title="3.1、过滤器基本概念"></a>3.1、过滤器基本概念</h2><h3 id="1、作用"><a href="#1、作用" class="headerlink" title="1、作用"></a>1、作用</h3><p>过滤器就是在请求的传递过程中，对请求和响应做一些修改</p><h3 id="2、生命周期"><a href="#2、生命周期" class="headerlink" title="2、生命周期"></a>2、生命周期</h3><p>客户端的请求先经过“pre”类型的filter，然后将请求转发到具体的业务服务，收到业务服务的响应之后，再经过“post”类型的filter处理，最后返回响应到客户端。</p><p>pre： 这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现参数校验、权限校验、流量监控、日志输出、协议转换等；</p><p>post：这种过滤器在路由到达微服务以后执行。这种过滤器可用做响应内容、响应头的修改，日志的输出，流量监控等。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211162518.png" alt="image-20210211162518791"></p><h3 id="3、分类"><a href="#3、分类" class="headerlink" title="3、分类"></a>3、分类</h3><p>局部过滤器 GatewayFilter：作用在某一个路由上</p><p>全局过滤器 GlobalFilter：作用全部路由上</p><h2 id="3-2、局部过滤器"><a href="#3-2、局部过滤器" class="headerlink" title="3.2、局部过滤器"></a>3.2、局部过滤器</h2><h3 id="1、内置局部过滤器"><a href="#1、内置局部过滤器" class="headerlink" title="1、内置局部过滤器"></a>1、内置局部过滤器</h3><p>在SpringCloud Gateway中内置了很多不同类型的网关路由过滤器。具体如下</p><table><thead><tr><th>过滤器工厂</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>为原始请求添加Header</td><td>Header的名称及值</td></tr><tr><td>AddRequestParameter</td><td>为原始请求添加请求参数</td><td>参数名称及值</td></tr><tr><td>AddResponseHeader</td><td>为原始响应添加Header</td><td>Header的名称及值</td></tr><tr><td>DedupeResponseHeader</td><td>剔除响应头中重复的值</td><td>需要去重的Header名称及去重策略</td></tr><tr><td>Hystrix</td><td>为路由引入Hystrix的断路器保护</td><td>HystrixCommand 的名称</td></tr><tr><td>FallbackHeaders</td><td>为fallbackUri的请求头中添加具体的异常信息</td><td>Header的名称</td></tr><tr><td>PreﬁxPath</td><td>为原始请求路径添加前缀</td><td>前缀路径</td></tr><tr><td>PreserveHostHeader</td><td>为请求添加一个preserveHostHeader=true的属性，路由过滤器会检查该属性以决定是否要发送原始的Host</td><td>无</td></tr><tr><td>RequestRateLimiter</td><td>用于对请求限流，限流算法为令牌桶</td><td>keyResolver、rateLimiter、statusCode、denyEmptyKey、emptyKeyStatus</td></tr><tr><td>RedirectTo</td><td>将原始请求重定向到指定的URL</td><td>http状态码及重定向的url</td></tr><tr><td>RemoveHopByHopHeadersFilter</td><td>为原始请求删除IETF组织规定的一系列Header</td><td>默认就会启用，可以通过配置指定仅删除哪些Header</td></tr><tr><td>RemoveRequestHeader</td><td>为原始请求删除某个Header</td><td>Header名称</td></tr><tr><td>RemoveResponseHeader</td><td>为原始响应删除某个Header</td><td>Header名称</td></tr><tr><td>RewritePath</td><td>重写原始的请求路径</td><td>原始路径正则表达式以及重写后路径的正则表达式</td></tr><tr><td>RewriteResponseHeader</td><td>重写原始响应中的某个Header</td><td>Header名称，值的正则表达式，重写后的值</td></tr><tr><td>SaveSession</td><td>在转发请求之前，强制执行WebSession::save 操作</td><td>无</td></tr><tr><td>secureHeaders</td><td>为原始响应添加一系列起安全作用的响应头</td><td>无，支持修改这些安全响应头的值</td></tr><tr><td>SetPath</td><td>修改原始的请求路径</td><td>修改后的路径</td></tr><tr><td>SetResponseHeader</td><td>修改原始响应中某个Header的值</td><td>Header名称，修改后的值</td></tr><tr><td>SetStatus</td><td>修改原始响应的状态码</td><td>HTTP 状态码，可以是数字，也可以是字符串</td></tr><tr><td>StripPreﬁx</td><td>用于截断原始请求的路径</td><td>使用数字表示要截断的路径的数量</td></tr><tr><td>Retry</td><td>针对不同的响应进行重试</td><td>retries、statuses、methods、series</td></tr><tr><td>RequestSize</td><td>设置允许接收最大请求包的大 小。如果请求包大小超过设置的值，则返回 413 Payload TooLarge</td><td>请求包大小，单位为字节，默认值为5M</td></tr><tr><td>ModifyRequestBody</td><td>在转发请求之前修改原始请求体内容</td><td>修改后的请求体内容</td></tr><tr><td>ModifyResponseBody</td><td>修改原始响应体的内容</td><td>修改后的响应体内容</td></tr></tbody></table><h3 id="2、内置局部过滤器的使用"><a href="#2、内置局部过滤器的使用" class="headerlink" title="2、内置局部过滤器的使用"></a>2、内置局部过滤器的使用</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">service-edu</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">lb://service-edu</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Path=/user/**,</span> <span class="string">/*/edu/**</span></span><br><span class="line">  <span class="attr">filters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SetStatus=250</span> <span class="comment"># 修改返回状态码</span></span><br></pre></td></tr></table></figure><h2 id="3-3、全局过滤器"><a href="#3-3、全局过滤器" class="headerlink" title="3.3、全局过滤器"></a>3.3、全局过滤器</h2><h3 id="1、内置全局过滤器"><a href="#1、内置全局过滤器" class="headerlink" title="1、内置全局过滤器"></a>1、内置全局过滤器</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211162756.png" alt="image-20210211162756079"></p><p>内置全局过滤器的使用举例：负载均衡过滤器</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">lb://service-edu</span></span><br></pre></td></tr></table></figure><h2 id="3-4、自定义全局过滤器"><a href="#3-4、自定义全局过滤器" class="headerlink" title="3.4、自定义全局过滤器"></a>3.4、自定义全局过滤器</h2><blockquote><p>定义一个Filter实现 GlobalFilter 和 Ordered接口</p></blockquote><h3 id="1、作用-1"><a href="#1、作用-1" class="headerlink" title="1、作用"></a>1、作用</h3><ul><li>全局日志记录</li><li>统一网关鉴权</li><li>…</li></ul><h3 id="2、自定义全局过滤器"><a href="#2、自定义全局过滤器" class="headerlink" title="2、自定义全局过滤器"></a>2、自定义全局过滤器</h3><blockquote><p>编写一个过滤器类，这个过滤器用于记录日志已经鉴权</p></blockquote><ul><li>如果请求中uname参数值为空，则不放行，直接响应406</li><li>这个类需要实现GlobalFilter和Ordered接口，并重写两个方法</li><li>在getOrder方法中，定义过滤器的优先级，order越低，优先级越高</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> HIGHEST_PRECEDENCE = -<span class="number">2147483648</span>;</span><br><span class="line">    <span class="keyword">int</span> LOWEST_PRECEDENCE = <span class="number">2147483647</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在filter方法中进行日志记录和鉴权操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogGateWayFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;*************进入自定义全局过滤器，时间为：&quot;</span> + <span class="keyword">new</span> Date());</span><br><span class="line">        String uname = exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(uname == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;********用户名为null，非法用户！&quot;</span>);</span><br><span class="line">            <span class="comment">//给响应对象返回一个状态码：请求不被接受</span></span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//放行，进入到下一个过滤器</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 此方法用于定义这个过滤器在过滤器链中的位置</span></span><br><span class="line"><span class="comment">     * 返回的order越小优先级越高</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><blockquote><p>访问<a href="http://localhost:9257/payment/lb">http://localhost:9257/payment/lb</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211164137.png" alt="image-20210211164137410"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211164206.png" alt="image-20210211164206315"></p><blockquote><p>访问<a href="http://localhost:9257/payment/lb%EF%BC%8C%E5%B8%A6%E4%B8%8A%E5%8F%82%E6%95%B0uname">http://localhost:9257/payment/lb，带上参数uname</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211164402.png" alt="image-20210211164402908"></p><h1 id="四、在线教育项目整合GateWay"><a href="#四、在线教育项目整合GateWay" class="headerlink" title="四、在线教育项目整合GateWay"></a>四、在线教育项目整合GateWay</h1><blockquote><p><strong>注意</strong>：gateway底层使用的是webflux会与web冲突，所以在gateway中不要引入spring-boot-starter-web依赖</p></blockquote><h2 id="4-1、统一网关鉴权"><a href="#4-1、统一网关鉴权" class="headerlink" title="4.1、统一网关鉴权"></a>4.1、统一网关鉴权</h2><blockquote><p>我们需要在微服务网关中自定义一个全局过滤器，统一处理需要鉴权的服务</p></blockquote><h3 id="1、鉴权逻辑描述"><a href="#1、鉴权逻辑描述" class="headerlink" title="1、鉴权逻辑描述"></a>1、鉴权逻辑描述</h3><ul><li>当客户端第一次请求服务时，服务端对用户进行信息认证（登录）</li><li>认证通过，将用户信息进行加密形成token，返回给客户端</li><li>作为登录凭证以后每次请求，客户端都携带认证的token</li><li>服务端对token进行解密，判断是否有效</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211165219.png" alt="image-20210211165219298"></p><blockquote><p>对于验证用户是否已经登录鉴权的过程可以在网关统一检验。检验的标准就是请求中是否携带token凭证以及token的正确性。</p><p>下面的我们自定义一个GlobalFilter，去校验所有的请求参数中是否包含“token”，如果不包含请求参数“token”则不转发路由，否则执行正常的逻辑。</p></blockquote><h3 id="2、创建自定义过滤器"><a href="#2、创建自定义过滤器" class="headerlink" title="2、创建自定义过滤器"></a>2、创建自定义过滤器</h3><ul><li>如果token为空或者token不合法，则不放行。</li><li>这个过滤器的order为0</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthGlobalFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        ServerHttpRequest request = exchange.getRequest();</span><br><span class="line">        String path = request.getURI().getPath();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//谷粒学院api接口，校验用户必须登录</span></span><br><span class="line">        AntPathMatcher antPathMatcher = <span class="keyword">new</span> AntPathMatcher();</span><br><span class="line">        <span class="keyword">if</span>(antPathMatcher.match(<span class="string">&quot;/api/**/auth/**&quot;</span>, path)) &#123;</span><br><span class="line">            List&lt;String&gt; tokenList = request.getHeaders().get(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//没有token</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span> == tokenList) &#123;</span><br><span class="line">                ServerHttpResponse response = exchange.getResponse();</span><br><span class="line">                <span class="keyword">return</span> out(response);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//token校验失败</span></span><br><span class="line">            Boolean isCheck = JwtUtils.checkJwtTToken(tokenList.get(<span class="number">0</span>));</span><br><span class="line">            <span class="keyword">if</span>(!isCheck) &#123;</span><br><span class="line">                ServerHttpResponse response = exchange.getResponse();</span><br><span class="line">                <span class="keyword">return</span> out(response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义当前过滤器的优先级，值越小，优先级越高</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Mono&lt;Void&gt; <span class="title">out</span><span class="params">(ServerHttpResponse response)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        JsonObject message = <span class="keyword">new</span> JsonObject();</span><br><span class="line">        message.addProperty(<span class="string">&quot;success&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">        message.addProperty(<span class="string">&quot;code&quot;</span>, <span class="number">28004</span>);</span><br><span class="line">        message.addProperty(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        message.addProperty(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;鉴权失败&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = message.toString().getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        DataBuffer buffer = response.bufferFactory().wrap(bytes);</span><br><span class="line">        <span class="comment">//指定编码，否则在浏览器中会中文乱码</span></span><br><span class="line">        response.getHeaders().add(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//输出http响应</span></span><br><span class="line">        <span class="keyword">return</span> response.writeWith(Mono.just(buffer));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、修改前端"><a href="#3、修改前端" class="headerlink" title="3、修改前端"></a>3、修改前端</h3><blockquote><p>guli-site的utils/request.js中修改响应过滤器 ，添加分支：</p></blockquote><ul><li>如果响应码为20004，则证明认证失败，用户没有登录，此时让用户跳转到登录页</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (res.code === <span class="number">28004</span>) &#123; <span class="comment">// 鉴权失败</span></span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">&#x27;/login&#x27;</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ul><li>修改pages/login.vue的submitLogin方法：登录后回到原来的页面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跳转到首页</span></span><br><span class="line"><span class="comment">// window.location.href = &#x27;/&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.referrer.indexOf(<span class="string">&#x27;register&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    history.go(-<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2、统一处理跨域问题"><a href="#4-2、统一处理跨域问题" class="headerlink" title="4.2、统一处理跨域问题"></a>4.2、统一处理跨域问题</h2><h3 id="1、什么是跨域？"><a href="#1、什么是跨域？" class="headerlink" title="1、什么是跨域？"></a>1、什么是跨域？</h3><blockquote><p>当一个请求url的<strong>协议、域名、端口</strong>三者之间任意一个与当前页面url不同即为跨域</p></blockquote><table><thead><tr><th><strong>当前页面url</strong></th><th><strong>被请求页面url</strong></th><th><strong>是否跨域</strong></th><th><strong>原因</strong></th></tr></thead><tbody><tr><td><a href="http://www.test.com/">http://www.test.com/</a></td><td><a href="http://www.test.com/index.html">http://www.test.com/index.html</a></td><td>否</td><td>同源（协议、域名、端口号相同）</td></tr><tr><td><a href="http://www.test.com/">http://www.test.com/</a></td><td><a href="https://www.test.com/index.html">https://www.test.com/index.html</a></td><td>跨域</td><td>协议不同（http/https）</td></tr><tr><td><a href="http://www.test.com/">http://www.test.com/</a></td><td><a href="http://www.baidu.com/">http://www.baidu.com/</a></td><td>跨域</td><td>主域名不同（test/baidu）</td></tr><tr><td><a href="http://www.test.com/">http://www.test.com/</a></td><td><a href="http://blog.test.com/">http://blog.test.com/</a></td><td>跨域</td><td>子域名不同（www/blog）</td></tr><tr><td><a href="http://www.test.com:8080/">http://www.test.com:8080/</a></td><td><a href="http://www.test.com:7001/">http://www.test.com:7001/</a></td><td>跨域</td><td>端口号不同（8080/7001）</td></tr></tbody></table><h3 id="2、Spring-Boot中解决跨域的几种方法"><a href="#2、Spring-Boot中解决跨域的几种方法" class="headerlink" title="2、Spring Boot中解决跨域的几种方法"></a>2、Spring Boot中解决跨域的几种方法</h3><blockquote><p>在gateway中创建一个配置类，这个配置类用于解决跨域问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsWebFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource(<span class="keyword">new</span> PathPatternParser());</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsWebFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在Spring Boot控制器中添加@CrossOrigin注解，这个注解可以加在<strong>类上</strong>或者<strong>方法</strong>上</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;课程分类管理&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/edu/subject&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectController</span> </span>&#123;</span><br></pre></td></tr></table></figure><blockquote><p>说明，这两种方法只取一种使用即可，如果使用了配置类，那么最好将控制器上的注解删去。</p></blockquote><blockquote><p>参考教程如下：</p></blockquote><ul><li><p>[1]  <a href="https://www.bilibili.com/video/BV1fi4y1x7on">尚硅谷在线教育项目</a></p></li><li><p>[2]  <a href="https://blog.csdn.net/qq_38128179/article/details/84956552">什么是跨域？跨域的结局方法</a></p></li><li><p>[3]  <a href="https://www.bilibili.com/video/BV18E411x7eT">尚硅谷SpringCloud(H版&amp;alibaba)框架开发教程</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
            <tag> 👢Spring Boot </tag>
            
            <tag> 🚪网关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线教育项目总结（四）-使用递归查询嵌套列表和删除嵌套列表</title>
      <link href="posts/4109687940.html"/>
      <url>posts/4109687940.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、需求及数据库说明"><a href="#一、需求及数据库说明" class="headerlink" title="一、需求及数据库说明"></a>一、需求及数据库说明</h1><blockquote><p>在在线教育项目中，我们使用Spring Security作为安全框架，在权限管理需求中，<strong>不同角色的用户登录后台管理系统拥有不同的菜单权限与功能权限，</strong>权限管理包含三个功能模块：菜单管理、角色管理和用户管理。</p><p>在菜单管理中，要求我们使用树形结构展示菜单列表。</p></blockquote><blockquote><p>创建acl_permission表，省略部分数据</p></blockquote><ul><li>在permission表中，pid为0的为权限菜单顶层数据</li><li>根据pid =  id来确定数据间的父子关系</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;acl_permission&#96; (</span><br><span class="line">  &#96;id&#96; char(19) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;编号&#39;,</span><br><span class="line">  &#96;pid&#96; char(19) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;所属上级&#39;,</span><br><span class="line">  &#96;name&#96; varchar(20) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;名称&#39;,</span><br><span class="line">  &#96;type&#96; tinyint(3) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;类型(1:菜单,2:按钮)&#39;,</span><br><span class="line">  &#96;permission_value&#96; varchar(50) DEFAULT NULL COMMENT &#39;权限值&#39;,</span><br><span class="line">  &#96;path&#96; varchar(100) DEFAULT NULL COMMENT &#39;访问路径&#39;,</span><br><span class="line">  &#96;component&#96; varchar(100) DEFAULT NULL COMMENT &#39;组件路径&#39;,</span><br><span class="line">  &#96;icon&#96; varchar(50) DEFAULT NULL COMMENT &#39;图标&#39;,</span><br><span class="line">  &#96;status&#96; tinyint(4) DEFAULT NULL COMMENT &#39;状态(0:禁止,1:正常)&#39;,</span><br><span class="line">  &#96;is_deleted&#96; tinyint(1) unsigned NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;逻辑删除 1（true）已删除， 0（false）未删除&#39;,</span><br><span class="line">  &#96;gmt_create&#96; datetime DEFAULT NULL COMMENT &#39;创建时间&#39;,</span><br><span class="line">  &#96;gmt_modified&#96; datetime DEFAULT NULL COMMENT &#39;更新时间&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  KEY &#96;idx_pid&#96; (&#96;pid&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COMMENT&#x3D;&#39;权限&#39;;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Data for table &quot;acl_permission&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;acl_permission&#96; VALUES (&#39;1&#39;,&#39;0&#39;,&#39;全部数据&#39;,0,NULL,NULL,NULL,NULL,NULL,0,&#39;2019-11-15 17:13:06&#39;,&#39;2019-11-15 17:13:06&#39;),(&#39;1195268474480156673&#39;,&#39;1&#39;,&#39;权限管理&#39;,1,NULL,&#39;&#x2F;acl&#39;,&#39;Layout&#39;,NULL,NULL,0,&#39;2019-11-15 17:13:06&#39;,&#39;2019-11-18 13:54:25&#39;),(&#39;1195268616021139457&#39;,&#39;1195268474480156673&#39;,&#39;用户管理&#39;,1,NULL,&#39;user&#x2F;list&#39;,&#39;&#x2F;acl&#x2F;user&#x2F;list&#39;,NULL,NULL,0,&#39;2019-11-15 17:13:40&#39;,&#39;2019-11-18 13:53:12&#39;),(&#39;1195268788138598401&#39;,&#39;1195268474480156673&#39;,&#39;角色管理&#39;,1,NULL,&#39;role&#x2F;list&#39;,&#39;&#x2F;acl&#x2F;role&#x2F;list&#39;,NULL,NULL,0,&#39;2019-11-15 17:14:21&#39;,&#39;2019-11-15 17:14:21&#39;),(&#39;1195268893830864898&#39;,&#39;1195268474480156673&#39;,&#39;菜单管理&#39;,1,NULL,&#39;menu&#x2F;list&#39;,&#39;&#x2F;acl&#x2F;menu&#x2F;list&#39;,NULL,NULL,0,&#39;2019-11-15 17:14:46&#39;,&#39;2019-11-15 17:14:46&#39;),(&#39;1195269143060602882&#39;,&#39;1195268616021139457&#39;,&#39;查看&#39;,2,&#39;user.list&#39;,&#39;&#39;,&#39;&#39;,NULL,NULL,0,&#39;2019-11-15 17:15:45&#39;,&#39;2019-11-17 21:57:16&#39;),(&#39;1195269295926206466&#39;,&#39;1195268616021139457&#39;,&#39;添加&#39;,2,&#39;user.add&#39;,&#39;user&#x2F;add&#39;,&#39;&#x2F;acl&#x2F;user&#x2F;form&#39;,NULL,NULL,0,&#39;2019-11-15 17:16:22&#39;,&#39;2019-11-15 17:16:22&#39;),(&#39;1195269473479483394&#39;,&#39;1195268616021139457&#39;,&#39;修改&#39;,2,&#39;user.update&#39;,&#39;user&#x2F;update&#x2F;:id&#39;,&#39;&#x2F;acl&#x2F;user&#x2F;form&#39;,NULL,NULL,0,&#39;2019-11-15 17:17:04&#39;,&#39;2019-11-15 17:17:04&#39;),(&#39;1195269547269873666&#39;,&#39;1195268616021139457&#39;,&#39;删除&#39;,2,&#39;user.remove&#39;,&#39;&#39;,&#39;&#39;,NULL,NULL,0,&#39;2019-11-15 17:17:22&#39;,&#39;2019-11-15 17:17:22&#39;),(&#39;1195269821262782465&#39;,&#39;1195268788138598401&#39;,&#39;修改&#39;,2,&#39;role.update&#39;,&#39;role&#x2F;update&#x2F;:id&#39;,&#39;&#x2F;acl&#x2F;role&#x2F;form&#39;,NULL,NULL,0,&#39;2019-11-15 17:18:27&#39;,&#39;2019-11-15 17:19:53&#39;),(&#39;1195269903542444034&#39;,&#39;1195268788138598401&#39;,&#39;查看&#39;,2,&#39;role.list&#39;,&#39;&#39;,&#39;&#39;,NULL,NULL,0,&#39;2019-11-15 17:18:47&#39;,&#39;2019-11-15 17:18:47&#39;);</span><br></pre></td></tr></table></figure><h1 id="二、使用递归查询嵌套列表"><a href="#二、使用递归查询嵌套列表" class="headerlink" title="二、使用递归查询嵌套列表"></a>二、使用递归查询嵌套列表</h1><h2 id="2-1、实体类"><a href="#2-1、实体类" class="headerlink" title="2.1、实体类"></a>2.1、实体类</h2><blockquote><p>为了实现嵌套列表的查询，我们需要为实体类添加一些额外的属性</p></blockquote><ul><li>添加一个Integer类型的level属性，这个属性用于表示当前permission对象在哪一级菜单</li><li>添加一个List&lt; Permission &gt;类型的children属性，这个属性用于存放当前permission对象的子菜单</li><li>由于这两个属性不属于数据库中的属性，所以我们需要添加@TableField(exist = false) 注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@TableName(&quot;acl_permission&quot;)</span></span><br><span class="line"><span class="meta">@ApiModel(value=&quot;Permission对象&quot;, description=&quot;权限&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Permission</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID=<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;所属上级&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String pid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;类型(1:菜单,2:按钮)&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;权限值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String permissionValue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;访问路径&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;组件路径&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String component;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;图标&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;状态(0:禁止,1:正常)&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;逻辑删除 1（true）已删除， 0（false）未删除&quot;)</span></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 下面是业务中手动添加的属性</span></span><br><span class="line"><span class="comment">     * 并非数据库中的字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;表示当前permission对象是哪一级菜单&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;下级&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Permission&gt; children;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;是否被选中&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isSelect;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2、Controller层"><a href="#2-2、Controller层" class="headerlink" title="2.2、Controller层"></a>2.2、Controller层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;查询所有菜单&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">indexAllPermission</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Permission&gt; list = permissionService.queryAllMenu();</span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">&quot;children&quot;</span>,list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3、Service层"><a href="#2-3、Service层" class="headerlink" title="2.3、Service层"></a>2.3、Service层</h2><blockquote><p>第一步，先查询出permission表中所有数据，根据id排序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 递归查询所有菜单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Permission&gt; <span class="title">queryAllMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1 查询菜单表中所有数据，根据id排序</span></span><br><span class="line">    QueryWrapper&lt;Permission&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.orderByAsc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    List&lt;Permission&gt; permissionList = baseMapper.selectList(wrapper);</span><br><span class="line">    <span class="comment">//2 将查询出来的菜单List集合按照要求进行封装</span></span><br><span class="line">    <span class="keyword">return</span> buildPermission(permissionList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第二步，创建一个buildPermission方法，这个方法将查询出来的permission集合转换为嵌套列表集合</p></blockquote><ul><li>先查询出所有permission对象中pid为0，即最顶层的元素</li><li>将该permission对象的level设置为1</li><li>将这个顶层元素加入到要返回给Controller层的List集合中</li><li>写一个selectChildren方法，传入当前permission和第一步查询出的所有permission集合，这个方法用于递归组装顶层元素的子元素和后代元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 封装传入的菜单集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> permissionList 要封装的菜单列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 封装好的嵌套菜单列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Permission&gt; <span class="title">buildPermission</span><span class="params">(List&lt;Permission&gt; permissionList)</span> </span>&#123;</span><br><span class="line">    List&lt;Permission&gt; finalNode = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//遍历传入的菜单列表，得到最顶层元素，即pid = 0的菜单对象，设置其level值为1</span></span><br><span class="line">    <span class="keyword">for</span> (Permission permission : permissionList) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;0&quot;</span>.equals(permission.getPid())) &#123;</span><br><span class="line">            <span class="comment">//设置顶层菜单的level值为1</span></span><br><span class="line">            permission.setLevel(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//根据顶层菜单，向里面进行查询子菜单，封装到finalNode</span></span><br><span class="line">            finalNode.add(selectChildren(permission,permissionList));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> finalNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第三步，写一个selectChildren方法，根据传入的permission对象和permission集合递归组装嵌套列表。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 真正的递归在这里进行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> permission</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> permissionList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Permission <span class="title">selectChildren</span><span class="params">(Permission permission, List&lt;Permission&gt; permissionList)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1 由于我们要向上一层菜单对象的children中放置对象，所以我们先初始化对象</span></span><br><span class="line">    permission.setChildren(<span class="keyword">new</span> ArrayList&lt;Permission&gt;());</span><br><span class="line">    <span class="comment">//2 遍历所有菜单列表，进行判断比较，比较id值与pid是否相同</span></span><br><span class="line">    permissionList.forEach(per -&gt; &#123;</span><br><span class="line">        <span class="comment">//判断id和pid是否相同</span></span><br><span class="line">        <span class="keyword">if</span>(permission.getId().equals(per.getPid())) &#123;</span><br><span class="line">            <span class="comment">//此时证明当前per对象是permission对象的子节点</span></span><br><span class="line">            <span class="comment">//所以子节点的level值应该为父节点的level+1</span></span><br><span class="line">            per.setLevel(permission.getLevel() + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(CollectionUtils.isEmpty(permission.getChildren())) &#123;</span><br><span class="line">                permission.setChildren(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//把查询出来的当前菜单放在上一层菜单对象的children中</span></span><br><span class="line">            permission.getChildren().add(selectChildren(per,permissionList));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> permission;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4、测试"><a href="#2-4、测试" class="headerlink" title="2.4、测试"></a>2.4、测试</h2><blockquote><p>使用Swagger进行测试</p></blockquote><ul><li>界面</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210233136.png" alt="image-20210210233136804"></p><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210233105.png" alt="image-20210210233104615"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210233608.png" alt="image-20210210233608819"></p><h1 id="三、通过id递归删除嵌套菜单"><a href="#三、通过id递归删除嵌套菜单" class="headerlink" title="三、通过id递归删除嵌套菜单"></a>三、通过id递归删除嵌套菜单</h1><blockquote><p>需要删除自身及所有的后代元素</p></blockquote><h2 id="3-1、Controller层"><a href="#3-1、Controller层" class="headerlink" title="3.1、Controller层"></a>3.1、Controller层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;递归删除菜单&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">deletePermission</span><span class="params">(<span class="meta">@PathVariable</span> String id)</span> </span>&#123;</span><br><span class="line">    permissionService.recurDeletePermissionById(id);</span><br><span class="line">    <span class="keyword">return</span> R.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2、Service层"><a href="#3-2、Service层" class="headerlink" title="3.2、Service层"></a>3.2、Service层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 根据id递归删除菜单及子菜单</span></span><br><span class="line"><span class="comment"> * 获取id为传入id的菜单及子菜单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recurDeletePermissionById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1 创建一个list集合，用于封装所有删除菜单id值</span></span><br><span class="line">    List&lt;String&gt; idList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//2 向idList中设置要删除的菜单id</span></span><br><span class="line">    <span class="keyword">this</span>.selectPermissionChildById(id,idList);</span><br><span class="line">    <span class="comment">//放入要删除的id，递归封装的只是子菜单的id</span></span><br><span class="line">    idList.add(id);</span><br><span class="line">    permissionMapper.deleteBatchIds(idList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编写selectPermissionChildById方法，传入父级id和用于批量删除的id列表，这个方法用于查询所有待删除元素的后代元素的id</p></blockquote><ul><li>使用Mybatis-Plus自带的QueryWrapper查询出pid为传入id的permission元素</li><li>遍历上一步查询到的permission列表，然后以列表中每一个元素的id作为pid，进行递归查询</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 根据传入的菜单id，查询菜单中的所有子菜单id，然后封装到list集合中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> idList</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">selectPermissionChildById</span><span class="params">(String id, List&lt;String&gt; idList)</span> </span>&#123;</span><br><span class="line">    QueryWrapper&lt;Permission&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;pid&quot;</span>,id);</span><br><span class="line">    wrapper.select(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    List&lt;Permission&gt; childIdList = permissionMapper.selectList(wrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把childIdList中的菜单id一一取出，封装到idList中，做递归查询</span></span><br><span class="line">    childIdList.forEach(item -&gt; &#123;</span><br><span class="line">        idList.add(item.getId());</span><br><span class="line">        <span class="comment">//递归查询</span></span><br><span class="line">        <span class="keyword">this</span>.selectPermissionChildById(item.getId(),idList);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3、测试"><a href="#3-3、测试" class="headerlink" title="3.3、测试"></a>3.3、测试</h2><blockquote><p>在数据库中插入几条测试数据</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210235954.png" alt="image-20210210235953698"></p><blockquote><p>打开swagger，我们测试删除id为2的菜单及其后代。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211000114.png" alt="image-20210211000114430"></p><blockquote><p>查看数据库，发现测试数据已经被逻辑删除。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210211000230.png" alt="image-20210211000230171"></p>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
            <tag> 👢Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线教育项目总结（三）-EasyExcel的使用</title>
      <link href="posts/765379126.html"/>
      <url>posts/765379126.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、介绍和入门使用"><a href="#一、介绍和入门使用" class="headerlink" title="一、介绍和入门使用"></a>一、介绍和入门使用</h1><h2 id="1-1、Excel的应用场景"><a href="#1-1、Excel的应用场景" class="headerlink" title="1.1、Excel的应用场景"></a>1.1、Excel的应用场景</h2><blockquote><p>数据导入：<strong>减轻录入工作量</strong></p></blockquote><blockquote><p>数据导出：<strong>统计信息归档</strong></p></blockquote><blockquote><p>数据传输：<strong>异构系统之间数据传输</strong></p></blockquote><h2 id="1-2、EasyExcel"><a href="#1-2、EasyExcel" class="headerlink" title="1.2、EasyExcel"></a>1.2、EasyExcel</h2><blockquote><p><strong>Github地址：</strong><a href="https://github.com/alibaba/easyexcel">EasyExcel</a></p><p><strong>官方网站：</strong><a href="https://www.yuque.com/easyexcel/doc/easyexcel">EasyExcel</a></p></blockquote><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><blockquote><p>EasyExcel是一个基于Java的简单、省内存的读写Excel的开源项目。在尽可能节约内存的情况下支持读写百M的Excel。</p></blockquote><h3 id="2、特点"><a href="#2、特点" class="headerlink" title="2、特点"></a>2、特点</h3><ul><li>Java领域解析、生成Excel比较有名的框架有Apache poi、jxl等。但他们都存在一个严重的问题就是非常的耗内存。如果你的系统并发量不大的话可能还行，但是一旦并发上来后一定会OOM或者JVM频繁的full gc。</li><li>EasyExcel是阿里巴巴开源的一个excel处理框架，<strong>以使用简单、节省内存著称</strong>。EasyExcel能大大减少占用内存的主要原因是在解析Excel时没有将文件数据一次性全部加载到内存中，而是从磁盘上一行行读取数据，逐个解析。</li><li>EasyExcel采用一行一行的解析模式，并将一行的解析结果以观察者的模式通知处理（AnalysisEventListener）。</li></ul><h2 id="1-3、入门使用"><a href="#1-3、入门使用" class="headerlink" title="1.3、入门使用"></a>1.3、入门使用</h2><h3 id="1、创建项目并引入依赖"><a href="#1、创建项目并引入依赖" class="headerlink" title="1、创建项目并引入依赖"></a>1、创建项目并引入依赖</h3><blockquote><p>创建一个测试用<strong>Maven</strong>项目，并导入以下依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xmlbeans<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xmlbeans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、最简单的写"><a href="#2、最简单的写" class="headerlink" title="2、最简单的写"></a>2、最简单的写</h3><blockquote><p>创建实体类</p></blockquote><ul><li>使用@ExcelProperty注解可以指定excel列名，即name对应excel中的”姓名”列，birthday属性对应excel中的生日列…</li><li>使用Lombok插件简化开发</li><li>可以使用@ExcelIgnore字段来让EasyExcel忽略该属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelEmpData</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;生日&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;薪资&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 使用<span class="doctag">@ExcelIgnore</span>注解来使EasyExcel忽略这个属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试用例，在test包下创建一个TestWriteExcelData测试类，用于测试EasyExcel的写功能</p></blockquote><ul><li>07版本的Excel和03版本的写入方式有所不同</li><li>03版本的Excel写入最多一次可写65536行</li></ul><blockquote><p>编写一个静态方法，这个方法用于生成测试数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;ExcelEmpData&gt; <span class="title">getEmpData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;ExcelEmpData&gt; excelEmpDataList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ExcelEmpData data = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">65535</span>; i++) &#123;</span><br><span class="line">        data = <span class="keyword">new</span> ExcelEmpData();</span><br><span class="line">        data.setName(<span class="string">&quot;芜湖&quot;</span> + i);</span><br><span class="line">        <span class="comment">//password属性的值不会被写入Excel中</span></span><br><span class="line">        data.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        data.setSalary(<span class="number">43.96</span>);</span><br><span class="line">        data.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">        excelEmpDataList.add(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> excelEmpDataList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在测试类中编写一个testWrite07方法，用于对.xlsx文件进行数据写入</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrite07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 指定数据写入到哪个excel文件</span></span><br><span class="line">    String fileName = <span class="string">&quot;F:/testExcel/01-simpleWrite-07.xlsx&quot;</span>;</span><br><span class="line">    <span class="comment">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span></span><br><span class="line">    EasyExcel.write(fileName, ExcelEmpData.class).sheet(<span class="string">&quot;模板&quot;</span>).doWrite(getEmpData());</span><br><span class="line">    System.out.println(<span class="string">&quot;excel写入成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210209235417.png" alt="image-20210209235416173"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210209235558.png" alt="image-20210209235558290"></p><blockquote><p>在测试类中编写一个testWrite03方法，用于对.xls文件进行数据写入</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleWrite03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String fileName = <span class="string">&quot;F:/testExcel/02-simpleWrite-03.xls&quot;</span>;</span><br><span class="line">    <span class="comment">// 如果这里想使用03 则 传入excelType参数即可</span></span><br><span class="line">    EasyExcel.write(fileName, ExcelEmpData.class).excelType(ExcelTypeEnum.XLS).sheet(<span class="string">&quot;模板&quot;</span>).doWrite(getEmpData());</span><br><span class="line">    System.out.println(<span class="string">&quot;excel写入成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210209235836.png" alt="image-20210209235835844"></p><blockquote><p>向.xls文件写入数据时，一次最多写入65536行</p></blockquote><ul><li>将getData()函数中的循环次数提高到65537</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrongWrite03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String fileName = <span class="string">&quot;F:/testExcel/03-simpleWrite-03.xls&quot;</span>;</span><br><span class="line">    <span class="comment">// 如果这里想使用03 则 传入excelType参数即可</span></span><br><span class="line">    EasyExcel.write(fileName, ExcelEmpData.class).excelType(ExcelTypeEnum.XLS).sheet(<span class="string">&quot;模板&quot;</span>).doWrite(getEmpData());</span><br><span class="line">    System.out.println(<span class="string">&quot;excel写入成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210000144.png" alt="image-20210210000144286"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210000202.png" alt="image-20210210000202523"></p><h3 id="3、指定easyExcel的写入列"><a href="#3、指定easyExcel的写入列" class="headerlink" title="3、指定easyExcel的写入列"></a>3、指定easyExcel的写入列</h3><blockquote><p>为实体类中的字段配置index属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelEmpData</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;,index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;生日&quot;,index = 3)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;薪资&quot;,index = 5)</span></span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 使用<span class="doctag">@ExcelIgnore</span>注解来使EasyExcel忽略这个属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>重新执行测试方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrite07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 指定数据写入到哪个excel文件</span></span><br><span class="line">    String fileName = <span class="string">&quot;F:/testExcel/04-simpleWrite-07.xlsx&quot;</span>;</span><br><span class="line">    <span class="comment">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span></span><br><span class="line">    EasyExcel.write(fileName, ExcelEmpData.class).sheet(<span class="string">&quot;模板&quot;</span>).doWrite(getEmpData());</span><br><span class="line">    System.out.println(<span class="string">&quot;excel写入成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210000729.png" alt="image-20210210000729446"></p><h3 id="4、指定属性的格式化"><a href="#4、指定属性的格式化" class="headerlink" title="4、指定属性的格式化"></a>4、指定属性的格式化</h3><blockquote><p>根据实体类属性的类型为属性添加不同的格式化注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelEmpData</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DateTimeFormat(&quot;yyyy年MM月dd日HH时mm分ss秒&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;生日&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NumberFormat(&quot;#.##%&quot;)</span><span class="comment">//百分比表示，保留两位小数</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;薪资&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 使用<span class="doctag">@ExcelIgnore</span>注解来使EasyExcel忽略这个属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>重新执行方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrite07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 指定数据写入到哪个excel文件</span></span><br><span class="line">    String fileName = <span class="string">&quot;F:/testExcel/05-simpleWrite-07.xlsx&quot;</span>;</span><br><span class="line">    <span class="comment">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span></span><br><span class="line">    EasyExcel.write(fileName, ExcelEmpData.class).sheet(<span class="string">&quot;模板&quot;</span>).doWrite(getEmpData());</span><br><span class="line">    System.out.println(<span class="string">&quot;excel写入成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210001029.png" alt="image-20210210001029235"></p><h3 id="5、xlsx和xls的区别"><a href="#5、xlsx和xls的区别" class="headerlink" title="5、xlsx和xls的区别"></a>5、xlsx和xls的区别</h3><blockquote><p>存储相同数量的数据，用xlsx占用的空间较小</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210001155.png" alt="image-20210210001155925"></p><blockquote><p>xls一次性最多写入65536条数据</p></blockquote><h2 id="1-4、使用EasyExcel读取文件"><a href="#1-4、使用EasyExcel读取文件" class="headerlink" title="1.4、使用EasyExcel读取文件"></a>1.4、使用EasyExcel读取文件</h2><blockquote><p>参考地址：<a href="https://www.yuque.com/easyexcel/doc/read">https://www.yuque.com/easyexcel/doc/read</a></p></blockquote><h3 id="1、创建监听器"><a href="#1、创建监听器" class="headerlink" title="1、创建监听器"></a>1、创建监听器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelEmpDataListener</span> <span class="keyword">extends</span> <span class="title">AnalysisEventListener</span>&lt;<span class="title">ExcelEmpData</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BATCH_COUNT = <span class="number">5</span>;</span><br><span class="line">    List&lt;ExcelEmpData&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个每一条数据解析都会来调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     *            one row value. Is is same as &#123;<span class="doctag">@link</span> AnalysisContext#readRowHolder()&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(ExcelEmpData data, AnalysisContext context)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, data);</span><br><span class="line">        list.add(data);</span><br><span class="line">        <span class="comment">// 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM</span></span><br><span class="line">        <span class="keyword">if</span> (list.size() &gt;= BATCH_COUNT) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;存数据库&quot;</span>);</span><br><span class="line">            <span class="comment">// 存储完成清理 list</span></span><br><span class="line">            list.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有数据解析完成了 都会来调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;所有数据解析完成！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h3><blockquote><p>创建testRead.xlsx文件，添加测试数据</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210002105.png" alt="image-20210210002105220"></p><blockquote><p>创建测试方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最简单的读</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleRead07</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String fileName = <span class="string">&quot;F:/testExcel/testRead.xlsx&quot;</span>;</span><br><span class="line">    <span class="comment">// 这里默认读取第一个sheet</span></span><br><span class="line">    EasyExcel.read(fileName, ExcelEmpData.class, <span class="keyword">new</span> ExcelEmpDataListener()).sheet().doRead();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleRead03</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String fileName = <span class="string">&quot;F:/testExcel/testRead.xls&quot;</span>;</span><br><span class="line">    <span class="comment">// 这里默认读取第一个sheet</span></span><br><span class="line">    EasyExcel.read(fileName, ExcelEmpData.class, <span class="keyword">new</span> ExcelEmpDataListener()).excelType(ExcelTypeEnum.XLS).sheet().doRead();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210002620.png" alt="image-20210210002619823"></p><h1 id="二、在线教育项目整合EasyExcel"><a href="#二、在线教育项目整合EasyExcel" class="headerlink" title="二、在线教育项目整合EasyExcel"></a>二、在线教育项目整合EasyExcel</h1><blockquote><p>在在线教育项目的课程分类管理中，我们需要接收管理员从前端传过来的课程分类excel，在解析后将excel中的数据存入课程分类表</p></blockquote><h2 id="2-1、添加依赖"><a href="#2-1、添加依赖" class="headerlink" title="2.1、添加依赖"></a>2.1、添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xmlbeans<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xmlbeans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2、创建与Excel对应的实体类"><a href="#2-2、创建与Excel对应的实体类" class="headerlink" title="2.2、创建与Excel对应的实体类"></a>2.2、创建与Excel对应的实体类</h2><blockquote><p>excel模板文件格式如下：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210003102.png" alt="image-20210210003102353"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelSubjectData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;一级分类&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String levelOneTitle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;二级分类&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String levelTwoTitle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3、实现Excel导入"><a href="#2-3、实现Excel导入" class="headerlink" title="2.3、实现Excel导入"></a>2.3、实现Excel导入</h2><h3 id="1、创建监听器-1"><a href="#1、创建监听器-1" class="headerlink" title="1、创建监听器"></a>1、创建监听器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">//全参</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">//无参</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelSubjectDataListener</span> <span class="keyword">extends</span> <span class="title">AnalysisEventListener</span>&lt;<span class="title">ExcelSubjectData</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 假设这个是一个DAO，当然有业务逻辑这个也可以是一个service。当然如果不用存储这个对象没用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> SubjectMapper subjectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *遍历每一行的记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(ExcelSubjectData data, AnalysisContext context)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;解析到一条记录: &#123;&#125;&quot;</span>, data);</span><br><span class="line">        <span class="comment">//处理读取出来的数据</span></span><br><span class="line">        String levelOneTitle = data.getLevelOneTitle();<span class="comment">//一级标题</span></span><br><span class="line">        String levelTwoTitle = data.getLevelTwoTitle();<span class="comment">//二级标题</span></span><br><span class="line">        log.info(<span class="string">&quot;levelOneTitle: &#123;&#125;&quot;</span>, levelOneTitle);</span><br><span class="line">        log.info(<span class="string">&quot;levelTwoTitle: &#123;&#125;&quot;</span>, levelTwoTitle);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 组装数据：Subject</span></span><br><span class="line">        <span class="comment">// 存入数据库：subjectMapper.insert()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有数据解析完成了 都会来调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;所有数据解析完成！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、监听器中添加辅助方法"><a href="#2、监听器中添加辅助方法" class="headerlink" title="2、监听器中添加辅助方法"></a>2、监听器中添加辅助方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类名称查询这个一级分类是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Subject <span class="title">getByTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">    QueryWrapper&lt;Subject&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;title&quot;</span>, title);</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;parent_id&quot;</span>, <span class="string">&quot;0&quot;</span>);<span class="comment">//一级分类</span></span><br><span class="line">    <span class="keyword">return</span> subjectMappter.selectOne(queryWrapper);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类名称和父id查询这个二级分类是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Subject <span class="title">getSubByTitle</span><span class="params">(String title, String parentId)</span> </span>&#123;</span><br><span class="line">    QueryWrapper&lt;Subject&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;title&quot;</span>, title);</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;parent_id&quot;</span>, parentId);</span><br><span class="line">    <span class="keyword">return</span> subjectMappter.selectOne(queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、完善invoke方法"><a href="#3、完善invoke方法" class="headerlink" title="3、完善invoke方法"></a>3、完善invoke方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个每一条数据解析都会来调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(ExcelSubjectData data, AnalysisContext context)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, data);</span><br><span class="line">    <span class="comment">//处理读取进来的数据</span></span><br><span class="line">    String titleLevelOne = data.getLevelOneTitle();</span><br><span class="line">    String titleLevelTwo = data.getLevelTwoTitle();</span><br><span class="line">    <span class="comment">//判断一级分类是否重复</span></span><br><span class="line">    Subject subjectLevelOne = <span class="keyword">this</span>.getByTitle(titleLevelOne);</span><br><span class="line">    String parentId = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(subjectLevelOne == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//将一级分类存入数据库</span></span><br><span class="line">        Subject subject = <span class="keyword">new</span> Subject();</span><br><span class="line">        subject.setParentId(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        subject.setTitle(titleLevelOne);<span class="comment">//一级分类名称</span></span><br><span class="line">        subjectMappter.insert(subject);</span><br><span class="line">        parentId = subject.getId();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        parentId = subjectLevelOne.getId();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断二级分类是否重复</span></span><br><span class="line">    Subject subjectLevelTwo = <span class="keyword">this</span>.getSubByTitle(titleLevelTwo, parentId);</span><br><span class="line">    <span class="keyword">if</span>(subjectLevelTwo == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//将二级分类存入数据库</span></span><br><span class="line">        Subject subject = <span class="keyword">new</span> Subject();</span><br><span class="line">        subject.setTitle(titleLevelTwo);</span><br><span class="line">        subject.setParentId(parentId);</span><br><span class="line">        subjectMappter.insert(subject);<span class="comment">//添加</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、SubjectService"><a href="#4、SubjectService" class="headerlink" title="4、SubjectService"></a><strong>4、SubjectService</strong></h3><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">batchImport</span><span class="params">(InputStream inputStream)</span></span>;</span><br></pre></td></tr></table></figure><p>实现：获取Excel记录并逐条导入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchImport</span><span class="params">(InputStream inputStream)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里 需要指定读用哪个class去读，然后读取第一个sheet 文件流会自动关闭</span></span><br><span class="line">    EasyExcel.read(inputStream, ExcelSubjectData.class, <span class="keyword">new</span> ExcelSubjectDataListener(baseMapper))</span><br><span class="line">        .excelType(ExcelTypeEnum.XLS).sheet().doRead();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、Controller"><a href="#5、Controller" class="headerlink" title="5、Controller"></a>5、Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;课程分类管理&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/edu/subject&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SubjectService subjectService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;import&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;Excel批量导入课程分类&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">batchImport</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@ApiParam(value = &quot;Excel文件&quot;,required = true)</span></span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用service层的批量导入方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subjectService.batchImport(file.getInputStream());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//打印日志</span></span><br><span class="line">            log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">            <span class="comment">//抛出一个Excel导入失败异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GrainException(ResultCodeEnum.EXCEL_DATA_IMPORT_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.ok().message(<span class="string">&quot;批量导入成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;nested&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;嵌套分类数据列表&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">nestedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回分类VO列表</span></span><br><span class="line">        List&lt;SubjectVo&gt; subjectVoList = subjectService.nestedList();</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">&quot;items&quot;</span>,subjectVoList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、使用swagger进行测试"><a href="#6、使用swagger进行测试" class="headerlink" title="6、使用swagger进行测试"></a>6、使用swagger进行测试</h3><blockquote><p>删除数据库中的所有课程分类</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210003822.png" alt="image-20210210003821966"></p><blockquote><p>打开swagger，选择文件进行上传</p></blockquote><ul><li>swagger页面</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210004001.png" alt="image-20210210004001328"></p><ul><li>要上传的文件</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210003944.png" alt="image-20210210003944206"></p><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210004050.png" alt="image-20210210004050124"></p><ul><li>数据库</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210210004116.png" alt="image-20210210004116897"></p>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
            <tag> 👢Spring Boot </tag>
            
            <tag> ✨EasyExcel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线教育项目总结（二）-用户认证</title>
      <link href="posts/650479038.html"/>
      <url>posts/650479038.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、有状态登录和无状态登录"><a href="#一、有状态登录和无状态登录" class="headerlink" title="一、有状态登录和无状态登录"></a>一、有状态登录和无状态登录</h1><h2 id="1-1-什么是有状态？"><a href="#1-1-什么是有状态？" class="headerlink" title="1.1.什么是有状态？"></a>1.1.什么是有状态？</h2><blockquote><p>有状态服务，即服务端需要记录每次会话的客户端信息，从而识别客户端身份，根据用户身份进行请求的处理，典型的设计如tomcat中的session。</p><p>例如登录：用户登录后，我们把登录者的信息保存在服务端session中，并且给用户一个cookie值，记录对应的session。然后下次请求，用户携带cookie值来，我们就能识别到对应session，从而找到用户的信息。</p></blockquote><p>缺点：</p><ul><li>服务端保存大量数据，增加服务端压力</li><li>服务端保存用户状态，无法进行水平扩展</li><li>客户端请求依赖服务端，多次请求必须访问同一台服务器</li></ul><h2 id="1-2、什么是无状态？"><a href="#1-2、什么是无状态？" class="headerlink" title="1.2、什么是无状态？"></a>1.2、什么是无状态？</h2><blockquote><p>服务器不保存用户的登录信息！</p><p>微服务集群中的每个服务，对外提供的都是Rest风格的接口。而Rest风格的一个最重要的规范就是：服务的无状态性，即：</p><ul><li><strong>服务端不保存任何客户端请求者信息</strong></li><li>客户端的每次请求必须具备自描述信息（jwt），通过这些信息识别客户端身份</li></ul></blockquote><p><strong>优点：</strong></p><ul><li>无状态： token是无状态，session是有状态的</li><li>基于标准化：你的API可以采用标准化的 JSON Web Token (JWT)</li><li>客户端请求不依赖服务端的信息，任何多次请求不需要必须访问到同一台服务</li><li>服务端的集群和状态对客户端透明</li><li>服务端可以任意的迁移和伸缩</li><li>减小服务端存储压力</li></ul><p><strong>缺点：</strong></p><ul><li>占用带宽</li><li>无法在服务器端销毁</li></ul><h1 id="二、常见登录方式"><a href="#二、常见登录方式" class="headerlink" title="二、常见登录方式"></a>二、常见登录方式</h1><h2 id="2-1、单一服务器模式"><a href="#2-1、单一服务器模式" class="headerlink" title="2.1、单一服务器模式"></a>2.1、单一服务器模式</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205210527.png" alt="image-20210205210527360"></p><p><strong>一般过程如下：</strong></p><ol><li>用户向服务器发送用户名和密码。</li><li>验证服务器后，相关数据（如用户名，用户角色等）将保存在当前会话（session）中。</li><li>服务器向用户返回session_id，session信息都会写入到用户的Cookie。</li><li>用户的每个后续请求都将通过在Cookie中取出session_id传给服务器。</li><li>服务器收到session_id并对比之前保存的数据，确认用户的身份。</li></ol><p><strong>缺点：</strong></p><ul><li>单点性能压力，无法扩展。</li><li>分布式架构中，需要session共享方案，session共享方案存在性能瓶颈。</li></ul><h2 id="2-2、单点登录（Single-Sign-On）"><a href="#2-2、单点登录（Single-Sign-On）" class="headerlink" title="2.2、单点登录（Single  Sign  On）"></a>2.2、单点登录（Single  Sign  On）</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205210648.png" alt="image-20210205210648124"></p><p>分布式，SSO(single sign on)模式：单点登录英文全称Single Sign On，简称就是SSO。它的解释是：在多个应用系统中，只需要登录一次，就可以访问其他相互信任的应用系统。</p><ul><li>如图所示，图中有3个系统，分别是业务A、业务B、和SSO。</li><li>业务A、业务B没有登录模块。</li><li>而SSO只有登录模块，没有其他的业务模块。</li></ul><p><strong>一般过程如下：</strong></p><ol><li>当业务A、业务B需要登录时，将跳到SSO系统。</li><li>SSO从用户信息数据库中获取用户信息并校验用户信息，SSO系统完成登录。</li><li>然后将用户信息存入缓存（例如redis）。</li><li>当用户访问业务A或业务B，需要判断用户是否登录时，将跳转到SSO系统中进行用户身份验证，SSO判断缓存中是否存在用户身份信息。</li><li>这样，只要其中一个系统完成登录，其他的应用系统也就随之登录了。这就是单点登录（SSO）的定义。</li></ol><p><strong>优点 ：</strong>  </p><p>用户身份信息独立管理，更好的分布式管理。可以自己扩展安全策略</p><p><strong>缺点：</strong></p><p>认证服务器访问压力较大。</p><h2 id="2-3、Token模式"><a href="#2-3、Token模式" class="headerlink" title="2.3、Token模式"></a>2.3、Token模式</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205210734.png" alt="image-20210205210734269"></p><p><strong>优点：</strong></p><ul><li>无状态： token是无状态，session是有状态的</li><li>基于标准化：你的API可以采用标准化的 JSON Web Token (JWT)</li></ul><p><strong>缺点：</strong></p><ul><li>占用带宽</li><li>无法在服务器端销毁</li></ul><blockquote><p>无状态登录的流程：</p></blockquote><ul><li>当客户端第一次请求服务时，服务端对用户进行信息认证（登录）</li><li>认证通过，将用户信息进行加密形成token，返回给客户端，作为登录凭证</li><li>以后每次请求，客户端都携带认证的token</li><li>服务的对token进行解密，判断是否有效。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205211358.png" alt="image-20210205211358667"></p><p>整个登录过程中，最关键的点是什么？</p><p><strong>token的安全性</strong></p><h1 id="三、JWT"><a href="#三、JWT" class="headerlink" title="三、JWT"></a>三、JWT</h1><h2 id="3-1、什么是JWT令牌"><a href="#3-1、什么是JWT令牌" class="headerlink" title="3.1、什么是JWT令牌"></a>3.1、什么是JWT令牌</h2><blockquote><p>JWT是JSON Web Token的缩写，即JSON Web令牌，是一种自包含令牌。 </p></blockquote><h3 id="1、使用场景"><a href="#1、使用场景" class="headerlink" title="1、使用场景"></a>1、使用场景</h3><ul><li>一种情况是webapi，类似阿里云播放凭证的功能。</li><li>另一种情况是多web服务器下实现无状态分布式身份验证。</li></ul><h3 id="2、交互流程"><a href="#2、交互流程" class="headerlink" title="2、交互流程"></a>2、交互流程</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205211838.png" alt="image-20210205211838506"></p><p>步骤翻译：</p><ul><li>1、用户登录</li><li>2、服务的认证，通过后根据secret生成token</li><li>3、将生成的token返回给浏览器</li><li>4、用户每次请求携带token</li><li>5、服务端利用公钥解读jwt签名，判断签名有效后，从Payload中获取用户信息</li><li>6、处理请求，返回响应结果</li></ul><p>因为JWT签发的token中已经包含了用户的身份信息，并且每次请求都会携带，这样服务的就无需保存用户信息，甚至无需去数据库查询，完全符合了Rest的无状态规范。</p><h3 id="3、作用"><a href="#3、作用" class="headerlink" title="3、作用"></a>3、作用</h3><blockquote><p>JWT 最重要的作用就是对 token信息的防伪作用</p></blockquote><h3 id="4、原理"><a href="#4、原理" class="headerlink" title="4、原理"></a>4、原理</h3><ul><li>一个JWT由三个部分组成：JWT头、有效载荷、签名哈希</li><li>最后由这三者组合进行base64编码得到JWT</li></ul><h2 id="3-2、JWT令牌的组成"><a href="#3-2、JWT令牌的组成" class="headerlink" title="3.2、JWT令牌的组成"></a>3.2、JWT令牌的组成</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205212928.png" alt="image-20210205212928770"></p><p><strong>JWT头</strong></p><p>JWT头部分是一个描述JWT元数据的JSON对象，通常如下所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，alg属性表示签名使用的算法，默认为HMAC SHA256（写为HS256）；typ属性表示令牌的类型，JWT令牌统一写为JWT。最后，使用Base64 URL算法将上述JSON对象转换为字符串保存。</p><p><strong>有效载荷</strong></p><p>有效载荷部分，是JWT的主体内容部分，也是一个JSON对象，包含需要传递的数据。 JWT指定七个默认字段供选择。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iss: jwt签发者</span><br><span class="line">sub: 主题</span><br><span class="line">aud: 接收jwt的一方</span><br><span class="line">exp: jwt的过期时间，这个过期时间必须要大于签发时间</span><br><span class="line">nbf: 定义在什么时间之前，该jwt都是不可用的.</span><br><span class="line">iat: jwt的签发时间</span><br><span class="line">jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</span><br></pre></td></tr></table></figure><p>除以上默认字段外，我们还可以自定义私有字段，如下例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Helen&quot;,</span><br><span class="line">  &quot;admin&quot;: true,</span><br><span class="line">  &quot;avatar&quot;: &quot;helen.jpg&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，默认情况下JWT是未加密的，任何人都可以解读其内容，因此不要构建隐私信息字段，存放保密信息，以防止信息泄露。</p><p>JSON对象也使用Base64 URL算法转换为字符串保存。</p><p><strong>签名哈希</strong></p><p>签名哈希部分是对上面两部分数据签名，通过指定的算法生成哈希，以确保数据不会被篡改。</p><p>首先，需要指定一个密码（secret）。该密码仅仅为保存在服务器中，并且不能向用户公开。然后，使用标头中指定的签名算法（默认情况下为HMAC SHA256）根据以下公式生成签名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(claims), secret)</span><br></pre></td></tr></table></figure><p>在计算出签名哈希后，JWT头，有效载荷和签名哈希的三个部分组合成一个字符串，每个部分用”.”分隔，就构成整个JWT对象。</p><p><strong>Base64URL算法</strong></p><p>如前所述，JWT头和有效载荷序列化的算法都用到了Base64URL。该算法和常见Base64算法类似，稍有差别。</p><p>作为令牌的JWT可以放在URL中（例如api.example/?token=xxx）。 Base64中用的三个字符是”+”，”/“和”=”，由于在URL中有特殊含义，因此Base64URL中对他们做了替换：”=”去掉，”+”用”-“替换，”/“用”_”替换，这就是Base64URL算法。</p><p><strong>注意：</strong>base64编码，并不是加密，只是把明文信息变成了不可见的字符串。但是其实只要用一些工具就可以把base64编码解成明文，所以不要在JWT中放入涉及私密的信息。</p><h2 id="3-3、JWT的用法"><a href="#3-3、JWT的用法" class="headerlink" title="3.3、JWT的用法"></a>3.3、JWT的用法</h2><blockquote><p>客户端接收服务器返回的JWT，将其存储在Cookie或localStorage中。</p><p>此后，客户端将在与服务器交互中都会带JWT。如果将它存储在Cookie中，就可以自动发送，但是不会跨域，因此一般是将它放入HTTP请求的Header Authorization字段中。</p><p>当跨域时，也可以将JWT放置于POST请求的数据主体中。</p></blockquote><h2 id="3-4、问题和趋势"><a href="#3-4、问题和趋势" class="headerlink" title="3.4、问题和趋势"></a>3.4、问题和趋势</h2><p>1、JWT默认不加密，但可以加密。生成原始令牌后，可以使用该令牌再次对其进行加密。</p><p>2、当JWT未加密时，一些私密数据无法通过JWT传输。</p><p>3、JWT不仅可用于认证，还可用于信息交换。善用JWT有助于减少服务器请求数据库的次数。</p><p>4、JWT的最大缺点是服务器不保存会话状态，所以在使用期间不可能取消令牌或更改令牌的权限。也就是说，一旦JWT签发，在有效期内将会一直有效。</p><p>5、JWT本身包含认证信息，因此一旦信息泄露，任何人都可以获得令牌的所有权限。为了减少盗用，JWT的有效期不宜设置太长。对于某些重要操作，用户在使用时应该每次都进行身份验证。</p><p>6、为了减少盗用和窃取，JWT不建议使用HTTP协议来传输代码，而是使用加密的HTTPS协议进行传输。</p><h1 id="四、用户身份认证"><a href="#四、用户身份认证" class="headerlink" title="四、用户身份认证"></a>四、用户身份认证</h1><h2 id="4-1、引入依赖"><a href="#4-1、引入依赖" class="headerlink" title="4.1、引入依赖"></a>4.1、引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2、引入工具类和用户有效载荷类"><a href="#4-2、引入工具类和用户有效载荷类" class="headerlink" title="4.2、引入工具类和用户有效载荷类"></a>4.2、引入工具类和用户有效载荷类</h2><blockquote><p>JwtUtils.java，用于根据<strong>用户信息</strong>生成<strong>token</strong>、判断token是否有效的工具类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String APP_SECRET = <span class="string">&quot;ukc8BDbRigUDaY6pZFfWus2jZWLPHO&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Key <span class="title">getKeyInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = DatatypeConverter.parseBase64Binary(APP_SECRET);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SecretKeySpec(bytes,signatureAlgorithm.getJcaName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJwtToken</span><span class="params">(JwtInfo jwtInfo, <span class="keyword">int</span> expire)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String JwtToken = Jwts.builder()</span><br><span class="line">                .setHeaderParam(<span class="string">&quot;typ&quot;</span>, <span class="string">&quot;JWT&quot;</span>)</span><br><span class="line">                .setHeaderParam(<span class="string">&quot;alg&quot;</span>, <span class="string">&quot;HS256&quot;</span>)</span><br><span class="line">                .setSubject(<span class="string">&quot;guli-user&quot;</span>)<span class="comment">//主题</span></span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> Date())<span class="comment">//颁发时间</span></span><br><span class="line">                .setExpiration(DateTime.now().plusSeconds(expire).toDate())<span class="comment">//过期时间</span></span><br><span class="line">                .claim(<span class="string">&quot;id&quot;</span>, jwtInfo.getId())<span class="comment">//用户id</span></span><br><span class="line">                .claim(<span class="string">&quot;nickname&quot;</span>, jwtInfo.getNickname())<span class="comment">//用户昵称</span></span><br><span class="line">                .claim(<span class="string">&quot;avatar&quot;</span>, jwtInfo.getAvatar())<span class="comment">//用户头像</span></span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, getKeyInstance())</span><br><span class="line">                .compact();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JwtToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断token是否存在与有效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwtToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkJwtTToken</span><span class="params">(String jwtToken)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(jwtToken)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Jwts.parser().setSigningKey(getKeyInstance()).parseClaimsJws(jwtToken);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断token是否存在与有效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkJwtTToken</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String jwtToken = request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isEmpty(jwtToken)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Jwts.parser().setSigningKey(getKeyInstance()).parseClaimsJws(jwtToken);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据token获取会员id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JwtInfo <span class="title">getMemberIdByJwtToken</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String jwtToken = request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(jwtToken)) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Jws&lt;Claims&gt; claimsJws = Jwts.parser().setSigningKey(getKeyInstance()).parseClaimsJws(jwtToken);</span><br><span class="line">        Claims claims = claimsJws.getBody();</span><br><span class="line">        JwtInfo jwtInfo = <span class="keyword">new</span> JwtInfo(claims.get(<span class="string">&quot;id&quot;</span>).toString(), claims.get(<span class="string">&quot;nickname&quot;</span>).toString(), claims.get(<span class="string">&quot;avatar&quot;</span>).toString());</span><br><span class="line">        <span class="keyword">return</span> jwtInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>JwtInfo，存放用户的有效信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">    <span class="comment">//权限、角色等</span></span><br><span class="line">    <span class="comment">//不要存敏感信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3、定义LoginVo"><a href="#4-3、定义LoginVo" class="headerlink" title="4.3、定义LoginVo"></a>4.3、定义LoginVo</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4、定义控制层接口"><a href="#4-4、定义控制层接口" class="headerlink" title="4.4、定义控制层接口"></a>4.4、定义控制层接口</h2><blockquote><p>该接口接收Service层生成的Token，然后将token返回至前端</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;会员登录&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;login&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginVo loginVo)</span> </span>&#123;</span><br><span class="line">    String token = memberService.login(loginVo);</span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5、定义Service层"><a href="#4-5、定义Service层" class="headerlink" title="4.5、定义Service层"></a>4.5、定义Service层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(LoginVo loginVo)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String mobile = loginVo.getMobile();</span><br><span class="line">    String password = loginVo.getPassword();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//校验参数</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(mobile)</span><br><span class="line">        || !FormUtils.isMobile(mobile)</span><br><span class="line">        || StringUtils.isEmpty(password)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> GuliException(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//校验手机号</span></span><br><span class="line">    QueryWrapper&lt;Member&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;mobile&quot;</span>, mobile);</span><br><span class="line">    Member member = baseMapper.selectOne(queryWrapper);</span><br><span class="line">    <span class="keyword">if</span>(member == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> GuliException(ResultCodeEnum.LOGIN_MOBLE_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//校验密码</span></span><br><span class="line">    <span class="keyword">if</span>(!MD5.encrypt(password).equals(member.getPassword()))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> GuliException(ResultCodeEnum.LOGIN_PASSWORD_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检验用户是否被禁用</span></span><br><span class="line">    <span class="keyword">if</span>(member.getDisabled())&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> GuliException(ResultCodeEnum.LOGIN_DISABLED_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    JwtInfo jwtInfo = <span class="keyword">new</span> JwtInfo();</span><br><span class="line">    jwtInfo.setId(member.getId());</span><br><span class="line">    jwtInfo.setNickname(member.getNickname());</span><br><span class="line">    jwtInfo.setAvatar(member.getAvatar());</span><br><span class="line">    String jwtToken = JwtUtils.getJwtToken(jwtInfo, <span class="number">1800</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jwtToken;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-6、测试"><a href="#4-6、测试" class="headerlink" title="4.6、测试"></a>4.6、测试</h2><blockquote><p>往数据库中插入一条测试数据，mobile为13711111111，密码为123</p></blockquote><blockquote><p>打开swagger，进行测试</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205215334.png" alt="image-20210205215334387"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205215350.png" alt="image-20210205215350880"></p><blockquote><p>当mobile和密码均输入无误时，后端会返回一个token</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205215435.png" alt="image-20210205215435940"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205215449.png" alt="image-20210205215449715"></p>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
            <tag> 👢Spring Boot </tag>
            
            <tag> 🆔JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法学习（三）-二叉排序树详解</title>
      <link href="posts/3310991137.html"/>
      <url>posts/3310991137.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><blockquote><p><strong>二叉排序树</strong>亦称<strong>二叉查找树</strong>，是树形数据结构的一种，在一般情况下，二叉排序树的查找效率要<strong>高于</strong>普通链表，它要么是一棵空树，要么具有以下性质：</p><ul><li>若它的左子树不为空，则<strong>左子树上所有结点的值均小于它的根结点的值</strong>；</li><li>若它的右子树不为空，则<strong>右子树上所有结点的值均大于它的根结点的值</strong>；</li><li><strong>它的左、右子树分别为二叉排序树</strong>。</li><li>下面是一棵标准的二叉排序树</li></ul></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205180351.png" alt="image-20210205180344323"></p><h1 id="二、二叉排序树的生成与节点插入"><a href="#二、二叉排序树的生成与节点插入" class="headerlink" title="二、二叉排序树的生成与节点插入"></a>二、二叉排序树的生成与节点插入</h1><h2 id="2-1、生成"><a href="#2-1、生成" class="headerlink" title="2.1、生成"></a>2.1、生成</h2><h3 id="1、创建Node类和Tree类"><a href="#1、创建Node类和Tree类" class="headerlink" title="1、创建Node类和Tree类"></a>1、创建Node类和Tree类</h3><blockquote><p>创建一个<strong>Node</strong>类作为二叉排序树的<strong>节点类</strong>，这里省略getter、setter和toString方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 节点的值</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="comment">// 当前节点的左子节点</span></span><br><span class="line">    Node left;</span><br><span class="line">    <span class="comment">// 当前节点的右子节点</span></span><br><span class="line">    Node right;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><blockquote><p>创建一个<strong>Tree</strong>类，这个类包含一个Node类型的root属性。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tree</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当前树的根节点</span></span><br><span class="line">    Node root;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h3 id="2、生成思路"><a href="#2、生成思路" class="headerlink" title="2、生成思路"></a>2、生成思路</h3><blockquote><p>既可以在创建二叉树对象时直接使用有参构造函数传入根节点对象，也可以在添加节点时才插入root节点</p><p>注：当一棵树root节点为空时，第一个插入该树的节点就是根节点。</p></blockquote><h2 id="2、节点插入"><a href="#2、节点插入" class="headerlink" title="2、节点插入"></a>2、节点插入</h2><h3 id="1、思路"><a href="#1、思路" class="headerlink" title="1、思路"></a>1、思路</h3><blockquote><p>在Tree类中添加一个addNode方法，<strong>如果当前树的根节点为空，那么将要添加到二叉排序树的节点设置为根节点</strong>，否则就<strong>调用root节点对象的add方法</strong>，在root对象的add方法中：</p><ul><li>  如果传入要添加的节点node为空，那么直接返回，不做添加。</li><li>如果传入要添加的节点node的数值小于当前节点的数值，那么进行判断，如果当前节点的左子树为空，那么直接让当前节点的左子树为要添加的节点node。否则向左进行递归添加，判断待添加节点node的数据与当前左子节点数据的关系，重复以上操作。</li><li>如果传入要添加的节点node的数值大于等于当前节点的数值，这种情况需要尽量避免，这个时候进行判断，如果当前节点右子树为空，那么令当前节点右子树等于要添加的节点node。否则向右进行递归添加，判断待添加节点node的数据与当前右子节点数据的关系，重复以上操作。</li></ul></blockquote><h3 id="2、插入节点–Tree"><a href="#2、插入节点–Tree" class="headerlink" title="2、插入节点–Tree"></a>2、插入节点–Tree</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(Node node)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.root == <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.root = node; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="keyword">this</span>.root.add(node); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、节点的比较与插入–Node"><a href="#3、节点的比较与插入–Node" class="headerlink" title="3、节点的比较与插入–Node"></a>3、节点的比较与插入–Node</h3><blockquote><p><strong>比较节点树的静态方法</strong>如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(Node node1,Node node2)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> node1.data &gt; node2.data; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>Node类中插入节点的方法如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Node node)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(node == <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(compare(<span class="keyword">this</span>,node)) &#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.left == <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="keyword">this</span>.left = node; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">this</span>.left.add(node); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.right == <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="keyword">this</span>.right = node; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">this</span>.right.add(node); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、二叉树的前中后序遍历"><a href="#三、二叉树的前中后序遍历" class="headerlink" title="三、二叉树的前中后序遍历"></a>三、二叉树的前中后序遍历</h1><blockquote><p>前序遍历的顺序：<strong>根节点–左子节点–右子节点</strong></p><p>中序遍历的顺序：<strong>左子节点–根节点–右子节点</strong></p><p>后序遍历的顺序：<strong>左子节点–右子节点–根节点</strong></p></blockquote><h2 id="3-1、递归实现"><a href="#3-1、递归实现" class="headerlink" title="3.1、递归实现"></a>3.1、递归实现</h2><h3 id="1、前序遍历"><a href="#1、前序遍历" class="headerlink" title="1、前序遍历"></a>1、前序遍历</h3><blockquote><p>先输出当前节点，然后判断当前节点的左子树是否为空，如果不为空，就向左递归进行前序遍历。然后判断当前节点的右子树是否为空，若不为空，向右递归进行前序遍历。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Tree类 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.root != <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.root.preOrder(); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;二叉树为空，无法遍历！&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//Node类 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="keyword">this</span>); </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.getLeft() != <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.getLeft().preOrder(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.getRight() != <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.getRight().preOrder(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、中序遍历"><a href="#2、中序遍历" class="headerlink" title="2、中序遍历"></a>2、中序遍历</h3><blockquote><p>先判断当前节点左子树是否为空，若不为空，向左递归进行中序遍历，然后输出当前节点；最后判断当前节点的右子树是否为空，若不为空，向右递归进行中序遍历。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Tree类 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infixOrder</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.root != <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.root.infixOrder(); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;二叉树为空，无法遍历！&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//Node类 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infixOrder</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.getLeft() != <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.getLeft().infixOrder(); </span><br><span class="line">    &#125; </span><br><span class="line">    System.out.println(<span class="keyword">this</span>); </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.getRight() != <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.getRight().infixOrder(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、后序遍历"><a href="#3、后序遍历" class="headerlink" title="3、后序遍历"></a>3、后序遍历</h3><blockquote><p>先判断当前节点左子树是否为空，若不为空，向左递归进行后序遍历；然后判断当前节点的右子树是否为空，若不为空，向右递归进行后序遍历。最后输出当前节点。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Tree类 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.root != <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.root.postOrder(); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;二叉树为空，无法遍历！&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//Node类 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.getLeft() != <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.getLeft().postOrder(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.getRight() != <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.getRight().postOrder(); </span><br><span class="line">    &#125; </span><br><span class="line">    System.out.println(<span class="keyword">this</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2、非递归实现"><a href="#3-2、非递归实现" class="headerlink" title="3.2、非递归实现"></a>3.2、非递归实现</h2><blockquote><p>我们需要使用到<strong>栈</strong>这一数据结构来解决问题</p></blockquote><h3 id="1、前序遍历-1"><a href="#1、前序遍历-1" class="headerlink" title="1、前序遍历"></a>1、前序遍历</h3><blockquote><p>如果当前节点不为空，先输出当前节点信息，然后将该节点压入栈，并将指针移动到当前节点的左子节点，此时如果该左子树为空，就退出循环，此时如果栈不为空，就弹出栈顶数据，将指针移动到当前结点右子树，循环，直到栈空或者当前节点为空。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(Node node)</span> </span>&#123; </span><br><span class="line">    Stack&lt;Node&gt; nodeStack = <span class="keyword">new</span> Stack&lt;&gt;(); </span><br><span class="line">    <span class="keyword">while</span>(node != <span class="keyword">null</span> || !nodeStack.empty()) &#123; </span><br><span class="line">        <span class="keyword">while</span>(node != <span class="keyword">null</span>) &#123; </span><br><span class="line">            System.out.println(node); </span><br><span class="line">            nodeStack.push(node); </span><br><span class="line">            node = node.getLeft(); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span>(!nodeStack.empty()) &#123; </span><br><span class="line">            node = nodeStack.pop(); </span><br><span class="line">            node = node.getRight(); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、中序遍历-1"><a href="#2、中序遍历-1" class="headerlink" title="2、中序遍历"></a>2、中序遍历</h3><blockquote><p>如果当前节点不为空，将当前节点压入栈中，然后将指针指向当前节点左子树，直到左子树为空，此时栈不为空，将栈顶元素弹出并输出后，将指针移动到当前结点右子树，循环，直到栈空或者当前节点为空。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">midOrder</span><span class="params">(Node node)</span> </span>&#123; </span><br><span class="line">    Stack&lt;Node&gt; nodeStack = <span class="keyword">new</span> Stack&lt;&gt;(); </span><br><span class="line">    <span class="keyword">while</span>(node != <span class="keyword">null</span> || !nodeStack.empty()) &#123; </span><br><span class="line">        <span class="keyword">while</span>(node != <span class="keyword">null</span>) &#123; </span><br><span class="line">            nodeStack.push(node); </span><br><span class="line">            node = node.getLeft(); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span>(!nodeStack.empty()) &#123; </span><br><span class="line">            node = nodeStack.pop(); </span><br><span class="line">            System.out.println(node); </span><br><span class="line">            node = node.getRight(); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、后序遍历-1"><a href="#3、后序遍历-1" class="headerlink" title="3、后序遍历"></a>3、后序遍历</h3><blockquote><p>需要利用到一个辅助栈用于输出结果，由于栈具有先进后出的特点，而后序遍历的顺序是左右根，所以压入栈顺序为根、右、左。最后使用辅助栈输出</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(Node node)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(node == <span class="keyword">null</span>) &#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;要遍历的二叉树为空！&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;(); </span><br><span class="line">    <span class="comment">//辅助栈 </span></span><br><span class="line">    Stack&lt;Node&gt; assistStack = <span class="keyword">new</span> Stack&lt;&gt;(); </span><br><span class="line">    <span class="keyword">while</span>(node != <span class="keyword">null</span> || !stack.isEmpty()) &#123; </span><br><span class="line">        <span class="keyword">while</span>(node != <span class="keyword">null</span>) &#123; </span><br><span class="line">            stack.push(node); </span><br><span class="line">            assistStack.push(node); </span><br><span class="line">            node = node.getRight(); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span>(!stack.isEmpty()) &#123; </span><br><span class="line">            node = stack.pop(); </span><br><span class="line">            node = node.getLeft(); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">while</span>(!assistStack.isEmpty()) &#123; </span><br><span class="line">        System.out.println(assistStack.pop()); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、二叉排序树节点的删除"><a href="#四、二叉排序树节点的删除" class="headerlink" title="四、二叉排序树节点的删除"></a>四、二叉排序树节点的删除</h1><blockquote><p>二叉排序树中的节点可以分为以下三种：</p><ul><li>叶子节点</li><li>有一棵子树的节点</li><li>有两棵子树的节点</li></ul><p>我们需要判断待删除节点为什么类型，然后根据节点类型进行删除操作。</p></blockquote><h2 id="4-1、编写用于搜索待删除节点和待删除节点父节点的方法"><a href="#4-1、编写用于搜索待删除节点和待删除节点父节点的方法" class="headerlink" title="4.1、编写用于搜索待删除节点和待删除节点父节点的方法"></a>4.1、编写用于搜索待删除节点和待删除节点父节点的方法</h2><h3 id="1、搜索待删除节点的方法"><a href="#1、搜索待删除节点的方法" class="headerlink" title="1、搜索待删除节点的方法"></a>1、搜索待删除节点的方法</h3><blockquote><p>搜索待删除节点，首先判断当前二叉排序树是否为空，若为空，直接返回，否则调用当前二叉排序树根节点的search方法</p><ul><li><p>如果当前传入的数据data的值刚好等于当前节点的data值，那么当前节点就是待删除节点，直接返回即可</p></li><li><p> 如果当前传入的数据data的值小于当前节点的值且当前节点的左子树为空，证明当前二叉排序树中没有要删除的节点；如果当前传入数据data值小于当前节点值且当前节点左子树不为空，那么调用当前节点左子树的search方法，向左递归查询。</p></li><li><p>同理，如果当前传入的数据data值大于当前节点值且当前节点右子树为空，证明当前二叉排序树没有要删除节点，此刻只能返回null；如果当前传入数据data值大于当前节点且当前节点右子树不为空，那么调用当前右子树的search方法，向右递归查询。</p></li></ul><p>代码如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * 根据节点的data数据搜索Node节点 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data 目标节点的data值 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果找到符合条件的node节点，那么返回该node节点 </span></span><br><span class="line"><span class="comment"> *         否则返回null </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">search</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(data == <span class="keyword">this</span>.data) &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(data &lt; <span class="keyword">this</span>.data) &#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.left == <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.left.search(data); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.right == <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.right.search(data); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、搜索待删除节点父节点的方法"><a href="#2、搜索待删除节点父节点的方法" class="headerlink" title="2、搜索待删除节点父节点的方法"></a>2、搜索待删除节点父节点的方法</h3><blockquote><p>搜索待删除节点的父节点的方法，同理先判断当前二叉排序树的根节点是否为空，若为空，返回null，否则调用当前二叉排序树的根节点的搜索待删除节点父节点（searchParent）的方法。</p><ul><li><p>如果当前节点的左子树不为空且当前节点左子树的data值等于用户传入的要检索的data值或者当前节点右子树不为空且当前节点右子树的data值等于用户传入的要检索的data值，那么证明当前节点就是待检索节点，返回当前节点。</p></li><li><p>如果传入的data值小于当前节点值且当前左子树不为空，那么调用当前左子节点的searchParent的方法。</p></li><li><p>同理，如果传入data值大于等于当前节点的data值且当前节点右子树不为空，那么调用当前节点右子节点的searchParent方法。</p></li><li><p>如果程序走到此处，证明没有找到待删除数据的父节点，此时返回null。</p></li></ul><p>代码如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * 查找要删除节点的父节点 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data 要删除的节点的数据 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 待删除节点的父节点 </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">searchParent</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>((<span class="keyword">this</span>.left != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.left.data == data) || (<span class="keyword">this</span>.right != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.right.data == data)) &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">//如果要查找的值小于当前节点值，且当前节点左子节点不为空 </span></span><br><span class="line">        <span class="comment">//递归向左 </span></span><br><span class="line">        <span class="keyword">if</span>(data &lt; <span class="keyword">this</span>.data &amp;&amp; <span class="keyword">this</span>.left != <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.left.searchParent(data); </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(data &gt;= <span class="keyword">this</span>.data &amp;&amp; <span class="keyword">this</span>.right != <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.right.searchParent(data); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2、删除叶子节点"><a href="#4-2、删除叶子节点" class="headerlink" title="4.2、删除叶子节点"></a>4.2、删除叶子节点</h2><blockquote><p>对于叶子节点，我们需要先找到待删除节点target和待删除节点的父节点parent，然后判断待删除叶子节点是其父节点的左子树还是右子树，如果为左子树，那么令parent.left = null，否则让parent.right = null。</p></blockquote><ul><li>二叉排序树中判断待删除节点是否为叶子节点的静态方法与Node类中判断传入节点为当前左子树/右子树的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * 判断node节点是否为叶子节点 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isLeaf</span><span class="params">(Node node)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * 判断传入节点是否为当前节点左子节点的方法 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLeft</span><span class="params">(Node target)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.left != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.left.data == target.data; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * 判断传入节点是否为当前节点右子节点的方法 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRight</span><span class="params">(Node target)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.right != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.right.data == target.data; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3、删除有一棵子树的节点"><a href="#4-3、删除有一棵子树的节点" class="headerlink" title="4.3、删除有一棵子树的节点"></a>4.3、删除有一棵子树的节点</h2><blockquote><p>对于有一棵子树的节点的删除，我们需要找到待删除节点和待删除节点的父节点，然后判断两个条件：1（待删除节点是其父节点的左子树还是右子树）、2（待删除节点有左子树还是右子树）</p><ul><li><p>如果待删除节点有左子树且为其父节点的左子树：此时让待删除节点的父节点的左子树等于待删除节点的左子树，即parent.left = target.left。</p></li><li><p> 如果待删除节点有左子树且为其父节点的右子树：此时根据二叉排序树的性质，待删除节点的左子树的数据要全部大于（等于）其父节点的数据，所以令待删除节点父节点的右子树等于待删除节点的左子树，即parent.right = target.left。</p></li><li><p>如果待删除节点有右子树且为其父节点的左子树：此时让parent.left = target.right</p></li><li><p>如果待删除节点有右子树且为其父节点的右子树，此时让parent.right = target.right</p></li></ul></blockquote><ul><li>Node类中判断传入节点是否为当前节点左/右子树的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * 判断传入节点是否为当前节点左子节点的方法 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLeft</span><span class="params">(Node target)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.left != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.left.data == target.data; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * 判断传入节点是否为当前节点右子节点的方法 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRight</span><span class="params">(Node target)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.right != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.right.data == target.data; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4、删除有两棵树的节点"><a href="#4-4、删除有两棵树的节点" class="headerlink" title="4.4、删除有两棵树的节点"></a>4.4、删除有两棵树的节点</h2><blockquote><p>对于有两棵子树的节点的删除：需要先取到待删除节点的右子树的最小节点的值，然后将数值最小的节点删除，最后将前面取到的最小节点的值赋值给待删除节点。</p></blockquote><ul><li>获取待删除节点右子树中最小节点的值并删除最小节点的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * 1 返回以node为根节点的二叉排序树的最小节点的值 </span></span><br><span class="line"><span class="comment"> * 2 删除以node为根节点的二叉排序树的最小节点 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 传入的节点（二叉排序树的根节点） </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回的以Node为根节点的二叉排序树的根节点的值 </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delTreeMin</span><span class="params">(Node node)</span> </span>&#123; </span><br><span class="line">    Node target = node; </span><br><span class="line">    <span class="comment">//循环的查找左节点，就能找到最小值 </span></span><br><span class="line">    <span class="keyword">while</span>(target.left != <span class="keyword">null</span>) &#123; </span><br><span class="line">        target = target.left; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//此时循环结束后，target指向最小节点 </span></span><br><span class="line">    <span class="comment">//删除最小节点 </span></span><br><span class="line">    delNode(target.data); </span><br><span class="line">    <span class="keyword">return</span> target.data; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>判断当前节点是否有两棵子树的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * 判断传入节点是否有左右子树的方法 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasTwoSon</span><span class="params">(Node node)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> node.left != <span class="keyword">null</span> &amp;&amp; node.right != <span class="keyword">null</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5、二叉排序树中根据节点数据删除节点的方法"><a href="#4-5、二叉排序树中根据节点数据删除节点的方法" class="headerlink" title="4.5、二叉排序树中根据节点数据删除节点的方法"></a>4.5、二叉排序树中根据节点数据删除节点的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * 根据data删除节点 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data 要删除的节点的data </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delNode</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">//1 先找到要删除的节点target </span></span><br><span class="line">        Node target = search(data); </span><br><span class="line">        <span class="comment">//1.1 如果要删除的节点不存在，直接返回 </span></span><br><span class="line">        <span class="keyword">if</span>(target == <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//1.2 如果当前树只有一个节点，且为待删除节点，那么直接置空 </span></span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123; </span><br><span class="line">            root = <span class="keyword">null</span>; </span><br><span class="line">            <span class="keyword">return</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//2 去找到target的父节点 </span></span><br><span class="line">        Node parent = searchParent(data); </span><br><span class="line">        <span class="comment">//2.1 如果要删除的节点是叶子节点 </span></span><br><span class="line">        <span class="keyword">if</span>(isLeaf(target)) &#123; </span><br><span class="line">            <span class="comment">//a 判断target是父节点的左子节点还是有子节点 </span></span><br><span class="line">            <span class="keyword">if</span>(parent.isLeft(target)) &#123; </span><br><span class="line">                <span class="comment">//如果是左子节点 </span></span><br><span class="line">                parent.left = <span class="keyword">null</span>; </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(parent.isRight(target)) &#123; </span><br><span class="line">                <span class="comment">//如果是右子节点 </span></span><br><span class="line">                parent.right = <span class="keyword">null</span>; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(hasTwoSon(target)) &#123; </span><br><span class="line">            <span class="comment">//2.2 如果要删除的节点有左右子树 </span></span><br><span class="line">            <span class="comment">//删除右子树最小节点，同时将最小节点的值取出来 </span></span><br><span class="line">            <span class="keyword">int</span> minData = delTreeMin(target.right); </span><br><span class="line">            target.data = minData; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">//2.3 删除只有一棵子树的节点 </span></span><br><span class="line">            <span class="comment">//如果待删除节点有左子节点 </span></span><br><span class="line">            <span class="keyword">if</span>(target.left != <span class="keyword">null</span>) &#123; </span><br><span class="line">                <span class="comment">//如果target是parent的左子节点 </span></span><br><span class="line">                <span class="keyword">if</span>(parent.isLeft(target)) &#123; </span><br><span class="line">                    parent.left = target.left; </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                    <span class="comment">//说明target是parent的右子节点 </span></span><br><span class="line">                    parent.right = target.left; </span><br><span class="line">                &#125; </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                <span class="comment">//待删除节点有右子节点 </span></span><br><span class="line">                <span class="comment">//如果target是parent的左节点 </span></span><br><span class="line">                <span class="keyword">if</span>(parent.isLeft(target)) &#123; </span><br><span class="line">                    parent.left = target.right; </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                    parent.right = target.right; </span><br><span class="line">                &#125; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、使用递归获取二叉树深度"><a href="#五、使用递归获取二叉树深度" class="headerlink" title="五、使用递归获取二叉树深度"></a>五、使用递归获取二叉树深度</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> * 递归获取二叉树深度的方法 </span></span><br><span class="line"><span class="comment"> * 如果根为空：返回0 </span></span><br><span class="line"><span class="comment"> * 否则分别递归深入左右节点，返回深度 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root 二叉树的根节点 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 二叉树深度 </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTreeDepth</span><span class="params">(Node root)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> root == <span class="keyword">null</span> ? <span class="number">0</span> : (<span class="number">1</span> + Math.max(getTreeDepth(root.left), getTreeDepth(root.right))); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、测试"><a href="#六、测试" class="headerlink" title="六、测试"></a>六、测试</h1><h2 id="6-1、测试二叉排序树的生成和插入"><a href="#6-1、测试二叉排序树的生成和插入" class="headerlink" title="6.1、测试二叉排序树的生成和插入"></a>6.1、测试二叉排序树的生成和插入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Tree tree = <span class="keyword">new</span> Tree(<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">19</span>,-<span class="number">1</span>,<span class="number">26</span>,<span class="number">100</span>,<span class="number">777</span>,-<span class="number">1012</span>,<span class="number">222</span>,<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> data = arr[i];</span><br><span class="line">    Node node = <span class="keyword">new</span> Node(data);</span><br><span class="line">    tree.addNode(node);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;tree:&quot;</span>);</span><br><span class="line">Tree.show(tree.root);</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205232121.png" alt="image-20210205232120723"></p><h2 id="6-2、测试二叉排序树的删除"><a href="#6-2、测试二叉排序树的删除" class="headerlink" title="6.2、测试二叉排序树的删除"></a>6.2、测试二叉排序树的删除</h2><h3 id="1、删除叶子节点"><a href="#1、删除叶子节点" class="headerlink" title="1、删除叶子节点"></a>1、删除叶子节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;---------------------------------删除叶子节点-1012，删除前：&quot;</span>); </span><br><span class="line">Tree.show(tree.root); </span><br><span class="line">tree.delNode(-<span class="number">1012</span>); </span><br><span class="line">System.out.println(<span class="string">&quot;---------------------------------删除叶子节点-1012，删除后：&quot;</span>); </span><br><span class="line">Tree.show(tree.root);</span><br></pre></td></tr></table></figure><blockquote><p>删除前：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205232357.png" alt="image-20210205232357649"></p><blockquote><p>删除后：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205232418.png" alt="image-20210205232417944"></p><h3 id="2、删除有一棵子树的节点"><a href="#2、删除有一棵子树的节点" class="headerlink" title="2、删除有一棵子树的节点"></a>2、删除有一棵子树的节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;---------------------------------删除有一棵树的节点-1，删除前：&quot;</span>); </span><br><span class="line">Tree.show(tree.root); </span><br><span class="line">tree.delNode(-<span class="number">1</span>); </span><br><span class="line">System.out.println(<span class="string">&quot;---------------------------------删除有一棵树的节点-1，删除后：&quot;</span>); </span><br><span class="line">Tree.show(tree.root);</span><br></pre></td></tr></table></figure><blockquote><p>删除前：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205232621.png" alt="image-20210205232621385"></p><blockquote><p>删除后：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205232636.png" alt="image-20210205232635923"></p><h3 id="3、删除有两棵子树的节点"><a href="#3、删除有两棵子树的节点" class="headerlink" title="3、删除有两棵子树的节点"></a>3、删除有两棵子树的节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;---------------------------------删除有两棵子树的节点7，删除前：&quot;</span>); </span><br><span class="line">Tree.show(tree.root); </span><br><span class="line">tree.delNode(<span class="number">7</span>); </span><br><span class="line">System.out.println(<span class="string">&quot;---------------------------------删除有两棵子树的节点7，删除后：&quot;</span>); </span><br><span class="line">Tree.show(tree.root);</span><br></pre></td></tr></table></figure><blockquote><p>删除前：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205232821.png" alt="image-20210205232820859"></p><blockquote><p>删除后：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210205232835.png" alt="image-20210205232834775"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
            <tag> 🎄树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习手册（三）--配置文件、持久化与存储验证码</title>
      <link href="posts/3873979871.html"/>
      <url>posts/3873979871.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="七、Redis-conf配置文件"><a href="#七、Redis-conf配置文件" class="headerlink" title="七、Redis.conf配置文件"></a>七、Redis.conf配置文件</h1><h2 id="7-1、网络"><a href="#7-1、网络" class="headerlink" title="7.1、网络"></a>7.1、网络</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span>  127.0.0.1  <span class="comment"># 绑定的ip </span></span><br><span class="line">protected-mode  yes  <span class="comment">#  保护模式，默认开启</span></span><br><span class="line">port  6379  <span class="comment">#  端口设置</span></span><br></pre></td></tr></table></figure><h2 id="7-2、快照"><a href="#7-2、快照" class="headerlink" title="7.2、快照"></a>7.2、快照</h2><h3 id="1、持久化"><a href="#1、持久化" class="headerlink" title="1、持久化"></a>1、持久化</h3><blockquote><p>在规定时间内执行了多少操作，就会持久到文件（.rdb、.aof）</p><p><strong>由于redis是内存数据库，如果没有持久化，那么数据断电即失</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果900s内至少有一个key进行了修改，我们就进行持久化操作</span></span><br><span class="line">save 900 1</span><br><span class="line"><span class="comment"># 如果300s内至少有10个key进行了修改，我们就进行持久化操作</span></span><br><span class="line">save 300 10</span><br><span class="line"><span class="comment"># 如果60s内至少有一万个key进行了修改，我们就进行持久化操作</span></span><br><span class="line">save 60 10000</span><br><span class="line"><span class="comment"># 之后我们可以设置自己的</span></span><br></pre></td></tr></table></figure><h3 id="2、限制Clients"><a href="#2、限制Clients" class="headerlink" title="2、限制Clients"></a>2、限制Clients</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">maxclients   10000  <span class="comment"># 最多有10000个客户端能连接上此redis</span></span><br><span class="line"></span><br><span class="line">maxmemory    &lt;bytes&gt;  <span class="comment"># redis设置最大内存容量</span></span><br></pre></td></tr></table></figure><h3 id="3、内存达到上限的处理策略"><a href="#3、内存达到上限的处理策略" class="headerlink" title="3、内存达到上限的处理策略"></a>3、内存达到上限的处理策略</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory-policy   noeviction   <span class="comment"># 内存到达上限后的处理策略，默认不删除数据，直接报错</span></span><br></pre></td></tr></table></figure><blockquote><p>有六种策略：</p><p>1   volatile-lru:从已设置过期时间的内存数据集中挑选最近最少使用的数据 淘汰；</p><p>2    volatile-ttl: 从已设置过期时间的内存数据集中挑选即将过期的数据 淘汰；</p><p>3    volatile-random:从已设置过期时间的内存数据集中任意挑选数据 淘汰；</p><p>4    allkeys-lru:从内存数据集中挑选最近最少使用的数据 淘汰；</p><p>5     allkeys-random:从数据集中任意挑选数据 淘汰；</p><p>6     noenviction(驱逐)：禁止驱逐数据。</p></blockquote><h1 id="八、持久化"><a href="#八、持久化" class="headerlink" title="八、持久化"></a>八、持久化</h1><blockquote><p>Redis是一个内存数据库，如果不对Redis数据进行持久化操作，那么一旦服务器进程退出，服务器中的数据库状态也会消失。</p><p>Redis的持久化可分为RDB（Redis DataBase）和AOF（Append Only File）</p></blockquote><h2 id="8-1、RDB"><a href="#8-1、RDB" class="headerlink" title="8.1、RDB"></a>8.1、RDB</h2><h3 id="1、什么是RDB"><a href="#1、什么是RDB" class="headerlink" title="1、什么是RDB"></a>1、什么是RDB</h3><blockquote><p>在指定时间间隔将内存集的数据集快照写入磁盘，恢复时将快照文件直接读入内存。在进行写入的过程中，Redis会<strong>单独创建</strong>一个<strong>子进程</strong>，会先将数据写入一个临时文件中，待持久化过程结束后，再将这个临时文件替换上次持久化好的文件。整个过程中，<strong>主线程不进行任何IO操作</strong>，确保了极高的性能。</p><p>如果要进行大规模的数据恢复，且对于数据恢复完整性并不是特别敏感，则RDB方式要比AOF方式更加高效，Rdb的<strong>缺点</strong>是<strong>最后一次持久化后的数据可能丢失</strong>，Redis<strong>默认使用RDB进行持久化操作</strong>。</p></blockquote><h3 id="2、RDB保存的文件是dump-rdb"><a href="#2、RDB保存的文件是dump-rdb" class="headerlink" title="2、RDB保存的文件是dump.rdb"></a>2、RDB保存的文件是dump.rdb</h3><h3 id="3、优点："><a href="#3、优点：" class="headerlink" title="3、优点："></a>3、优点：</h3><ul><li>适合大规模数据恢复</li><li>对数据完整性要求不高</li></ul><h3 id="4、缺点："><a href="#4、缺点：" class="headerlink" title="4、缺点："></a>4、缺点：</h3><ul><li>需要一定的时间间隔进程操作，如果redis意外宕机，最后一次修改数据会消失</li><li>fork进程时会占用一定空间</li></ul><h3 id="5、触发机制"><a href="#5、触发机制" class="headerlink" title="5、触发机制"></a>5、触发机制</h3><ul><li>save的规则满足的条件下，会自动触发RDB规则</li><li>执行flashall命令，会触发RDB规则</li><li>退出redis，也会产生rdb文件</li><li>备份生成一个dump.rdb文件</li></ul><h3 id="6、如何恢复rdb文件"><a href="#6、如何恢复rdb文件" class="headerlink" title="6、如何恢复rdb文件"></a>6、如何恢复rdb文件</h3><blockquote><p>只需要将rdb文件放在redis启动目录下即可，redis启动时会检查并恢复dump.rdb中的数据</p></blockquote><h2 id="8-2、AOF"><a href="#8-2、AOF" class="headerlink" title="8.2、AOF"></a>8.2、AOF</h2><h3 id="1、什么是AOF"><a href="#1、什么是AOF" class="headerlink" title="1、什么是AOF?"></a>1、什么是AOF?</h3><blockquote><p>以日志的形式来记录每个写操作，将Redis执行过的所有指令<strong>（读操作不记录）</strong>记录下来，只许追加文件但不可以改写文件，redis启动之初会读取文件重新构建数据，换言之，redis重启的话就要根据日志文件的内容将写指令<strong>从头到尾</strong>执行一次以<strong>完成数据的恢复工作</strong></p></blockquote><h3 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><h1 id="九、Redis实现手机验证码"><a href="#九、Redis实现手机验证码" class="headerlink" title="九、Redis实现手机验证码"></a>九、Redis实现手机验证码</h1><h2 id="9-1、实现原理"><a href="#9-1、实现原理" class="headerlink" title="9.1、实现原理"></a>9.1、实现原理</h2><ul><li>使用工具类生成4位或6位的数字验证码</li><li>校验手机号为合法后通过短信微服务发送验证码</li><li>将手机号作为key，验证码作为value存入redis中，并设置一个过期时间</li><li>用户进行登录/注册时通过key（手机号）到redis中取出验证码</li><li>进行验证码比对，若匹配则登录/注册通过，随机删除redis中的key-value</li></ul><h2 id="9-2、实现"><a href="#9-2、实现" class="headerlink" title="9.2、实现"></a>9.2、实现</h2><h3 id="1、校验手机号是否合法的工具类"><a href="#1、校验手机号是否合法的工具类" class="headerlink" title="1、校验手机号是否合法的工具类"></a>1、校验手机号是否合法的工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Pattern NUMBER_PATTERN = Pattern.compile(<span class="string">&quot;^[1][3,4,5,7,8,9][0-9]&#123;9&#125;$&quot;</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号验证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMobile</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//验证手机号的正则表达式</span></span><br><span class="line">        <span class="keyword">return</span> NUMBER_PATTERN.matcher(str).matches();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、生成验证码的工具类"><a href="#2、生成验证码的工具类" class="headerlink" title="2、生成验证码的工具类"></a>2、生成验证码的工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DecimalFormat fourdf = <span class="keyword">new</span> DecimalFormat(<span class="string">&quot;0000&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DecimalFormat sixdf = <span class="keyword">new</span> DecimalFormat(<span class="string">&quot;000000&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFourBitRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> fourdf.format(random.nextInt(<span class="number">10000</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSixBitRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sixdf.format(random.nextInt(<span class="number">1000000</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给定数组，抽取n个数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList <span class="title">getRandom</span><span class="params">(List list, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> HashMap&lt;Object, Object&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成随机数字并存入HashMap</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> number = random.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">hashMap.put(number, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从HashMap导入数组</span></span><br><span class="line">Object[] robjs = hashMap.values().toArray();</span><br><span class="line"></span><br><span class="line">ArrayList r = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组并打印数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">r.add(list.get((<span class="keyword">int</span>) robjs[i]));</span><br><span class="line">System.out.print(list.get((<span class="keyword">int</span>) robjs[i]) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、短信微服务Controller"><a href="#3、短信微服务Controller" class="headerlink" title="3、短信微服务Controller"></a>3、短信微服务Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;短信管理控制器&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/sms&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiSmsController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsService smsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 根据传入的手机号来生成并发送验证码</span></span><br><span class="line"><span class="comment">     * 并将验证码存入redis缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mobile 手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;send/&#123;mobile&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;一个用于生成验证码，并将验证码存入redis中的接口&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">getCode</span><span class="params">(<span class="meta">@PathVariable(&quot;mobile&quot;)</span> String mobile)</span> <span class="keyword">throws</span> ClientException </span>&#123;</span><br><span class="line">        <span class="comment">//0 校验手机号是否合法</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(mobile) || !FormUtils.isMobile(mobile)) &#123;</span><br><span class="line">            <span class="comment">//如果手机号为空或手机号不合法</span></span><br><span class="line">            log.error(<span class="string">&quot;手机号不合法！&quot;</span>);</span><br><span class="line">            <span class="comment">// new GrainException(ResultCodeEnum.LOGIN_MOBILE_ERROR);</span></span><br><span class="line">            <span class="keyword">return</span> R.error().message(<span class="string">&quot;手机号不正确！&quot;</span>).code(<span class="number">28001</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1 使用工具类生成生成验证码</span></span><br><span class="line">        String checkCode = RandomUtils.getSixBitRandom();</span><br><span class="line">        <span class="comment">//2 发送验证码</span></span><br><span class="line">        smsService.send(mobile,checkCode);</span><br><span class="line">        <span class="comment">//3 存储验证码到redis</span></span><br><span class="line">        <span class="comment">//使用redisTemplate，使用手机号作为键，保存时长为5分钟</span></span><br><span class="line">        redisTemplate.opsForValue().set(mobile,checkCode,<span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> R.ok().message(<span class="string">&quot;短信发送成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、短信微服务Service层"><a href="#4、短信微服务Service层" class="headerlink" title="4、短信微服务Service层"></a>4、短信微服务Service层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsServiceImpl</span> <span class="keyword">implements</span> <span class="title">SmsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsProperties smsProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String mobile, String checkCode)</span> <span class="keyword">throws</span> ClientException, ClientException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用短信发送SDK，创建client对象</span></span><br><span class="line">        DefaultProfile profile = DefaultProfile.getProfile(</span><br><span class="line">                smsProperties.getRegionId(),</span><br><span class="line">                smsProperties.getKeyId(),</span><br><span class="line">                smsProperties.getKeySecret());</span><br><span class="line">        IAcsClient client = <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装请求参数</span></span><br><span class="line">        CommonRequest request = <span class="keyword">new</span> CommonRequest();</span><br><span class="line">        request.setSysMethod(MethodType.POST);</span><br><span class="line">        request.setSysDomain(<span class="string">&quot;dysmsapi.aliyuncs.com&quot;</span>);</span><br><span class="line">        request.setSysVersion(<span class="string">&quot;2017-05-25&quot;</span>);</span><br><span class="line">        request.setSysAction(<span class="string">&quot;SendSms&quot;</span>);</span><br><span class="line">        request.putQueryParameter(<span class="string">&quot;RegionId&quot;</span>, smsProperties.getRegionId());</span><br><span class="line">        request.putQueryParameter(<span class="string">&quot;PhoneNumbers&quot;</span>, mobile);</span><br><span class="line">        request.putQueryParameter(<span class="string">&quot;SignName&quot;</span>, smsProperties.getSignName());</span><br><span class="line">        request.putQueryParameter(<span class="string">&quot;TemplateCode&quot;</span>, smsProperties.getTemplateCode());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        param.put(<span class="string">&quot;code&quot;</span>, checkCode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将包含验证码的集合转换为json字符串</span></span><br><span class="line">        Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">        request.putQueryParameter(<span class="string">&quot;TemplateParam&quot;</span>, gson.toJson(param));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送短信</span></span><br><span class="line">        CommonResponse response = client.getCommonResponse(request);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到json字符串格式的响应结果</span></span><br><span class="line">        String data = response.getData();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析json字符串格式的响应结果</span></span><br><span class="line">        HashMap&lt;String, String&gt; map = gson.fromJson(data, HashMap.class);</span><br><span class="line">        String code = map.get(<span class="string">&quot;Code&quot;</span>);</span><br><span class="line">        String message = map.get(<span class="string">&quot;Message&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置参考：短信服务-&gt;系统设置-&gt;国内消息设置</span></span><br><span class="line">        <span class="comment">//错误码参考：</span></span><br><span class="line">        <span class="comment">//https://help.aliyun.com/document_detail/101346.html?spm=a2c4g.11186623.6.613.3f6e2246sDg6Ry</span></span><br><span class="line">        <span class="comment">//控制所有短信流向限制（同一手机号：一分钟一条、一个小时五条、一天十条）</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;isv.BUSINESS_LIMIT_CONTROL&quot;</span>.equals(code)) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;短信发送过于频繁 &quot;</span> + <span class="string">&quot;【code】&quot;</span> + code + <span class="string">&quot;, 【message】&quot;</span> + message);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GrainException(ResultCodeEnum.SMS_SEND_ERROR_BUSINESS_LIMIT_CONTROL);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;OK&quot;</span>.equals(code)) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;短信发送失败 &quot;</span> + <span class="string">&quot; - code: &quot;</span> + code + <span class="string">&quot;, message: &quot;</span> + message);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GrainException(ResultCodeEnum.SMS_SEND_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、用户注册微服务Controller"><a href="#5、用户注册微服务Controller" class="headerlink" title="5、用户注册微服务Controller"></a>5、用户注册微服务Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;会员管理控制器&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/ucenter/member&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiMemberController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MemberService memberService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;会员注册&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;register&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">register</span><span class="params">(<span class="meta">@RequestBody</span> RegisterVo registerVo)</span> </span>&#123;</span><br><span class="line">        memberService.register(registerVo);</span><br><span class="line">        <span class="keyword">return</span> R.ok().message(<span class="string">&quot;注册成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、用户注册微服务Service"><a href="#6、用户注册微服务Service" class="headerlink" title="6、用户注册微服务Service"></a>6、用户注册微服务Service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">MemberMapper</span>, <span class="title">Member</span>&gt; <span class="keyword">implements</span> <span class="title">MemberService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MemberMapper memberMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(RegisterVo registerVo)</span> </span>&#123;</span><br><span class="line">        String nickname = registerVo.getNickname();</span><br><span class="line">        String mobile = registerVo.getMobile();</span><br><span class="line">        String code = registerVo.getCode();</span><br><span class="line">        String password = registerVo.getPassword();</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(mobile) || !FormUtils.isMobile(mobile)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GrainException(ResultCodeEnum.LOGIN_MOBILE_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(nickname) || StringUtils.isBlank(password) || StringUtils.isBlank(code)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GrainException(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//校验验证码</span></span><br><span class="line">        String checkCode = (String)redisTemplate.opsForValue().get(mobile);</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.equals(code,checkCode)) &#123;</span><br><span class="line">            <span class="comment">//如果用户输入验证码和redis中验证码不相等</span></span><br><span class="line">            <span class="comment">//校验失败</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GrainException(ResultCodeEnum.CODE_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断用户手机号是否注册</span></span><br><span class="line">        QueryWrapper&lt;Member&gt; memberQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        memberQueryWrapper.eq(<span class="string">&quot;mobile&quot;</span>,mobile);</span><br><span class="line">        Integer result = memberMapper.selectCount(memberQueryWrapper);</span><br><span class="line">        <span class="keyword">if</span>(result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GrainException(ResultCodeEnum.REGISTER_MOBLE_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册</span></span><br><span class="line">        Member member = <span class="keyword">new</span> Member();</span><br><span class="line">        member.setNickname(nickname);</span><br><span class="line">        member.setMobile(mobile);</span><br><span class="line">        <span class="comment">//密码需要加密</span></span><br><span class="line">        member.setPassword(MD5.encrypt(password));</span><br><span class="line">        member.setAvatar(<span class="string">&quot;http://tiebapic.baidu.com/forum/w%3D580/sign=21e19fd45010b912bfc1f6f6f3fcfcb5/c0d5d04b20a44623e5077d0d8f22720e0ef3d78e.jpg&quot;</span>);</span><br><span class="line">        member.setDisabled(<span class="keyword">false</span>);</span><br><span class="line">        memberMapper.insert(member);</span><br><span class="line">        <span class="comment">//将redis缓存中的验证码删除</span></span><br><span class="line">        redisTemplate.delete(mobile);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-3、测试"><a href="#9-3、测试" class="headerlink" title="9.3、测试"></a>9.3、测试</h2><blockquote><p>启动短信微服务和用户注册微服务，使用Swagger进行测试</p></blockquote><h3 id="1、使用短信微服务向指定手机号发送验证码"><a href="#1、使用短信微服务向指定手机号发送验证码" class="headerlink" title="1、使用短信微服务向指定手机号发送验证码"></a>1、使用短信微服务向指定手机号发送验证码</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204000422.png" alt="image-20210204000422442"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204000623.png" alt="image-20210204000623694"></p><h3 id="2、查看Redis缓存和短信"><a href="#2、查看Redis缓存和短信" class="headerlink" title="2、查看Redis缓存和短信"></a>2、查看Redis缓存和短信</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204000652.png" alt="image-20210204000652056"></p><blockquote><p>短信</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204001029.png" alt="image-20210204001029230"></p><h3 id="3、打开用户中心微服务进行测试"><a href="#3、打开用户中心微服务进行测试" class="headerlink" title="3、打开用户中心微服务进行测试"></a>3、打开用户中心微服务进行测试</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204000749.png" alt="image-20210204000749533"></p><h3 id="4、结果"><a href="#4、结果" class="headerlink" title="4、结果"></a>4、结果</h3><blockquote><p>swagger提示注册成功</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204000814.png" alt="image-20210204000813999"></p><blockquote><p>redis缓存中该键值对被删除</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204000908.png" alt="image-20210204000908928"></p><blockquote><p>数据库</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204000944.png" alt="image-20210204000944206"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
            <tag> 👢Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习手册（二）--事务、Jedis和Spring Boot整合Redis</title>
      <link href="posts/2589988718.html"/>
      <url>posts/2589988718.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="四、事务"><a href="#四、事务" class="headerlink" title="四、事务"></a>四、事务</h1><h2 id="4-1、介绍"><a href="#4-1、介绍" class="headerlink" title="4.1、介绍"></a>4.1、介绍</h2><blockquote><p>Redis事务是一个单独的隔离过程：事务中的所有命令都会被序列化、按顺序地执行。事务在执行过程中不会被其他客户端发送来的命令请求所打断，redis事务的主要作用就是串联多个命令防止别的命令插队。</p></blockquote><h2 id="4-2、Redis事务的特性"><a href="#4-2、Redis事务的特性" class="headerlink" title="4.2、Redis事务的特性"></a>4.2、Redis事务的特性</h2><blockquote><p>单独的隔离操作：</p><ul><li>事务中的所有命令都会被序列化、按顺序地执行。事务在执行过程中不会被其他客户端发送来的命令请求所打断</li></ul></blockquote><blockquote><p>没有隔离级别的概念</p><ul><li>队列中的命令没有提交之前都不会实际的被执行。</li></ul></blockquote><blockquote><p>不保证原子性</p><ul><li>Redis同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</li></ul></blockquote><h2 id="4-3、使用"><a href="#4-3、使用" class="headerlink" title="4.3、使用"></a>4.3、使用</h2><ul><li>开启事务（multi）</li><li>命令入队</li><li>执行事务（exec）</li></ul><blockquote><p>正常执行事务</p></blockquote><ul><li>使用redis事务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi    <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1   <span class="comment"># QUEUED代表命令入队列</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k4 1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr k4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span>       <span class="comment"># exec代表执行事务</span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) <span class="string">&quot;v1&quot;</span></span><br><span class="line">4) OK</span><br><span class="line">5) OK</span><br><span class="line">6) (<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure><blockquote><p>放弃事务（discard）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby k3 50</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; decrby k3 26</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; DISCARD</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">(nil)         <span class="comment">#放弃事务后发现k3值为null</span></span><br></pre></td></tr></table></figure><blockquote><p>（报告错误）编译型异常（代码/命令有问题），<strong>事务中所有命令都不会被执行</strong></p></blockquote><blockquote><p>（执行错误）运行时异常（例如：1/0或空指针），如果事务队列中存在运行时异常，那么这条发生异常的命令不会被执行，其他命令继续执行（redis事务没有一致性），错误命令抛出异常</p></blockquote><blockquote><p>原子性：指事务的不可分割性，一个事务的所有操作要么不间断地全部被执行，要么一个也没有执行。</p></blockquote><h2 id="4-4、注意点"><a href="#4-4、注意点" class="headerlink" title="4.4、注意点"></a>4.4、注意点</h2><blockquote><p><strong>Redis单条命令是保证原子性的，但是Redis的事务是不保证原子性的！</strong></p></blockquote><h2 id="4-5、监控"><a href="#4-5、监控" class="headerlink" title="4.5、监控"></a>4.5、监控</h2><h3 id="1、悲观锁"><a href="#1、悲观锁" class="headerlink" title="1、悲观锁"></a>1、悲观锁</h3><ul><li>无论做什么都加锁（会影响性能）</li></ul><h3 id="2、乐观锁"><a href="#2、乐观锁" class="headerlink" title="2、乐观锁"></a>2、乐观锁</h3><ul><li>认为什么时候都不会出问题，所以不会上锁！更新数据时去判断以下期间有没有人修改过此数据。</li><li>mysql中：获取version，比较version</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203224610.png" alt="image-20210203224610835"></p><h3 id="3、使用watch来监控"><a href="#3、使用watch来监控" class="headerlink" title="3、使用watch来监控"></a>3、使用watch来监控</h3><blockquote><p>在执行multi之前，先执行watch key1 [key2]，可以监视一个或多个key，如果在事务执行之前这个（或这些）key被其他命令所改动，那么事务将被<strong>打断</strong></p></blockquote><ul><li>正常执行成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money       <span class="comment">#使用watch监视money对象</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby out 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 80</span><br><span class="line">2) (<span class="built_in">integer</span>) 20</span><br></pre></td></tr></table></figure><h1 id="五、Jedis"><a href="#五、Jedis" class="headerlink" title="五、Jedis"></a>五、Jedis</h1><blockquote><p>JRedis是Redis官方推荐的java连接开发工具，使用java操作redis的中间件，类似JDBCDriver</p></blockquote><h2 id="5-1、常用API"><a href="#5-1、常用API" class="headerlink" title="5.1、常用API"></a>5.1、常用API</h2><h3 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入Jedis的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、编码测试"><a href="#2、编码测试" class="headerlink" title="2、编码测试"></a>2、编码测试</h3><blockquote><p>使用Jedis连接Redis</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1 new 一个Jedis对象，构造参数填入地址和端口号</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//jedis 的函数就是我们之前学习的所有命令</span></span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203225023.png" alt="image-20210203225023793"></p><h3 id="3、操作命令"><a href="#3、操作命令" class="headerlink" title="3、操作命令"></a>3、操作命令</h3><blockquote><p>Jedis的方法和上面的命令几乎一样，这里列出Redis-key的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;清空指定数据库中的数据：&quot;</span> + jedis.flushDB());</span><br><span class="line">System.out.println(<span class="string">&quot;清空所有数据：&quot;</span> + jedis.flushAll());</span><br><span class="line">System.out.println(<span class="string">&quot;新增&lt;&#x27;username&#x27;,&#x27;wuhu&#x27;&gt;的键值对：&quot;</span> + jedis.set(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;wuhu&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;新增&lt;&#x27;password&#x27;,&#x27;qifei&#x27;&gt;的键值对：&quot;</span> + jedis.set(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;qifei&quot;</span>));</span><br><span class="line">System.out.print(<span class="string">&quot;系统中所有的键如下：&quot;</span>);</span><br><span class="line">Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">System.out.println(keys);</span><br><span class="line">System.out.println(<span class="string">&quot;删除键password：&quot;</span> + jedis.del(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;判断键password是否存在：&quot;</span> + jedis.exists(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;查看键username所存储的值的类型&quot;</span> + jedis.type(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;随机返回key空间的一个&quot;</span> + jedis.randomKey());</span><br><span class="line">System.out.println(<span class="string">&quot;重命名key：&quot;</span> + jedis.rename(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;取出改后的userName：&quot;</span> + jedis.get(<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;按索引查询：&quot;</span> + jedis.select(<span class="number">0</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;返回当前数据库中key的数量：&quot;</span> + jedis.dbSize());</span><br><span class="line">System.out.println(<span class="string">&quot;删除当前选择数据库中所有的key：&quot;</span> + jedis.flushDB());</span><br><span class="line">System.out.println(<span class="string">&quot;返回当前数据库中key的数量：&quot;</span> + jedis.dbSize());</span><br><span class="line">System.out.println(<span class="string">&quot;删除所有数据库中那个所有key：&quot;</span> + jedis.flushAll());</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203225132.png" alt="image-20210203225132042"></p><blockquote><p>断开连接</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><h2 id="5-2、使用Jedis模拟Redis中的事务"><a href="#5-2、使用Jedis模拟Redis中的事务" class="headerlink" title="5.2、使用Jedis模拟Redis中的事务"></a>5.2、使用Jedis模拟Redis中的事务</h2><h3 id="1、模拟事务成功执行"><a href="#1、模拟事务成功执行" class="headerlink" title="1、模拟事务成功执行"></a>1、模拟事务成功执行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">jsonObject.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;wuhu&quot;</span>);</span><br><span class="line">jsonObject.put(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">String jsonStr = jsonObject.toJSONString();</span><br><span class="line"><span class="comment">//开启事务</span></span><br><span class="line">Transaction multi = jedis.multi();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//将方法放入执行队列</span></span><br><span class="line">    multi.set(<span class="string">&quot;user1&quot;</span>,jsonStr);</span><br><span class="line">    multi.set(<span class="string">&quot;user2&quot;</span>,jsonStr);</span><br><span class="line">    multi.set(<span class="string">&quot;user3&quot;</span>,jsonStr);</span><br><span class="line">    multi.set(<span class="string">&quot;user4&quot;</span>,jsonStr);</span><br><span class="line">    <span class="comment">//执行事务</span></span><br><span class="line">    multi.exec();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="comment">//如果出现异常，就放弃事务</span></span><br><span class="line">    multi.discard();</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//如果没有异常，那么可以输出值</span></span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;user1&quot;</span>));</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;user2&quot;</span>));</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;user3&quot;</span>));</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;user4&quot;</span>));</span><br><span class="line">    jedis.close();<span class="comment">//关闭连接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203225306.png" alt="image-20210203225306161"></p><h3 id="2、模拟事务出现异常的情况"><a href="#2、模拟事务出现异常的情况" class="headerlink" title="2、模拟事务出现异常的情况"></a>2、模拟事务出现异常的情况</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">jedis.flushAll();<span class="comment">//先清除所有键值对</span></span><br><span class="line">JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">jsonObject.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;wuhu&quot;</span>);</span><br><span class="line">jsonObject.put(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">String jsonStr = jsonObject.toJSONString();</span><br><span class="line"><span class="comment">//开启事务</span></span><br><span class="line">Transaction multi = jedis.multi();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//将方法放入执行队列</span></span><br><span class="line">    multi.set(<span class="string">&quot;user1&quot;</span>,jsonStr);</span><br><span class="line">    multi.set(<span class="string">&quot;user2&quot;</span>,jsonStr);</span><br><span class="line">    multi.set(<span class="string">&quot;user3&quot;</span>,jsonStr);</span><br><span class="line">    multi.set(<span class="string">&quot;user4&quot;</span>,jsonStr);</span><br><span class="line">    <span class="comment">//模拟异常</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行事务</span></span><br><span class="line">    multi.exec();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="comment">//如果出现异常，就放弃事务</span></span><br><span class="line">    multi.discard();</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//如果没有异常，那么可以输出值</span></span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;user1&quot;</span>));</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;user2&quot;</span>));</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;user3&quot;</span>));</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;user4&quot;</span>));</span><br><span class="line">    jedis.close();<span class="comment">//关闭连接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203225346.png" alt="image-20210203225346130"></p><h1 id="六、Spring-Boot整合Redis"><a href="#六、Spring-Boot整合Redis" class="headerlink" title="六、Spring Boot整合Redis"></a>六、Spring Boot整合Redis</h1><blockquote><p>Spring Boot Data redis提供了<strong>RedisTemplate</strong>和<strong>StringTemplate</strong>，其中StringTemplate是RedisTemplate的子类，RedisTemplate中两个泛型都是Object，意味着存储的key和value都可以是一个对象，而StringTemplate两个泛型都是String</p><p><strong>注：对象的保存需要序列化</strong></p></blockquote><h2 id="6-1、引入依赖"><a href="#6-1、引入依赖" class="headerlink" title="6.1、引入依赖"></a>6.1、引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 操作redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在springboot2.x后，原来的jedis被替换为了lecture</li><li>jedis：采用直连，多线程操作不安全，需要使用连接池，BIO</li><li>lecture：底层使用netty，不存在性能不安全的情况,NIO</li></ul><h2 id="6-2、配置"><a href="#6-2、配置" class="headerlink" title="6.2、配置"></a>6.2、配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><h2 id="6-3、测试"><a href="#6-3、测试" class="headerlink" title="6.3、测试"></a>6.3、测试</h2><blockquote><p>分析源码可知，Spring Boot已经为我们注册了一个<strong>key和value均为Object</strong>的RedisTemplate，我们可以自己注册一个<strong>RedisTemplate</strong>来替换Spring Boot为我们自动注入的RedisTemplate</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203225717.png" alt="image-20210203225717224"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//redisTemplate</span></span><br><span class="line">    <span class="comment">//opsForValue 操作字符串，类似String</span></span><br><span class="line">    <span class="comment">//opsForList  操作list，类似List</span></span><br><span class="line">    <span class="comment">//opsForSet   操作Set，类似Set</span></span><br><span class="line">    <span class="comment">//opsForZset  操作Zset，类似Zset</span></span><br><span class="line">    <span class="comment">//opsForHash  操作Hash，类似Hash</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//基本操作已经封装到redisTemplate中</span></span><br><span class="line">    <span class="comment">//        RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span></span><br><span class="line">    <span class="comment">//        connection.flushAll();</span></span><br><span class="line">    <span class="comment">//        connection.flushDb();</span></span><br><span class="line"></span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Spring Boot 默认使用JDK序列化，JDK序列化会使字符转义，我们可以自定义配置类，使用JSON进行序列化。</p></blockquote><h2 id="6-4、自定义RedisTemplate"><a href="#6-4、自定义RedisTemplate" class="headerlink" title="6.4、自定义RedisTemplate"></a>6.4、自定义RedisTemplate</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在自定义的RedisTemplate中，将键从Object换为String，同时使用JSON序列化对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       User user = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">&quot;芜湖&quot;</span>,<span class="string">&quot;起飞&quot;</span>);</span><br><span class="line">       String userJson = JSON.toJSONString(user);</span><br><span class="line">       redisTemplate.opsForValue().set(<span class="string">&quot;user2&quot;</span>,userJson);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="1、使用JDK序列化对象"><a href="#1、使用JDK序列化对象" class="headerlink" title="1、使用JDK序列化对象"></a>1、使用JDK序列化对象</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203231614.png" alt="image-20210203231614676"></p><h3 id="2、使用JSON序列化对象"><a href="#2、使用JSON序列化对象" class="headerlink" title="2、使用JSON序列化对象"></a>2、使用JSON序列化对象</h3><blockquote><p>删除Redis中的键值对，引入我们自定义的RedisTemplate，重新执行上面的方法。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203231754.png" alt="image-20210203231753977"></p><h2 id="6-5、RedisUtils"><a href="#6-5、RedisUtils" class="headerlink" title="6.5、RedisUtils"></a>6.5、RedisUtils</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hzx.springboot_redis.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// =============================common============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="keyword">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================String=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="keyword">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ================================Map=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hmget</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... item)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================set=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setRemove</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ===============================list=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lGet</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key, <span class="keyword">long</span> index, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
            <tag> 👢Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习手册（一）--NoSQL、redis入门及基本数据类型</title>
      <link href="posts/2005124203.html"/>
      <url>posts/2005124203.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、NoSQL"><a href="#一、NoSQL" class="headerlink" title="一、NoSQL"></a>一、NoSQL</h1><blockquote><p>NoSQL = Not Only SQL，不仅仅是SQL，泛指非关系数据库</p><p>使用场景：数据变化不是很频繁，访问量相对较大</p></blockquote><h1 id="二、Redis入门"><a href="#二、Redis入门" class="headerlink" title="二、Redis入门"></a>二、Redis入门</h1><h2 id="2-1、概述"><a href="#2-1、概述" class="headerlink" title="2.1、概述"></a>2.1、概述</h2><ul><li><p>Redis指Remote Dictionary Server，即<strong>远程字典服务</strong></p></li><li><p>一个开源的由ANSI C语言编写，支持网络、可基于内存也可持久化的日志型Key-value数据库，支持多种语言</p></li><li><p>redis会周期性将更新的数据写入磁盘或者把修改操作写入追加的记录文件</p></li></ul><h2 id="2-2、特性"><a href="#2-2、特性" class="headerlink" title="2.2、特性"></a>2.2、特性</h2><ul><li>开源</li><li>支持多种语言</li><li>支持持久化、集群和事务</li></ul><h2 id="2-3、基础知识"><a href="#2-3、基础知识" class="headerlink" title="2.3、基础知识"></a>2.3、基础知识</h2><ul><li>redis有16个数据库，默认使用第1个数据库（下标为0）</li><li>使用select可以切换数据库，使用DBSIZE可以查看当前数据库的数据数量</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203220924.png"></p><ul><li>清除当前数据库：flushdb</li><li>清楚所有数据库：flushall</li><li>redis是单线程的，redis的瓶颈是根据机器的内存和网络带宽。</li></ul><h1 id="三、五大数据类型"><a href="#三、五大数据类型" class="headerlink" title="三、五大数据类型"></a>三、五大数据类型</h1><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203221317.png" alt="image-20210203221317019"></p><h2 id="3-1、Redis-key"><a href="#3-1、Redis-key" class="headerlink" title="3.1、Redis-key"></a>3.1、Redis-key</h2><blockquote><p>EXISTS 键名，如果有这个键，返回1，否则返回0<br>exists 键名</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203221451.png" alt="image-20201011214514520"></p><h2 id="3-2、String（字符串）"><a href="#3-2、String（字符串）" class="headerlink" title="3.2、String（字符串）"></a>3.2、String（字符串）</h2><h3 id="1、append-键名-要追加的内容："><a href="#1、append-键名-要追加的内容：" class="headerlink" title="1、append 键名 要追加的内容："></a>1、append 键名 要追加的内容：</h3><blockquote><p>往已有的键值对的值中拼接新内容，如果没有该键，那么就新建一个键值对（相当于set）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> name hello</span><br><span class="line">get name</span><br><span class="line">输出hello</span><br><span class="line">append name world</span><br><span class="line">输出10--&gt;返回拼接后值的长度</span><br><span class="line">get name</span><br><span class="line">输出helloworld</span><br></pre></td></tr></table></figure><ul><li>先设置一个键值对，即name–&gt;hello，然后往该键值对的值中拼接字符world，最后使用get name查看结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142557.png" alt="image-20201011222603013"></p><h3 id="2、strlen-键名-："><a href="#2、strlen-键名-：" class="headerlink" title="2、strlen 键名 ："></a>2、strlen 键名 ：</h3><blockquote><p>获取该键值对中值的长度</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strlen name</span><br><span class="line">输出10</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142558.png" alt="image-20201011222916865"></p><h3 id="3、incr-键名："><a href="#3、incr-键名：" class="headerlink" title="3、incr 键名："></a>3、incr 键名：</h3><blockquote><p>针对数值使用，让数值的值+1</p></blockquote><ul><li>初始化一个键值对（views–0），然后使用incr 命令让其+1</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> views 0</span><br><span class="line">输出0</span><br><span class="line">incr views</span><br><span class="line">get views</span><br><span class="line">输出1</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142559.png" alt="image-20201011224023734"></p><h3 id="4、decr-键名："><a href="#4、decr-键名：" class="headerlink" title="4、decr 键名："></a>4、decr 键名：</h3><blockquote><p>同针对数值使用，让该数值的值-1</p></blockquote><ul><li>将上面的views从3减到2</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">decr views</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142600.png" alt="image-20201011224227673"></p><h3 id="5、incrby-decrby："><a href="#5、incrby-decrby：" class="headerlink" title="5、incrby/decrby："></a>5、incrby/decrby：</h3><blockquote><p>类似incr/decr，多了个步长</p></blockquote><ul><li>将views的值从2直接加到12（步长设置为10），然后把views的值从12降到7（步长为5）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">incrby views 10</span><br><span class="line">decrby views 5</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142601.png" alt="image-20201011224913175"></p><h3 id="6、GETRANGE-键名-起始坐标-终止坐标（类似java中String类的substring）"><a href="#6、GETRANGE-键名-起始坐标-终止坐标（类似java中String类的substring）" class="headerlink" title="6、GETRANGE 键名 起始坐标 终止坐标（类似java中String类的substring）"></a>6、GETRANGE 键名 起始坐标 终止坐标（类似java中String类的substring）</h3><blockquote><p>截取（终止坐标 - 起始坐标） + 1个字符，闭区间[起始,终止]</p></blockquote><ul><li>设置一个键值对，然后截取该值的一部分</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142602.png" alt="image-20201011225254904"></p><blockquote><p>使用GETRANGE 键名 0  -1获取值对应的整个字符串，相当于get 键名</p></blockquote><ul><li>获取该键值对值的全部内容</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142603.png" alt="image-20201011225441783"></p><h3 id="7、SETRANGE-键名-偏移量n-要替换的字符串"><a href="#7、SETRANGE-键名-偏移量n-要替换的字符串" class="headerlink" title="7、SETRANGE 键名 偏移量n 要替换的字符串"></a>7、SETRANGE 键名 偏移量n 要替换的字符串</h3><blockquote><p>替换指定字符开始的字符串</p></blockquote><ul><li>先设置一个键值对：key2–&gt;abcdefg，然后偏移一个单位，将xx替换到目标串中</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142604.png" alt="image-20201011230122084"></p><h3 id="8、setex-键名-过期时间-值"><a href="#8、setex-键名-过期时间-值" class="headerlink" title="8、setex 键名 过期时间 值"></a>8、setex 键名 过期时间 值</h3><blockquote><p>为指定的key设置值和过期时间，如果key已经存在，SETEX命令会替换旧的值</p></blockquote><ul><li>先设置一个键值对，然后使用setex覆盖</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142605.png" alt="image-20201011232438878"></p><h3 id="9、setnx-SET-IF-NOT-EXISTS-键名-值"><a href="#9、setnx-SET-IF-NOT-EXISTS-键名-值" class="headerlink" title="9、setnx(SET IF NOT EXISTS) 键名 值"></a>9、setnx(SET IF NOT EXISTS) 键名 值</h3><blockquote><p>当指定的key不存在时，为key设置指定的值，如果存在会覆盖失败，返回0，成功返回1，这个命令经常在分布式锁中用到</p></blockquote><ul><li>先设置一个键值对，然后尝试使用setnx覆盖，观察结果，发现返回0，且key的值还是wuhu111</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142606.png" alt="image-20201011232537974"></p><h3 id="10、mset-键1-值1-键2-值2-…"><a href="#10、mset-键1-值1-键2-值2-…" class="headerlink" title="10、mset 键1 值1 键2 值2 …"></a>10、mset 键1 值1 键2 值2 …</h3><blockquote><p>使用这个命令可以批量添加键值对</p></blockquote><ul><li>添加三个键值对</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142607.png" alt="image-20201011233358741"></p><h3 id="11、mget-键1-键2-…"><a href="#11、mget-键1-键2-…" class="headerlink" title="11、mget 键1 键2 …"></a>11、mget 键1 键2 …</h3><blockquote><p>批量取得值</p></blockquote><ul><li>取得上面添加的值</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142608.png" alt="image-20201011233547127"></p><h3 id="12、msetnx-键1-值1-…"><a href="#12、msetnx-键1-值1-…" class="headerlink" title="12、msetnx 键1 值1 …"></a>12、msetnx 键1 值1 …</h3><blockquote><p>同时插入多个键值对，如果有一个键已经存在，就不执行插入操作，所有键都不存在时才插入</p></blockquote><h3 id="13、设置对象"><a href="#13、设置对象" class="headerlink" title="13、设置对象"></a>13、设置对象</h3><blockquote><p>set user : 1 {username : zhuo,age : 18}</p></blockquote><ul><li>使用mset和mget存储和获取对象</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mset user:1:name hzx user:1:age 18</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget user:1:name user:1:age</span><br><span class="line">1) <span class="string">&quot;hzx&quot;</span></span><br><span class="line">2) <span class="string">&quot;18&quot;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142609.png" alt="image-20201011234455595"></p><h3 id="14、getset-先取后赋值"><a href="#14、getset-先取后赋值" class="headerlink" title="14、getset 先取后赋值"></a>14、getset 先取后赋值</h3><blockquote><p>由于是先get后set，所以注意结果是上次的值，先返回当前值，后设置新值</p></blockquote><ul><li>设置一个键值对k1-v1，然后使用getset将值变为value1，观察</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210204142610.png" alt="image-20201011235025047"></p><h3 id="15、String应用场景："><a href="#15、String应用场景：" class="headerlink" title="15、String应用场景："></a>15、String应用场景：</h3><ul><li>由于redis中没有数值类型，所以数字也是用string存储</li><li>可以用作计数器</li><li>统计数量</li><li>对象缓存存储</li></ul><h2 id="3-3、List"><a href="#3-3、List" class="headerlink" title="3.3、List"></a>3.3、List</h2><ul><li>在redis中，我们可以通过设置规则来使list成为一个栈或队列</li><li>所有list命令大部分以l开头</li></ul><h3 id="1、LPUSH-集合名-值"><a href="#1、LPUSH-集合名-值" class="headerlink" title="1、LPUSH 集合名 值"></a>1、LPUSH 集合名 值</h3><blockquote><p>将一个或多个值从左边插进列表</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPUSH list one <span class="comment"># 在列表左边插入值</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list two three <span class="comment"># 在列表中插入多个值</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1  <span class="comment"># 获取列表中所有的值</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; Lrange list 0 1 <span class="comment">#获取列表中下标在[0,1]的值</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、RPUSH-集合名-值"><a href="#2、RPUSH-集合名-值" class="headerlink" title="2、RPUSH 集合名 值"></a>2、RPUSH 集合名 值</h3><blockquote><p>将一个或多个值从右边插进列表</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; Rpush list right</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; rpush list right1 right2</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;right&quot;</span></span><br><span class="line">5) <span class="string">&quot;right1&quot;</span></span><br><span class="line">6) <span class="string">&quot;right2&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3、LPOP-列表名"><a href="#3、LPOP-列表名" class="headerlink" title="3、LPOP 列表名"></a>3、LPOP 列表名</h3><blockquote><p>从左边弹出（移出）一个元素</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPOP list </span><br><span class="line"><span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">3) <span class="string">&quot;right&quot;</span></span><br><span class="line">4) <span class="string">&quot;right1&quot;</span></span><br><span class="line">5) <span class="string">&quot;right2&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4、RPOP-列表名"><a href="#4、RPOP-列表名" class="headerlink" title="4、RPOP 列表名"></a>4、RPOP 列表名</h3><blockquote><p>从右边弹出一个元素</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RPOP list</span><br><span class="line"><span class="string">&quot;right2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">3) <span class="string">&quot;right&quot;</span></span><br><span class="line">4) <span class="string">&quot;right1&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5、LINDEX-列表名-下标"><a href="#5、LINDEX-列表名-下标" class="headerlink" title="5、LINDEX 列表名 下标"></a>5、LINDEX 列表名 下标</h3><blockquote><p>通过下标获取值</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LINDEX list 0</span><br><span class="line"><span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LINDEX list 3</span><br><span class="line"><span class="string">&quot;right1&quot;</span></span><br></pre></td></tr></table></figure><h3 id="6、Llen-列表名"><a href="#6、Llen-列表名" class="headerlink" title="6、Llen 列表名"></a>6、Llen 列表名</h3><blockquote><p>获取列表长度</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">3) <span class="string">&quot;right&quot;</span></span><br><span class="line">4) <span class="string">&quot;right1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; Llen list</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7、Lrem-列表名-移除个数-精确值"><a href="#7、Lrem-列表名-移除个数-精确值" class="headerlink" title="7、Lrem  列表名  移除个数  精确值"></a>7、Lrem  列表名  移除个数  精确值</h3><blockquote><p>移除列表中的一个或多个值，精确匹配</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;one&quot;</span></span><br><span class="line">5) <span class="string">&quot;two&quot;</span></span><br><span class="line">6) <span class="string">&quot;one&quot;</span></span><br><span class="line">7) <span class="string">&quot;right&quot;</span></span><br><span class="line">8) <span class="string">&quot;right1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list 1 two</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;one&quot;</span></span><br><span class="line">5) <span class="string">&quot;one&quot;</span></span><br><span class="line">6) <span class="string">&quot;right&quot;</span></span><br><span class="line">7) <span class="string">&quot;right1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list 5 one</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;right&quot;</span></span><br><span class="line">2) <span class="string">&quot;right1&quot;</span></span><br></pre></td></tr></table></figure><h3 id="8、ltrim-列表名-起始坐标-结束坐标"><a href="#8、ltrim-列表名-起始坐标-结束坐标" class="headerlink" title="8、ltrim  列表名  起始坐标  结束坐标"></a>8、ltrim  列表名  起始坐标  结束坐标</h3><blockquote><p>截断列表，列表元素变为[start ,end]</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello3&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello4&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ltrim list 1 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello3&quot;</span></span><br></pre></td></tr></table></figure><h3 id="9、exists-列表名"><a href="#9、exists-列表名" class="headerlink" title="9、exists 列表名"></a>9、exists 列表名</h3><blockquote><p>判断列表中有几个值</p></blockquote><h3 id="10、LSET-列表名-下标-值"><a href="#10、LSET-列表名-下标-值" class="headerlink" title="10、LSET 列表名  下标  值"></a>10、LSET 列表名  下标  值</h3><blockquote><p>替换列表指定下标的值，如果当前列表中不存在指定下标所对应的值，就报错</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;value3&quot;</span></span><br><span class="line">2) <span class="string">&quot;value2&quot;</span></span><br><span class="line">3) <span class="string">&quot;value1&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lset list 0 item</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;item&quot;</span></span><br><span class="line">2) <span class="string">&quot;value2&quot;</span></span><br><span class="line">3) <span class="string">&quot;value1&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello2&quot;</span></span><br></pre></td></tr></table></figure><h3 id="11、LINSERT-列表名-前-后-要插入的位置-要插入的值"><a href="#11、LINSERT-列表名-前-后-要插入的位置-要插入的值" class="headerlink" title="11、LINSERT   列表名   前|后   要插入的位置    要插入的值"></a>11、LINSERT   列表名   前|后   要插入的位置    要插入的值</h3><blockquote><p>在列表的某个值前|后插入一个值</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush list hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; rpush list world</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="comment"># 在world单词前插入一个值：other</span></span><br><span class="line">127.0.0.1:6379&gt; linsert list before <span class="string">&quot;world&quot;</span> other</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;other&quot;</span></span><br><span class="line">3) <span class="string">&quot;world&quot;</span></span><br></pre></td></tr></table></figure><ul><li>往上面list的other元素后插入一个值wuhu</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; linsert list after <span class="string">&quot;other&quot;</span> wuhu</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;other&quot;</span></span><br><span class="line">3) <span class="string">&quot;wuhu&quot;</span></span><br><span class="line">4) <span class="string">&quot;world&quot;</span></span><br></pre></td></tr></table></figure><h3 id="12、小结："><a href="#12、小结：" class="headerlink" title="12、小结："></a>12、小结：</h3><ul><li><p>list实际上是一个链表，所以可以在节点前后插入节点，也可以在最左端、最右端插入元素</p></li><li><p>如果key不存在，创建新的链表</p></li><li><p>如果key存在，新增内容</p></li><li><p>如果移除了key，那么链表被移除</p></li><li><p>在两边插入或改动值效率最高！操作中间值效率会降低</p></li><li><p>可以用来模拟栈（LPUSH、LPOP）、消息队列（LPUSHR、RPOP）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 💻后端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线教育项目总结（一）-使用MP的QueryWrapper进行自定义sql与提升嵌套查询效率。</title>
      <link href="posts/2126557972.html"/>
      <url>posts/2126557972.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、使用条件构造器自定义SQL"><a href="#一、使用条件构造器自定义SQL" class="headerlink" title="一、使用条件构造器自定义SQL"></a>一、使用条件构造器自定义SQL</h1><blockquote><p>在在线教育项目的学习过程中，遇到一个需要展示课程详细信息的需求，这个课程信息页面需要展示课程title、课程一级类别、二级类别、讲师姓名、课时数、课程价格、课程封面、课程购买量、浏览量、课程状态（已发布、未发布）和课程创建时间。</p></blockquote><h2 id="1-1、所需依赖"><a href="#1-1、所需依赖" class="headerlink" title="1.1、所需依赖"></a>1.1、所需依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">swagger.version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">swagger.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-models<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-models<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--lombok用来简化实体类：需要安装lombok插件--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- org.apache.commons.lang3.StringUtils --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-2、实体类"><a href="#1-2、实体类" class="headerlink" title="1.2、实体类"></a>1.2、实体类</h2><blockquote><p>该业务所涉及的实体类如下所示</p></blockquote><h3 id="1、BaseEntity"><a href="#1、BaseEntity" class="headerlink" title="1、BaseEntity"></a>1、BaseEntity</h3><blockquote><p>这个实体类定义了实体类的<strong>共同属性</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID=<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;讲师ID&quot;)</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.ASSIGN_ID)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date gmtCreate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;更新时间&quot;)</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date gmtModified;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、Course"><a href="#2、Course" class="headerlink" title="2、Course"></a>2、Course</h3><blockquote><p>课程实体类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@TableName(&quot;edu_course&quot;)</span></span><br><span class="line"><span class="meta">@ApiModel(value=&quot;Course对象&quot;, description=&quot;课程&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID=<span class="number">1L</span>;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 课程未发布</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COURSE_DRAFT = <span class="string">&quot;Draft&quot;</span>;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 课程已发布</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COURSE_NORMAL = <span class="string">&quot;Normal&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;课程讲师ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String teacherId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;课程专业ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String subjectId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;课程专业父级ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String subjectParentId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;课程标题&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;课程销售价格，设置为0则可免费观看&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;总课时&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer lessonNum;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;课程封面图片路径&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String cover;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;销售数量&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long buyCount;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;浏览数量&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long viewCount;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;乐观锁&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long version;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;课程状态 Draft未发布  Normal已发布&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、Teacher"><a href="#3、Teacher" class="headerlink" title="3、Teacher"></a>3、Teacher</h3><blockquote><p>教师实体类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@TableName(&quot;edu_teacher&quot;)</span></span><br><span class="line"><span class="meta">@ApiModel(value=&quot;Teacher对象&quot;, description=&quot;讲师&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID=<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;讲师姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;讲师简介&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;讲师资历,一句话说明讲师&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String career;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;头衔 1高级讲师 2首席讲师&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;讲师头像&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;排序&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;入驻时间&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(timezone = &quot;GMT+8&quot;, pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date joinDate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;逻辑删除 1（true）已删除， 0（false）未删除&quot;)</span></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、Subject"><a href="#4、Subject" class="headerlink" title="4、Subject"></a>4、Subject</h3><blockquote><p><strong>课程分类实体类</strong></p><p>一级分类和二级分类共用一个实体类，如果分类对象的parentId为0，证明其是一级分类，如果不为0，证明为二级分类。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@TableName(&quot;edu_subject&quot;)</span></span><br><span class="line"><span class="meta">@ApiModel(value=&quot;Subject对象&quot;, description=&quot;课程科目&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID=<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;类别名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;父ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String parentId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;排序字段&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、CourseVo"><a href="#5、CourseVo" class="headerlink" title="5、CourseVo"></a>5、CourseVo</h3><blockquote><p>这个Vo类用于定义需要展示在课程详情页面的属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">// 课程标题</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">// 课程一级分类</span></span><br><span class="line">    <span class="keyword">private</span> String subjectParentTitle;</span><br><span class="line">    <span class="comment">// 课程二级分类</span></span><br><span class="line">    <span class="keyword">private</span> String subjectTitle;</span><br><span class="line">    <span class="comment">// 讲师姓名</span></span><br><span class="line">    <span class="keyword">private</span> String teacherName;</span><br><span class="line">    <span class="comment">// 课程课时数</span></span><br><span class="line">    <span class="keyword">private</span> Integer lessonNum;</span><br><span class="line">    <span class="comment">// 课程价格</span></span><br><span class="line">    <span class="keyword">private</span> String price;</span><br><span class="line">    <span class="comment">// 课程封面</span></span><br><span class="line">    <span class="keyword">private</span> String cover;</span><br><span class="line">    <span class="comment">// 课程购买数</span></span><br><span class="line">    <span class="keyword">private</span> Long buyCount;</span><br><span class="line">    <span class="comment">// 课程浏览量</span></span><br><span class="line">    <span class="keyword">private</span> Long viewCount;</span><br><span class="line">    <span class="comment">// 课程状态</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    <span class="comment">// 课程创建时间</span></span><br><span class="line">    <span class="keyword">private</span> String gmtCreate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、CourseQueryVo"><a href="#6、CourseQueryVo" class="headerlink" title="6、CourseQueryVo"></a>6、CourseQueryVo</h3><blockquote><p>该业务还需要用到分页查询与条件查询，所以引入一个用于构造条件查询的查询实体类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseQueryVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String teacherId;</span><br><span class="line">    <span class="keyword">private</span> String subjectParentId;</span><br><span class="line">    <span class="keyword">private</span> String subjectId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3、Controller层"><a href="#1-3、Controller层" class="headerlink" title="1.3、Controller层"></a>1.3、Controller层</h2><blockquote><p>定义一个CourseListPage接口，需要传入三个参数：</p><ul><li>page：当前页码</li><li>limit：每页记录数</li><li>courseQueryVo：由查询条件封装成的查询对象</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;课程管理控制器&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/edu/course&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CourseService courseService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiOperation(&quot;课程分页列表&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;list/&#123;page&#125;/&#123;limit&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">courseListPage</span><span class="params">(<span class="meta">@ApiParam(value = &quot;当前页码&quot;,required = true)</span> <span class="meta">@PathVariable</span> Long page,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="meta">@ApiParam(value = &quot;每页记录数&quot;,required = true)</span> <span class="meta">@PathVariable</span> Long limit,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="meta">@ApiParam(value = &quot;课程列表查询对象&quot;)</span>CourseQueryVo courseQueryVo)</span> </span>&#123;</span><br><span class="line">        IPage&lt;CourseVo&gt; pageModel = courseService.selectPage(page, limit, courseQueryVo);</span><br><span class="line">        List&lt;CourseVo&gt; records = pageModel.getRecords();</span><br><span class="line">        <span class="keyword">long</span> total = pageModel.getTotal();</span><br><span class="line">        <span class="keyword">return</span>  R.ok().data(<span class="string">&quot;total&quot;</span>, total).data(<span class="string">&quot;rows&quot;</span>, records);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4、Service实现类"><a href="#1-4、Service实现类" class="headerlink" title="1.4、Service实现类"></a>1.4、Service实现类</h2><blockquote><p>使用QueryWrapper组装sql的步骤如下：</p><ul><li>分别取出查询对象中的查询属性并判断是否为空</li><li>若不为空，则使用条件构造器根据属性类型构造查询条件</li><li>在使用条件构造器构造查询条件时需要使用<strong>表别名.属性名</strong>的形式构造条件</li><li>将组装好的条件构造器传入Mapper层</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">CourseMapper</span>, <span class="title">Course</span>&gt; <span class="keyword">implements</span> <span class="title">CourseService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VideoMapper videoMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ChapterMapper chapterMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentMapper commentMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CourseCollectMapper courseCollectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CourseMapper courseMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPage&lt;CourseVo&gt; <span class="title">selectPage</span><span class="params">(Long page, Long limit, CourseQueryVo courseQueryVo)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//组装查询条件</span></span><br><span class="line">        QueryWrapper&lt;CourseVo&gt; courseVoQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        courseVoQueryWrapper.orderByDesc(<span class="string">&quot;c.gmt_create&quot;</span>);</span><br><span class="line">        <span class="comment">//四个查询条件如下</span></span><br><span class="line">        String title = courseQueryVo.getTitle();</span><br><span class="line">        String teacherId = courseQueryVo.getTeacherId();</span><br><span class="line">        String subjectParentId = courseQueryVo.getSubjectParentId();</span><br><span class="line">        String subjectId = courseQueryVo.getSubjectId();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(title)) &#123;</span><br><span class="line">            courseVoQueryWrapper.like(<span class="string">&quot;c.title&quot;</span>, title);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(teacherId)) &#123;</span><br><span class="line">            courseVoQueryWrapper.eq(<span class="string">&quot;c.teacher_id&quot;</span>, teacherId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(subjectParentId)) &#123;</span><br><span class="line">            courseVoQueryWrapper.eq(<span class="string">&quot;c.subject_parent_id&quot;</span>, subjectParentId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(subjectId)) &#123;</span><br><span class="line">            courseVoQueryWrapper.eq(<span class="string">&quot;c.subject_id&quot;</span>, subjectId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//组装分页</span></span><br><span class="line">        Page&lt;CourseVo&gt; pageParam = <span class="keyword">new</span> Page&lt;&gt;(page, limit);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行查询</span></span><br><span class="line">        List&lt;CourseVo&gt; courseVoList = courseMapper.selectPageByQueryVo(pageParam, courseVoQueryWrapper);</span><br><span class="line">        pageParam.setRecords(courseVoList);</span><br><span class="line">        <span class="keyword">return</span> pageParam;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5、Mapper层"><a href="#1-5、Mapper层" class="headerlink" title="1.5、Mapper层"></a>1.5、Mapper层</h2><h3 id="1、Mapper接口"><a href="#1、Mapper接口" class="headerlink" title="1、Mapper接口"></a>1、Mapper接口</h3><blockquote><p>对于Service层中传入的条件构造器，需要使Mybatis-plus能够识别，此时我们需要在Mapper层中的条件构造器对象前添加**@Param(Constants.WRAPPER)**注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CourseMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Course</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;CourseVo&gt; <span class="title">selectPageByQueryVo</span><span class="params">(Page&lt;CourseVo&gt; pageParam,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="meta">@Param(Constants.WRAPPER)</span> QueryWrapper&lt;CourseVo&gt; courseVoQueryWrapper)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、Mapper-xml文件"><a href="#2、Mapper-xml文件" class="headerlink" title="2、Mapper.xml文件"></a>2、Mapper.xml文件</h3><blockquote><p>除去Mapper接口添加的**@Param(Constants.WRAPPER)<strong>注解外，我们还需要在自定义的sql语句后添加</strong>${ew.customSqlSegment}**</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hzx.grain.service.edu.mapper.CourseMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPageByQueryVo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hzx.grain.service.edu.entity.vo.CourseVo&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;courseVoColumns&quot;</span>/&gt;</span></span><br><span class="line">        FROM</span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;tables&quot;</span>/&gt;</span></span><br><span class="line">        $&#123;ew.customSqlSegment&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 抽取sql片段 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;courseVoColumns&quot;</span>&gt;</span></span><br><span class="line">           c.id,</span><br><span class="line">           c.title,</span><br><span class="line">           c.lesson_num AS lessonNum,</span><br><span class="line">           c.price,</span><br><span class="line">           c.cover,</span><br><span class="line">           c.buy_count AS buyCount,</span><br><span class="line">           c.view_count AS viewCount,</span><br><span class="line">           c.status,</span><br><span class="line">           c.gmt_create AS gmtCreate,</span><br><span class="line">           t.name AS teacherName,</span><br><span class="line">           s1.title AS subjectParentTitle,</span><br><span class="line">           s2.title AS subjectTitle</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 抽取sql片段：与course表连接的其余表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;tables&quot;</span>&gt;</span></span><br><span class="line">            guli_edu.edu_course c</span><br><span class="line">        LEFT JOIN guli_edu.edu_teacher t ON c.teacher_id = t.id</span><br><span class="line">        LEFT JOIN guli_edu.edu_subject s1 ON c.subject_parent_id = s1.id</span><br><span class="line">        LEFT JOIN guli_edu.edu_subject s2 ON c.subject_id = s2.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、注意事项"><a href="#3、注意事项" class="headerlink" title="3、注意事项"></a>3、注意事项</h3><blockquote><p>需要<code>mybatis-plus</code>版本 &gt;= <code>3.0.7</code></p></blockquote><h2 id="1-6、测试"><a href="#1-6、测试" class="headerlink" title="1.6、测试"></a>1.6、测试</h2><blockquote><p>打开Swagger进行测试</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210203201739.png"></p><h3 id="1、结果"><a href="#1、结果" class="headerlink" title="1、结果"></a>1、结果</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;success&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;code&quot;</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;rows&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1353316219423391746&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Spring Boot框架入门教程&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;subjectParentTitle&quot;</span>: <span class="string">&quot;后端开发&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;subjectTitle&quot;</span>: <span class="string">&quot;Java&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;teacherName&quot;</span>: <span class="string">&quot;刘德华&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;lessonNum&quot;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">&quot;price&quot;</span>: <span class="string">&quot;0.00&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cover&quot;</span>: <span class="string">&quot;https://edu-system-1010.oss-cn-shenzhen.aliyuncs.com/cover/2021/01/24/2afcb3fd-da73-40d1-ba41-4d6cf74c7e7a.jpg&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;buyCount&quot;</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">&quot;viewCount&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;Normal&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;gmtCreate&quot;</span>: <span class="string">&quot;2021-01-24 20:18:25&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1353313325668200450&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Mybatis-Plus框架入门教程&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;subjectParentTitle&quot;</span>: <span class="string">&quot;后端开发&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;subjectTitle&quot;</span>: <span class="string">&quot;Java&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;teacherName&quot;</span>: <span class="string">&quot;刘德华&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;lessonNum&quot;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">&quot;price&quot;</span>: <span class="string">&quot;1.00&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cover&quot;</span>: <span class="string">&quot;https://edu-system-1010.oss-cn-shenzhen.aliyuncs.com/cover/2021/01/24/804b29e5-4ca7-4819-9bac-eb34f65068ca.jpg&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;buyCount&quot;</span>: <span class="number">9</span>,</span><br><span class="line">        <span class="attr">&quot;viewCount&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;Normal&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;gmtCreate&quot;</span>: <span class="string">&quot;2021-01-24 20:06:55&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1353310049325309953&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;java--从入门到入土&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;subjectParentTitle&quot;</span>: <span class="string">&quot;后端开发&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;subjectTitle&quot;</span>: <span class="string">&quot;Java&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;teacherName&quot;</span>: <span class="string">&quot;刘德华&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;lessonNum&quot;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">&quot;price&quot;</span>: <span class="string">&quot;6.00&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cover&quot;</span>: <span class="string">&quot;https://edu-system-1010.oss-cn-shenzhen.aliyuncs.com/cover/2021/01/24/d7c25aaa-5c09-4b46-a56d-5000f9265bc7.jpg&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;buyCount&quot;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">&quot;viewCount&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;Normal&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;gmtCreate&quot;</span>: <span class="string">&quot;2021-01-24 19:53:54&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、执行的sql语句"><a href="#2、执行的sql语句" class="headerlink" title="2、执行的sql语句"></a>2、执行的sql语句</h3><blockquote><p>使用Idea的Mybatis插件查看执行的sql语句</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">c.id, </span><br><span class="line">c.title, </span><br><span class="line">c.lesson_num AS lessonNum, </span><br><span class="line">c.price, </span><br><span class="line">c.cover, </span><br><span class="line">c.buy_count AS buyCount, </span><br><span class="line">c.view_count AS viewCount, </span><br><span class="line">c.status, </span><br><span class="line">c.gmt_create AS gmtCreate, </span><br><span class="line">t.name AS teacherName, </span><br><span class="line">s1.title AS subjectParentTitle, </span><br><span class="line">s2.title AS subjectTitle</span><br><span class="line">FROM guli_edu.edu_course c</span><br><span class="line">LEFT JOIN guli_edu.edu_teacher t ON c.teacher_id &#x3D; t.id</span><br><span class="line">LEFT JOIN guli_edu.edu_subject s1 ON c.subject_parent_id &#x3D; s1.id</span><br><span class="line">LEFT JOIN guli_edu.edu_subject s2 ON c.subject_id &#x3D; s2.id</span><br><span class="line">WHERE c.title LIKE &#39;%入门%&#39;</span><br><span class="line">AND c.teacher_id &#x3D; &#39;1&#39;</span><br><span class="line">AND c.subject_parent_id &#x3D; &#39;1352924754100617218&#39;</span><br><span class="line">AND c.subject_id &#x3D; &#39;1352924754167726082&#39;</span><br><span class="line">ORDER BY c.gmt_create DESC</span><br><span class="line">LIMIT 0, 3;</span><br></pre></td></tr></table></figure><h1 id="二、总结嵌套查询"><a href="#二、总结嵌套查询" class="headerlink" title="二、总结嵌套查询"></a>二、总结嵌套查询</h1><h2 id="2-1、使用子查询"><a href="#2-1、使用子查询" class="headerlink" title="2.1、使用子查询"></a>2.1、使用子查询</h2><h3 id="1、Controller层"><a href="#1、Controller层" class="headerlink" title="1、Controller层"></a>1、Controller层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;nested&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;嵌套分类数据列表&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">nestedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//返回分类VO列表</span></span><br><span class="line">    List&lt;SubjectVo&gt; subjectVoList = subjectService.nestedList();</span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">&quot;items&quot;</span>,subjectVoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、Service实现类"><a href="#2、Service实现类" class="headerlink" title="2、Service实现类"></a>2、Service实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SubjectVo&gt; <span class="title">nestedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> subjectMapper.selectNestedListByParentId(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、Mapper-xml文件"><a href="#3、Mapper-xml文件" class="headerlink" title="3、Mapper.xml文件"></a>3、Mapper.xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用ResultMap进行映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;subjectVoMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.hzx.grain.service.edu.entity.vo.SubjectVo&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将表中字段与类中属性一一映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;title&quot;</span> <span class="attr">column</span>=<span class="string">&quot;title&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sort&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sort&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里根据原来的方法进行嵌套查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;children&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">column</span>=<span class="string">&quot;id&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">&quot;selectNestedListByParentId&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">ofType</span>=<span class="string">&quot;com.hzx.grain.service.edu.entity.vo.SubjectVo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 嵌套查询一级分类与二级分类并组装为SubjectVo列表的sql语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectNestedListByParentId&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;subjectVoMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">     `id`,</span><br><span class="line">     `sort`,</span><br><span class="line">     `title`</span><br><span class="line">    FROM</span><br><span class="line">     guli_edu.edu_subject</span><br><span class="line">    WHERE</span><br><span class="line">     `parent_id` = #&#123;parentId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、SubjectVo实体类"><a href="#4、SubjectVo实体类" class="headerlink" title="4、SubjectVo实体类"></a>4、SubjectVo实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line">    <span class="keyword">private</span> List&lt;SubjectVo&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h3><blockquote><p>这种使用子查询的嵌套查询实现简单，但查询效率会随着数据量增大而降低。</p></blockquote><h2 id="2-2、三层嵌套查询中使用冗余字段提高查询效率"><a href="#2-2、三层嵌套查询中使用冗余字段提高查询效率" class="headerlink" title="2.2、三层嵌套查询中使用冗余字段提高查询效率"></a>2.2、三层嵌套查询中使用冗余字段提高查询效率</h2><blockquote><p>该业务需求是：根据课程Id查询课程详情信息，包括课程信息、嵌套章节课时列表</p><p>即一个课程下有多个章节，而一个章节下又有多个小节</p></blockquote><h3 id="1、CourseVo"><a href="#1、CourseVo" class="headerlink" title="1、CourseVo"></a>1、CourseVo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebCourseVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    <span class="keyword">private</span> Integer lessonNum;</span><br><span class="line">    <span class="keyword">private</span> String cover;</span><br><span class="line">    <span class="keyword">private</span> Long buyCount;</span><br><span class="line">    <span class="keyword">private</span> Long viewCount;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="keyword">private</span> String teacherId;</span><br><span class="line">    <span class="keyword">private</span> String teacherName;</span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">    <span class="keyword">private</span> String subjectLevelOneId;</span><br><span class="line">    <span class="keyword">private</span> String subjectLevelOne;</span><br><span class="line">    <span class="keyword">private</span> String subjectLevelTwoId;</span><br><span class="line">    <span class="keyword">private</span> String subjectLevelTwo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、ChapterVo"><a href="#2、ChapterVo" class="headerlink" title="2、ChapterVo"></a>2、ChapterVo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChapterVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line">    <span class="keyword">private</span> List&lt;VideoVo&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、VideoVo"><a href="#3、VideoVo" class="headerlink" title="3、VideoVo"></a>3、VideoVo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Boolean free;</span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String videoSourceId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、控制器层"><a href="#4、控制器层" class="headerlink" title="4、控制器层"></a>4、控制器层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;get/&#123;courseId&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据courseId查询课程详细信息&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">getById</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@ApiParam(value = &quot;课程id&quot;,required = true)</span></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@PathVariable</span> String courseId)</span> </span>&#123;</span><br><span class="line">    WebCourseVo courseVo = courseService.selectWebCourseVoById(courseId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询当前课程的嵌套章节和课时信息</span></span><br><span class="line">    List&lt;ChapterVo&gt; chapterVoList = chapterService.nestedList(courseId);</span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">&quot;course&quot;</span>,courseVo).data(<span class="string">&quot;chapterVoList&quot;</span>,chapterVoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、service层"><a href="#5、service层" class="headerlink" title="5、service层"></a>5、service层</h3><blockquote><p>CourseServiceImpl</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebCourseVo <span class="title">selectWebCourseVoById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//更新课程浏览数</span></span><br><span class="line">    Course course = baseMapper.selectById(id);</span><br><span class="line">    course.setViewCount(course.getViewCount() + <span class="number">1</span>);</span><br><span class="line">    baseMapper.updateById(course);</span><br><span class="line">    <span class="comment">//获取课程信息</span></span><br><span class="line">    <span class="keyword">return</span> baseMapper.selectWebCourseVoById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ChapterServiceImpl</p><p>由于前面使用子查询导致查询速率低下，所以在这里使用video表冗余的CourseId字段来提高查询速率，步骤如下</p><ul><li>通过Chapter类的courseId获取该课程下的所有章节对象</li><li>通过Video类冗余的courseId获取该课程下的所有小节对象</li><li>循环遍历该课程下的章节对象列表，通过Chapter对象的id和Video对象的chapterId字段来建立联系，组装Chapter对象的Video列表</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;ChapterVo&gt; <span class="title">nestedList</span><span class="params">(String courseId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1 通过courseId获取章节列表信息：List&lt;Chapter&gt;</span></span><br><span class="line">    QueryWrapper&lt;Chapter&gt; chapterQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    chapterQueryWrapper.eq(<span class="string">&quot;course_id&quot;</span>,courseId);</span><br><span class="line">    List&lt;Chapter&gt; chapterList = chapterMapper.selectList(chapterQueryWrapper);</span><br><span class="line">    <span class="comment">//2 通过edu_video表中冗余的course_id获取属于这个课程的所有Video列表：List&lt;Video&gt;</span></span><br><span class="line">    QueryWrapper&lt;Video&gt; videoQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    videoQueryWrapper.eq(<span class="string">&quot;course_id&quot;</span>,courseId);</span><br><span class="line">    List&lt;Video&gt; videoList = videoMapper.selectList(videoQueryWrapper);</span><br><span class="line">    <span class="comment">//3 先获取章节信息ChapterVo列表，再获取VideoVo列表</span></span><br><span class="line">    List&lt;ChapterVo&gt; chapterVoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    chapterList.forEach(chapter -&gt; &#123;</span><br><span class="line">        ChapterVo chapterVo = <span class="keyword">new</span> ChapterVo();</span><br><span class="line">        BeanUtils.copyProperties(chapter,chapterVo);</span><br><span class="line">        chapterVoList.add(chapterVo);</span><br><span class="line">        List&lt;VideoVo&gt; videoVoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//4 循环组装章节信息列表</span></span><br><span class="line">        videoList.forEach(video -&gt; &#123;</span><br><span class="line">            <span class="comment">//如果当前chapter的id的值等于video的chapterId值</span></span><br><span class="line">            <span class="comment">//证明当前video对象属于该Chapter对象</span></span><br><span class="line">            <span class="keyword">if</span>(StringUtils.equals(chapter.getId(),video.getChapterId())) &#123;</span><br><span class="line">                VideoVo videoVo = <span class="keyword">new</span> VideoVo();</span><br><span class="line">                BeanUtils.copyProperties(video,videoVo);</span><br><span class="line">                videoVoList.add(videoVo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        chapterVo.setChildren(videoVoList);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> chapterVoList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
            <tag> 👢Spring Boot </tag>
            
            <tag> 💎Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java应用学习（三）-SSM框架整合及基本使用</title>
      <link href="posts/3009255528.html"/>
      <url>posts/3009255528.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>SSM框架多种整合方式，这里使用注解+XML文件的方式来进行整合开发</p></blockquote><h1 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h1><h2 id="1-1、创建数据库与表"><a href="#1-1、创建数据库与表" class="headerlink" title="1.1、创建数据库与表"></a>1.1、创建数据库与表</h2><blockquote><p>打开数据库可视化工具，执行以下sql语句</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE ssm;</span><br><span class="line"></span><br><span class="line">USE ssm;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;student&#96;(</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    &#96;name&#96; VARCHAR(32),</span><br><span class="line">    score DOUBLE</span><br><span class="line">);</span><br><span class="line">INSERT INTO &#96;student&#96; VALUES (1, &#39;A&#39;, 80);</span><br><span class="line">INSERT INTO &#96;student&#96; VALUES (2, &#39;B&#39;, 95);</span><br><span class="line">INSERT INTO &#96;student&#96; VALUES (3, &#39;C&#39;, 90);</span><br><span class="line">INSERT INTO &#96;student&#96; VALUES (4, &#39;D&#39;, 100);</span><br></pre></td></tr></table></figure><h2 id="1-2、创建maven项目"><a href="#1-2、创建maven项目" class="headerlink" title="1.2、创建maven项目"></a>1.2、创建maven项目</h2><blockquote><p>注：这里需要以maven-archetype-webapp为骨架构建项目</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210131125931.png" alt="image-20210131125931386"></p><blockquote><p>设置项目路径与坐标后，点击next</p></blockquote><blockquote><p>选择项目使用的maven版本及settings.xml文件，<strong>在属性中添加一键值对</strong>：**(archetypeCatalog:internal)**，这个键值对可以解决maven项目构建速度过慢的问题。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210131130358.png" alt="image-20210131130358733"></p><h2 id="1-3、编辑pom-xml"><a href="#1-3、编辑pom-xml" class="headerlink" title="1.3、编辑pom.xml"></a>1.3、编辑pom.xml</h2><blockquote><p>在pom.xml文件中<strong>引入项目依赖</strong>与<strong>版本锁定</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- aop相关的技术 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- aop --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- context容器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- web --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- webmvc --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- spring测试 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 事务 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- jdbc模板技术 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 单元测试 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- mysql连接 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- servlet --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- jsp --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- EL JL TL表达式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- log start --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- mybatis相关 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- druid 连接池 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-4、完善目录结构"><a href="#1-4、完善目录结构" class="headerlink" title="1.4、完善目录结构"></a>1.4、完善目录结构</h2><ul><li>在src/main目录下创建java文件夹与resource文件夹。</li><li>在上一步创建的java目录下创建com.hzx.entity、com.hzx.dao、com.hzx.controller、com.hzx.service和com.hzx.test包</li></ul><blockquote><p>完善后的目录如下：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210131131024.png" alt="image-20210131131024222"></p><h2 id="1-5、创建基本类"><a href="#1-5、创建基本类" class="headerlink" title="1.5、创建基本类"></a>1.5、创建基本类</h2><blockquote><p>根据数据库的表结构创建实体类，这里使用了<strong>Lombok</strong>简化开发</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hzx.entity;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在service包下创建一个StudentService接口，再创建一个impl包，然后在impl包下新建一个StudentServiceImpl实现类，这个类实现StudentService接口。</p></blockquote><ul><li>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hzx.service;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hzx.service.impl;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在mapper包下创建StudentMapper接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hzx.mapper;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在controller包下创建一个StudentController接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hzx.controller;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、Spring相关环境配置"><a href="#二、Spring相关环境配置" class="headerlink" title="二、Spring相关环境配置"></a>二、Spring相关环境配置</h1><h2 id="2-1、编写Spring核心配置文件"><a href="#2-1、编写Spring核心配置文件" class="headerlink" title="2.1、编写Spring核心配置文件"></a>2.1、编写Spring核心配置文件</h2><blockquote><p>在resource目录下创建Spring核心配置文件–applicationContext.xml</p><p>在这个核心配置文件中，我们需要</p></blockquote><ul><li>开启组件扫描，扫描com.hzx包下的所有组件</li><li>由于controller包下的控制器组件属于SpringMVC，所以我们需要在组件扫描中排除com.hzx包下所有添加了@Controller注解的组件。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解扫描，处理service和dao，但是不需要处理 controller --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.hzx&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置哪些注解不扫描 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2、测试"><a href="#2-2、测试" class="headerlink" title="2.2、测试"></a>2.2、测试</h2><blockquote><p>在StudentServiceImpl上添加@Service注解，同时添加两个方法进行测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getAllStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层的getAll方法，需要调用Mapper层与数据库交互.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在com.hzx.test包下创建一个TestSpring类，编写方法使用junit进行测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext ioc = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        StudentService studentService = ioc.getBean(StudentServiceImpl.class);</span><br><span class="line">        studentService.getAllStudent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210131133141.png" alt="image-20210131133141706"></p><blockquote><p>出现以上结果证明Spring基本环境已经搭建完成，下面配置SpringMVC</p></blockquote><h1 id="三、SpringMVC相关环境配置"><a href="#三、SpringMVC相关环境配置" class="headerlink" title="三、SpringMVC相关环境配置"></a>三、SpringMVC相关环境配置</h1><h2 id="3-1、配置web-xml"><a href="#3-1、配置web-xml" class="headerlink" title="3,1、配置web.xml"></a>3,1、配置web.xml</h2><blockquote><p>配置SpringMVC的核心前端控制器：<strong>DispatcherServlet</strong></p><p>web.xml文件位置如下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210131133440.png" alt="image-20210131133440460"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--加载springmvc.xml配置文件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--启动服务器，创建该servlet--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>配置前端控制器的过程中，可以直接指定springmvc的核心配置文件位置，在resource目录下创建springmvc核心配置文件–<strong>springmvc.xml</strong></p></li><li><p>使用该前端控制器拦截所有请求，在服务器启动时创建该servlet</p></li></ul><blockquote><p>配置字符编码过滤器，用于解决中文乱码</p><p>注：<strong>如果配置了多个过滤器，那么这个字符编码过滤器必须放在最前</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置过滤器，解决中文乱码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>可选：如果你在SSM框架中想使用REST风格的API，那么需要配置一个<strong>HiddenHttpMethodFilter</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置使用Rest风格的URL --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2、配置springmvc-xml"><a href="#3-2、配置springmvc-xml" class="headerlink" title="3.2、配置springmvc.xml"></a>3.2、配置springmvc.xml</h2><blockquote><p>在resource目录下创建一个springmvc.xml配置文件</p></blockquote><ul><li><p>创建配置文件，引入命名空间</p></li><li><p>开启组件扫描，由于Spring核心配置文件中已经扫描除<strong>控制器</strong>之外的组件，所以在springmvc核心配置文件中只需要扫描控制器即可。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1  开启只对controller的扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.hzx&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置视图解析器，在WEB-INF文件夹下创建一个pages文件夹</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--2 配置视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;org&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--JSP 目录--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--文件后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在webapp目录下创建三个用于存放静态资源的文件夹（css、images、js），并放行静态资源</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--3 不过滤静态资源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/css/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/images/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/images/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>开启注解支持</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--4 开启注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>springmvc.xml配置如下：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1  开启只对controller的扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.hzx&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2 配置视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;org&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--JSP 目录--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--文件后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3 不过滤静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/css/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/images/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/images/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--4 开启注解支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-3、编写页面"><a href="#3-3、编写页面" class="headerlink" title="3.3、编写页面"></a>3.3、编写页面</h2><blockquote><p>修改index.jsp</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;主页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href=&quot;student/getAll&quot;&gt;查询所有学生&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在WEB-INF/pages目录下创建一个list.jsp</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;查询所有页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;这是学生列表&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="3-4、测试"><a href="#3-4、测试" class="headerlink" title="3.4、测试"></a>3.4、测试</h2><blockquote><p>在StudentController添加一方法，这个方法用于跳转到list.jsp页面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.setViewName(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置tomcat</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210131140153.png" alt="image-20210131140153219"></p><blockquote><p>点击超链接后跳转成功，证明Springmvc基本配置完成</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210131140235.png" alt="image-20210131140235530"></p><h1 id="四、Spring整合Spring-MVC"><a href="#四、Spring整合Spring-MVC" class="headerlink" title="四、Spring整合Spring MVC"></a>四、Spring整合Spring MVC</h1><h2 id="4-1、配置监听器"><a href="#4-1、配置监听器" class="headerlink" title="4.1、配置监听器"></a>4.1、配置监听器</h2><blockquote><p>通过对 Spring MVC 的代码编写，我们知道，在服务器启动的时候就回去加载 springmvc.xml 这个配置，现在我们就需要继续在 web.xml 中配置，使得在项目启动的时候，就去加载applicationContext.xml的配置文件</p><p>所以我们可以在 <strong>web.xml</strong> 中，<strong>配置spring核心监听器</strong>，它默认会以 /WEB-INF/applicationContext.xml作为配置文件，这里需要注意web.xml文件中各个组件的存放位置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置配置文件路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置 Spring 的监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2、使用controller调用service"><a href="#4-2、使用controller调用service" class="headerlink" title="4.2、使用controller调用service"></a>4.2、使用controller调用service</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;控制层的getAll方法...&quot;</span>);</span><br><span class="line">        studentService.getAllStudent();</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.setViewName(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3、重新启动tomcat，测试"><a href="#4-3、重新启动tomcat，测试" class="headerlink" title="4.3、重新启动tomcat，测试"></a>4.3、重新启动tomcat，测试</h2><blockquote><p>在tomcat的VM options中填入：-Dfile.encoding=UTF-8，用于解决IDEA的控制台乱码问题</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210131141119.png" alt="image-20210131141119573"></p><h1 id="五、使用Spring整合Mybatis"><a href="#五、使用Spring整合Mybatis" class="headerlink" title="五、使用Spring整合Mybatis"></a>五、使用Spring整合Mybatis</h1><h2 id="5-1、编写Mybatis核心配置文件"><a href="#5-1、编写Mybatis核心配置文件" class="headerlink" title="5.1、编写Mybatis核心配置文件"></a>5.1、编写Mybatis核心配置文件</h2><blockquote><p>在resource目录下新建一个SqlMapConfig.xml，这个文件其实可以省略，但我们还是用它来编写类名简化配置。</p></blockquote><ul><li>创建SqlMapConfig.xml配置文件</li><li>扫描com.hzx包，为包下的实体类起一个别名，并在控制台输出执行的sql</li><li>与数据库连接相关的配置我们放在Spring的核心配置文件中配置。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打印查询语句 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.hzx&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-2、编写StudentMapper接口"><a href="#5-2、编写StudentMapper接口" class="headerlink" title="5.2、编写StudentMapper接口"></a>5.2、编写StudentMapper接口</h2><blockquote><p>使用注解形式编写sql语句，也可以使用xml配置文件的方式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 查询所有学生</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from `ssm`.`student`&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 向数据库中插入一个学生</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> student</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into `ssm`.`student`(name,score) values(#&#123;name&#125;,#&#123;score&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3、编写链接数据库的配置文件"><a href="#5-3、编写链接数据库的配置文件" class="headerlink" title="5.3、编写链接数据库的配置文件"></a>5.3、编写链接数据库的配置文件</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;nullCatalogMeansCurrent=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">tianxin1230.</span></span><br></pre></td></tr></table></figure><h2 id="5-4、修改Spring核心配置文件"><a href="#5-4、修改Spring核心配置文件" class="headerlink" title="5.4、修改Spring核心配置文件"></a>5.4、修改Spring核心配置文件</h2><blockquote><p>在Spring核心配置文件配置数据库连接池，引入properties文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span> <span class="attr">ignore-unresolvable</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置数据库连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库基本信息配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置SqlSessionFactory工厂 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置StudentMapper接口所在包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScanner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.hzx.mapper&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-5、修改service实现类和controller层"><a href="#5-5、修改service实现类和controller层" class="headerlink" title="5.5、修改service实现类和controller层"></a>5.5、修改service实现类和controller层</h2><blockquote><p>service实现类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getAllStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层的getAll方法，需要调用Mapper层与数据库交互.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> studentMapper.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addStudent</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层的addStudent方法，需要调用Mapper层与数据库交互.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> studentMapper.addStudent(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>controller层</p><p>修改getAll方法，并添加add方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;控制层的getAll方法...&quot;</span>);</span><br><span class="line">        List&lt;Student&gt; students = studentService.getAllStudent();</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">&quot;students&quot;</span>,students);</span><br><span class="line">        mv.setViewName(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Student student, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException, IOException </span>&#123;</span><br><span class="line">        studentService.addStudent(student);</span><br><span class="line">        response.sendRedirect(request.getContextPath()+<span class="string">&quot;/student/getAll&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-6、修改index-jsp和"><a href="#5-6、修改index-jsp和" class="headerlink" title="5.6、修改index.jsp和"></a>5.6、修改index.jsp和</h2><blockquote><p>index.jsp</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;主页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href=&quot;student/getAll&quot;&gt;查询所有学生&lt;/a&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;student/add&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        学生姓名:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        学科成绩:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;score&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;添加&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>list.jsp</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;学生列表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;学生列表&lt;/h3&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;students&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">        $&#123;student.name&#125; 的成绩为: $&#123;student.score&#125;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>测试查询所有学生方法</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210131143231.png" alt="image-20210131143231582"></p><blockquote><p>测试添加所有学生方法</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210131143459.png" alt="image-20210131143459450"></p><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/20210131144430.png" alt="image-20210131144429826"></p><h2 id="5-7、添加事务控制"><a href="#5-7、添加事务控制" class="headerlink" title="5.7、添加事务控制"></a>5.7、添加事务控制</h2><blockquote><p>修改spring核心配置文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Spring框架声明式事务管理--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置AOP增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* cn.ideal.service.impl.*ServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
            <tag> 💎Mybatis </tag>
            
            <tag> 🍃Spring </tag>
            
            <tag> 🍃Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java应用学习（二）-Springboot整合swagger/swagger-Bootstrap-UI使用</title>
      <link href="posts/2938255980.html"/>
      <url>posts/2938255980.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、Swagger及Swagger-Bootstrap-UI简介"><a href="#一、Swagger及Swagger-Bootstrap-UI简介" class="headerlink" title="一、Swagger及Swagger-Bootstrap-UI简介"></a>一、Swagger及Swagger-Bootstrap-UI简介</h1><h2 id="1-1、swagger简介"><a href="#1-1、swagger简介" class="headerlink" title="1.1、swagger简介"></a>1.1、swagger简介</h2><blockquote><p><a href="https://swagger.io/">Swagger</a> 是一款RESTFUL接口的、基于YAML、JSON语言的文档在线自动生成、代码自动生成的工具。是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p><p>总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法、参数和模型紧密集成到服务器端的代码，允许 API 来始终保持同步。Swagger 让部署管理和使用功能强大的 API 从未如此简单。</p></blockquote><h2 id="1-2、关于Swagger-Bootstrap-UI"><a href="#1-2、关于Swagger-Bootstrap-UI" class="headerlink" title="1.2、关于Swagger-Bootstrap-UI"></a>1.2、关于Swagger-Bootstrap-UI</h2><h3 id="1-2-1、简介"><a href="#1-2-1、简介" class="headerlink" title="1.2.1、简介"></a>1.2.1、简介</h3><blockquote><p><a href="https://gitee.com/xiaoym/swagger-bootstrap-ui">swagger-bootstrap-ui</a>是springfox-swagger的增强UI实现，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验。</p></blockquote><h3 id="1-2-2、核心功能"><a href="#1-2-2、核心功能" class="headerlink" title="1.2.2、核心功能"></a>1.2.2、核心功能</h3><blockquote><p>该UI增强包主要包括两大核心功能：<strong>文档说明</strong> 和 <strong>在线调试</strong></p><ul><li><p><strong>文档说明</strong>：根据Swagger的规范说明，详细列出接口文档的说明，包括接口地址、类型、请求示例、请求参数、响应示例、响应参数、响应码等信息，使用swagger-bootstrap-ui能根据该文档说明，对该接口的使用情况一目了然。</p></li><li><p><strong>在线调试</strong>：提供在线接口联调的强大功能，自动解析当前接口参数,同时包含表单验证，调用参数可返回接口响应内容、headers、Curl请求命令实例、响应时间、响应状态码等信息，帮助开发者在线调试，而不必通过其他测试工具测试接口是否正确,简介、强大。</p></li></ul></blockquote><h3 id="1-2-3、UI增强"><a href="#1-2-3、UI增强" class="headerlink" title="1.2.3、UI增强"></a>1.2.3、UI增强</h3><blockquote><p>同时，swagger-bootstrap-ui在满足以上功能的同时，还提供了文档的增强功能，这些功能是官方swagger-ui所没有的，每一个增强的功能都是贴合实际,考虑到开发者的实际开发需要,是比不可少的功能，主要包括：</p><ul><li><p><strong>个性化配置</strong>：通过个性化ui配置项，可自定义UI的相关显示信息</p></li><li><p><strong>离线文档</strong>：根据标准规范，生成的在线markdown离线文档，开发者可以进行拷贝生成markdown接口文档，通过其他第三方markdown转换工具转换成html或pdf，这样也可以放弃swagger2markdown组件</p></li><li><p><strong>接口排序</strong>：自1.8.5后，ui支持了接口排序功能，例如一个注册功能主要包含了多个步骤,可以根据swagger-bootstrap-ui提供的接口排序规则实现接口的排序，step化接口操作，方便其他开发者进行接口对接</p></li></ul></blockquote><h3 id="1-2-4、UI特点"><a href="#1-2-4、UI特点" class="headerlink" title="1.2.4、UI特点"></a>1.2.4、UI特点</h3><blockquote><ul><li>以markdown形式展示文档,将文档的请求地址、类型、请求参数、示例、响应参数分层次依次展示,接口文档一目了然,方便开发者对接</li><li>在线调试栏除了自动解析参数外,针对必填项着颜色区分,同时支持tab键快速输入上下切换.调试时可自定义Content-Type请求头类型</li><li>个性化配置项,支持接口地址、接口description属性、UI增强等个性化配置功能</li><li>接口排序,支持分组及接口的排序功能</li><li>支持markdown文档离线文档导出,也可在线查看离线文档</li><li>调试信息全局缓存,页面刷新后依然存在,方便开发者调试</li><li>以更人性化的treetable组件展示Swagger Models功能</li><li>响应内容可全屏查看,针对响应内容很多的情况下，全屏查看，方便调试、复制</li><li>文档以多tab方式可显示多个接口文档</li><li>请求参数栏请求类型、是否必填着颜色区分</li><li>主页中粗略统计接口不同类型数量</li><li>支持接口在线搜索功能</li><li>左右菜单和内容页可自由拖动宽度</li><li>支持自定义全局参数功能，主页包括header及query两种类型</li><li>i18n国际化支持,目前支持：中文简体、中文繁体、英文</li><li>JSR-303 annotations 注解的支持</li></ul></blockquote><h1 id="二、Spring-boot整合Swagger-Bootstrap-UI"><a href="#二、Spring-boot整合Swagger-Bootstrap-UI" class="headerlink" title="二、Spring-boot整合Swagger-Bootstrap-UI"></a>二、Spring-boot整合Swagger-Bootstrap-UI</h1><blockquote><p>使用上次复习Mybatis-Plus时建立的项目，在该项目的基础上对Swagger-Bootstrap-ui进行初步学习。</p></blockquote><h2 id="2-1、引入依赖、编写配置类"><a href="#2-1、引入依赖、编写配置类" class="headerlink" title="2.1、引入依赖、编写配置类"></a>2.1、引入依赖、编写配置类</h2><blockquote><p>如果使用原有的swagger，那么需要引入的依赖有</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果使用swagger-bootstrap-ui，那么只需要引入下面两个依赖即可</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在config包下新建一个配置类</p><p>与普通swagger的配置类相比，swagger-bootstap-ui的配置类多了一个@EnableSwaggerBootstrapUI注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@EnableSwaggerBootstrapUI</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">webApiConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">&quot;webApi&quot;</span>)</span><br><span class="line">                .apiInfo(webApiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .paths(Predicates.not(PathSelectors.regex(<span class="string">&quot;/admin/.*&quot;</span>)))</span><br><span class="line">                .paths(Predicates.not(PathSelectors.regex(<span class="string">&quot;/error.*&quot;</span>)))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">webApiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;测试API&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;本文档描述了课程中心微服务接口定义&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">&quot;蔡大头&quot;</span>, <span class="string">&quot;http://wuhuqifei.com&quot;</span>, <span class="string">&quot;763882220@qq.com&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2、编写Controller并使用注解来添加信息"><a href="#2-2、编写Controller并使用注解来添加信息" class="headerlink" title="2.2、编写Controller并使用注解来添加信息"></a>2.2、编写Controller并使用注解来添加信息</h2><h3 id="2-2-1、UserController"><a href="#2-2-1、UserController" class="headerlink" title="2.2.1、UserController"></a>2.2.1、UserController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户管理控制器&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据用户id获取用户信息&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;addUser&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;添加用户对象&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;update&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;修改用户信息&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.saveOrUpdate(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id删除用户&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.removeById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2、常用注解说明"><a href="#2-2-2、常用注解说明" class="headerlink" title="2.2.2、常用注解说明"></a>2.2.2、常用注解说明</h3><blockquote><p>swagger及swagger-bootstrap-ui的常用注解有两个，分别为@Api与@ApiOperation</p></blockquote><ul><li>@Api</li></ul><blockquote><p>这个注解用于Controller类上，可以使用该注解的tags属性来为控制器添加备注</p></blockquote><ul><li>@ApiOperation</li></ul><blockquote><p>这个注解用于控制器的方法上，用于给控制器的具体方法添加注解</p></blockquote><h2 id="2-3、使用"><a href="#2-3、使用" class="headerlink" title="2.3、使用"></a>2.3、使用</h2><h3 id="2-3-1、在主启动类中添加注解，将swagger配置类纳入被扫描范围"><a href="#2-3-1、在主启动类中添加注解，将swagger配置类纳入被扫描范围" class="headerlink" title="2.3.1、在主启动类中添加注解，将swagger配置类纳入被扫描范围"></a>2.3.1、在主启动类中添加注解，将swagger配置类纳入被扫描范围</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.hzx.mpblog.mapper&quot;)</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.hzx.mpblog&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MpApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MpApplication.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;http://localhost:8848/doc.html&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;http://localhost:8848/swagger-ui.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在主启动类的两个输出语句中，<a href="http://localhost:8848/doc.html%E6%98%AFswagger-bootstrap-ui%E7%9A%84%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80%E3%80%82">http://localhost:8848/doc.html是swagger-bootstrap-ui的访问地址。</a></p><p><a href="http://localhost:8848/swagger-ui.html%E6%98%AFswagger%E7%9A%84%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80%E3%80%82">http://localhost:8848/swagger-ui.html是swagger的访问地址。</a></p></blockquote><h3 id="2-3-2、启动主启动类"><a href="#2-3-2、启动主启动类" class="headerlink" title="2.3.2、启动主启动类"></a>2.3.2、启动主启动类</h3><blockquote><p>分别进入两个链接中查看效果</p></blockquote><ul><li>swagger</li></ul><blockquote><p>主页面说明</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153717308.png" alt="image-20210129153717308"></p><blockquote><p>点击方法进入方法说明及测试界面，点击try it out</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153734979.png" alt="image-20210129153734979"></p><blockquote><p>在参数输入框中输入参数，点击execute执行方法</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153751549.png" alt="image-20210129153751549"></p><blockquote><p>测试结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153803544.png" alt="image-20210129153803544"></p><ul><li>swagger-bootstrap-ui</li></ul><blockquote><p>主页面说明</p><p>swagger-bootstrap-ui将测试页面与方法说明页面分开，在</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153813279.png" alt="image-20210129153813279"></p><blockquote><p>方法说明</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153821304.png" alt="image-20210129153821304"></p><blockquote><p>方法测试</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153830894.png" alt="image-20210129153830894"></p><blockquote><p>测试结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153838469.png" alt="image-20210129153838469"></p>]]></content>
      
      
      <categories>
          
          <category> 框架学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
            <tag> 👢Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java应用学习（一）-Mybatis-plus框架</title>
      <link href="posts/2091692756.html"/>
      <url>posts/2091692756.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、MP简介"><a href="#一、MP简介" class="headerlink" title="一、MP简介"></a>一、MP简介</h1><blockquote><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p></blockquote><h2 id="1-1、特性"><a href="#1-1、特性" class="headerlink" title="1.1、特性"></a>1.1、特性</h2><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="1-2、支持的数据库"><a href="#1-2、支持的数据库" class="headerlink" title="1.2、支持的数据库"></a>1.2、支持的数据库</h2><blockquote><p>任何能使用 mybatis 进行 crud, 并且支持标准 sql 的数据库</p></blockquote><h1 id="二、快速入门"><a href="#二、快速入门" class="headerlink" title="二、快速入门"></a>二、快速入门</h1><blockquote><p>使用一个springboot项目来体验MP的强大之处。</p></blockquote><h2 id="2-1、建立入门项目的数据库与项目"><a href="#2-1、建立入门项目的数据库与项目" class="headerlink" title="2.1、建立入门项目的数据库与项目"></a>2.1、建立入门项目的数据库与项目</h2><blockquote><p>建表</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">create database mp;</span><br><span class="line">use mp;</span><br><span class="line"></span><br><span class="line">create table user(</span><br><span class="line">    id bigint(20) primary key auto_increment,</span><br><span class="line">    name varchar(50),</span><br><span class="line">    email varchar(50),</span><br><span class="line">    age int</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into</span><br><span class="line">    user(name, email, age)</span><br><span class="line">VALUES</span><br><span class="line">       (&#39;A&#39;,&#39;a@qq.com&#39;,18),</span><br><span class="line">       (&#39;B&#39;,&#39;b@qq.com&#39;,19),</span><br><span class="line">       (&#39;C&#39;,&#39;c@qq.com&#39;,12),</span><br><span class="line">       (&#39;D&#39;,&#39;d@qq.com&#39;,11),</span><br><span class="line">       (&#39;E&#39;,&#39;e@qq.com&#39;,111);</span><br></pre></td></tr></table></figure><blockquote><p>建立spring-boot项目，引入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>项目的application.yml配置文件如下</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mp?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;nullCatalogMeansCurrent=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">tianxin1230.</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><blockquote><p>编写主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.hzx.mpblog.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MpApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MpApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>根据数据库表建立对应entity实体类，这里使用Lombok插件并开启链式编程来简化开发</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编写UserMapper接口，该接口需要继承BaseMapper&lt; T &gt;，其中T为要操作的数据库表对应的实体类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2、编写测试类进行测试"><a href="#2-2、编写测试类进行测试" class="headerlink" title="2.2、编写测试类进行测试"></a>2.2、编写测试类进行测试</h2><blockquote><p>编写测试类，测试mybatis-plus为我们提供的查询所有方法</p></blockquote><ul><li>在selectList中，可以传入一个QueryWrapper查询条件构造器对象，但由于这里需要查询所有对象，所以不加条件筛选，传入null</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MpApplicationTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        userList.forEach(user -&gt;</span><br><span class="line">            System.out.println(user)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153047772.png" alt="image-20210129153047772"></p><h2 id="2-3、添加配置输出sql语句"><a href="#2-3、添加配置输出sql语句" class="headerlink" title="2.3、添加配置输出sql语句"></a>2.3、添加配置输出sql语句</h2><blockquote><p>我们可以在application.yml中添加配置，让mybatis-plus在执行时输出的sql语句</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印sql语句</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><blockquote><p>重新启动，测试结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153056405.png" alt="image-20210129153056405"></p><h1 id="三、CRUD扩展"><a href="#三、CRUD扩展" class="headerlink" title="三、CRUD扩展"></a>三、CRUD扩展</h1><h2 id="3-1、insert测试插入数据"><a href="#3-1、insert测试插入数据" class="headerlink" title="3.1、insert测试插入数据"></a>3.1、insert测试插入数据</h2><blockquote><p>使用Mybatis-plus自带的插入方法进行测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">&quot;小明&quot;</span>)</span><br><span class="line">            .setAge(<span class="number">18</span>)</span><br><span class="line">            .setEmail(<span class="string">&quot;xiaoming@qq.com&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.insert(user);</span><br><span class="line">    System.out.println(result == <span class="number">1</span> ? <span class="string">&quot;插入成功！&quot;</span> : <span class="string">&quot;插入失败！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查看testInsert()的执行结果并再次启动testFindAll()方法</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153116620.png" alt="image-20210129153116620"></p><blockquote><p>在这次插入操作中，我们没有指定插入数据库对象的id，这个属性是Mybatis-plus为我们生成的，Mybatis-plus提供的主键生成策略在枚举类IdType中.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">IdType</span> </span>&#123;</span><br><span class="line">    AUTO(<span class="number">0</span>),</span><br><span class="line">    NONE(<span class="number">1</span>),</span><br><span class="line">    INPUT(<span class="number">2</span>),</span><br><span class="line">    ID_WORKER(<span class="number">3</span>),</span><br><span class="line">    UUID(<span class="number">4</span>),</span><br><span class="line">    ID_WORKER_STR(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-1、雪花算法"><a href="#3-1-1、雪花算法" class="headerlink" title="3.1.1、雪花算法"></a>3.1.1、雪花算法</h3><blockquote><ul><li>雪花算法是推特开源的分布式ID生成算法，结果是一个long型的ID。</li><li>核心思想是：使用41bit作为毫秒数，10bit作为及其的ID（5个bit是数据中心，5个bit的及其ID），12bit作为毫秒的流水号（意味着每个节点在每秒可以产生4096个Id），最后还有一个符号位永远是0</li></ul></blockquote><h3 id="3-1-2、主键自增"><a href="#3-1-2、主键自增" class="headerlink" title="3.1.2、主键自增"></a>3.1.2、主键自增</h3><blockquote><p>配置主键自增</p><ul><li>在实体类字段上使用@TableId(type = IdType.AUTO)</li><li>要求数据库字段一定是自增的，否则会报错</li></ul></blockquote><h3 id="3-1-3、其余主键类型"><a href="#3-1-3、其余主键类型" class="headerlink" title="3.1.3、其余主键类型"></a>3.1.3、其余主键类型</h3><blockquote><p>AUTO(0)：自增<br>NONE(1)：不使用<br>INPUT(2)：手动输入<br>ID_WORKER(3)：默认唯一全局id<br>UUID(4)：uuid<br>ID_WORKER_STR(5)：默认唯一全局id字符串形式</p></blockquote><h2 id="3-2、update更新操作"><a href="#3-2、update更新操作" class="headerlink" title="3.2、update更新操作"></a>3.2、update更新操作</h2><blockquote><p>使用mybatis-plus提供的updateById方法可以快速修改表中数据，更新Id为2L的对象信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">2L</span>)</span><br><span class="line">        .setName(<span class="string">&quot;芜湖&quot;</span>)</span><br><span class="line">        .setEmail(<span class="string">&quot;wuhu@qq.com&quot;</span>)</span><br><span class="line">        .setAge(<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.updateById(user);</span><br><span class="line">    System.out.println(result == <span class="number">1</span> ? <span class="string">&quot;修改成功！&quot;</span> : <span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查看结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153136022.png" alt="image-20210129153136022"></p><h2 id="3-3、Mybatis-plus的自动填充功能"><a href="#3-3、Mybatis-plus的自动填充功能" class="headerlink" title="3.3、Mybatis-plus的自动填充功能"></a>3.3、Mybatis-plus的自动填充功能</h2><blockquote><p>在实际开发中，数据库往往有create_time和update_time两个字段，对于这两个字段，我们不希望手动填充，而希望程序或者数据库自动填充，mp提供了这个功能。</p><p>在数据库中添加create_time和update_time两个属性，并在实体类中添加对于字段。</p></blockquote><h3 id="3-3-1、数据库级别填充"><a href="#3-3-1、数据库级别填充" class="headerlink" title="3.3.1、数据库级别填充"></a>3.3.1、数据库级别填充</h3><blockquote><p>在新建的两个属性下面勾选根据时间戳自动更新即可，这种方式不推荐使用</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153147791.png" alt="image-20210129153147791"></p><h3 id="3-3-2、代码级别自动填充"><a href="#3-3-2、代码级别自动填充" class="headerlink" title="3.3.2、代码级别自动填充"></a>3.3.2、代码级别自动填充</h3><ul><li>在实体类的createTime和updateTime字段上添加注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 字段添加时填充内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 字段添加/更新时填充内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写一个处理器用于处理这两个注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//插入时的填充策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新时的填充策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在主启动类中添加组件扫描注解</li><li>测试插入，查看是否自动填充</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">&quot;小明111&quot;</span>)</span><br><span class="line">            .setAge(<span class="number">18</span>)</span><br><span class="line">            .setEmail(<span class="string">&quot;xiaoming@qq.com&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.insert(user);</span><br><span class="line">    System.out.println(result == <span class="number">1</span> ? <span class="string">&quot;插入成功！&quot;</span> : <span class="string">&quot;插入失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">2L</span>)</span><br><span class="line">        .setName(<span class="string">&quot;芜湖222&quot;</span>)</span><br><span class="line">        .setEmail(<span class="string">&quot;wuhu@qq.com&quot;</span>)</span><br><span class="line">        .setAge(<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.updateById(user);</span><br><span class="line">    System.out.println(result == <span class="number">1</span> ? <span class="string">&quot;修改成功！&quot;</span> : <span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动testFindAll方法查看结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153158628.png" alt="image-20210129153158628"></p><ul><li>自动填充使用成功。</li></ul><h2 id="3-4、乐观锁和悲观锁"><a href="#3-4、乐观锁和悲观锁" class="headerlink" title="3.4、乐观锁和悲观锁"></a>3.4、乐观锁和悲观锁</h2><blockquote><p>悲观锁十分悲观，他总是认为会出现问题，无论干什么都会上锁！</p><p>而乐观锁十分乐观，他总是认为不会出现问题，无论干什么都不去上锁！如果出现了问题，再次更新值测试。</p><p>下面介绍Mybatis-plus中乐观锁的实现方法</p></blockquote><h3 id="3-4-1、乐观锁的实现方式"><a href="#3-4-1、乐观锁的实现方式" class="headerlink" title="3.4.1、乐观锁的实现方式"></a>3.4.1、乐观锁的实现方式</h3><blockquote><p>取出记录时，获取当前version</p><p>更新时带上这个version</p><p>执行更新时，set version = newVersion where version = oldVersion</p><p>如果version不对，就更新失败</p></blockquote><ul><li>例子</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 乐观锁：</span><br><span class="line"># 1 先查询，获得版本号version &#x3D; 1</span><br><span class="line"># 假设现有AB两个线程在执行这条update语句，当A未执行完成时，B抢先完成这次更新，那么此时由于版本号version已经为2，所以A线程的更新工作不会成功，此时就保证了线程间的通讯安全</span><br><span class="line"></span><br><span class="line">update user set name &#x3D; &quot;芜湖&quot;,version &#x3D; version + 1 where id &#x3D; 2 and version &#x3D; 1;</span><br></pre></td></tr></table></figure><blockquote><p>给数据库表中添加一个version属性</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153213565.png" alt="image-20210129153213565"></p><blockquote><p>给实体类中添加一个version字段，同时在上面添加一个@Version注解，表明这是一个乐观锁</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure><blockquote><p>在配置类中注册乐观锁组件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span>  </span>&#123;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 注册乐观锁插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5、select查询操作"><a href="#3-5、select查询操作" class="headerlink" title="3.5、select查询操作"></a>3.5、select查询操作</h2><h3 id="3-5-1、根据id查询数据"><a href="#3-5-1、根据id查询数据" class="headerlink" title="3.5.1、根据id查询数据"></a>3.5.1、根据id查询数据</h3><blockquote><p>根据传入的主键值查询数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153228587.png" alt="image-20210129153228587"></p><h3 id="3-5-2、根据集合对象查询数据"><a href="#3-5-2、根据集合对象查询数据" class="headerlink" title="3.5.2、根据集合对象查询数据"></a>3.5.2、根据集合对象查询数据</h3><blockquote><p>传入一个主键集合，根据传入的多个主键值查询多条数据，使用selectBatchIds方法，该方法实际上使用mysql中的in关键字</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">5L</span>));</span><br><span class="line">    users.forEach(user -&gt;</span><br><span class="line">        System.out.println(user)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153239557.png" alt="image-20210129153239557"></p><h3 id="3-5-3、根据Map对象查询数据"><a href="#3-5-3、根据Map对象查询数据" class="headerlink" title="3.5.3、根据Map对象查询数据"></a>3.5.3、根据Map对象查询数据</h3><blockquote><p>传入一个map，mp将会以键为字段，值为字段值进行拼接并查询，如果map中有多个键值对，那么会以and关键词拼接</p></blockquote><ul><li>当map中只有一个键值对时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;id&quot;</span>,<span class="number">1L</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">    users.forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153248616.png" alt="image-20210129153248616"></p><ul><li>当map中包含多个键值对时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByMaps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;id&quot;</span>,<span class="number">2L</span>);</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;芜湖222&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">    users.forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153259081.png" alt="image-20210129153259081"></p><h3 id="3-5-4、分页查询"><a href="#3-5-4、分页查询" class="headerlink" title="3.5.4、分页查询"></a>3.5.4、分页查询</h3><blockquote><p>一般来说，分页查询的实现有以下几种方式</p><ul><li>使用limit关键字进行分页</li><li>使用PageHelper和PageInfo等第三方插件进行分页</li><li>使用Mybatis-plus自带的分页插件进行分页</li></ul><p>下面介绍mp的分页插件</p></blockquote><ul><li>在mybatis-plus配置类中配置拦截器组件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 第一个参数：当前页</span></span><br><span class="line"><span class="comment">     * 第二个参数：每页数据条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//使用Mybatis-plus提供的selectPage方法，传入分页对象page</span></span><br><span class="line">    IPage&lt;User&gt; userIPage = userMapper.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//得到的Page对象中，records属性就是需要的集合，该集合中包含了查询的结果</span></span><br><span class="line">    List&lt;User&gt; records = userIPage.getRecords();</span><br><span class="line">    records.forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153308347.png" alt="image-20210129153308347"></p><h3 id="3-5-5、分页插件Page属性简介"><a href="#3-5-5、分页插件Page属性简介" class="headerlink" title="3.5.5、分页插件Page属性简介"></a>3.5.5、分页插件Page属性简介</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IPage</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; records;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> total;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> current;</span><br><span class="line">    <span class="keyword">private</span> String[] ascs;</span><br><span class="line">    <span class="keyword">private</span> String[] descs;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> optimizeCountSql;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isSearchCount;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><blockquote><ul><li>List<T> records–用来存放查询出来的数据</li><li>long total–返回记录的总数</li><li>long size–每页显示条数，默认 10</li><li>long current–当前页,默认1</li><li>String[] ascs–升序字段集合</li><li>String[] descs–降序字段集合</li><li>boolean optimizeCountSql–自动优化count  sql，默认为true</li><li>boolean isSearchCount–是否进行count查询，默认为true</li></ul></blockquote><h2 id="3-6、delete删除操作"><a href="#3-6、delete删除操作" class="headerlink" title="3.6、delete删除操作"></a>3.6、delete删除操作</h2><h3 id="3-6-1、根据id删除记录"><a href="#3-6-1、根据id删除记录" class="headerlink" title="3.6.1、根据id删除记录"></a>3.6.1、根据id删除记录</h3><blockquote><p>使用mp提供的deleteById方法，返回值为数据库表中受影响数据条数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.deleteById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(result == <span class="number">1</span> ? <span class="string">&quot;删除成功！&quot;</span> : <span class="string">&quot;删除失败！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153320211.png" alt="image-20210129153320211"></p><h3 id="3-6-2、通过传入的集合对象进行批量删除"><a href="#3-6-2、通过传入的集合对象进行批量删除" class="headerlink" title="3.6.2、通过传入的集合对象进行批量删除"></a>3.6.2、通过传入的集合对象进行批量删除</h3><blockquote><p>使用mp提供的deleteBatchIds方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.deleteBatchIds(Arrays.asList(<span class="number">2L</span>,<span class="number">3L</span>,<span class="number">1L</span>));</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：由于数据库中id为1L的数据不存在，所以影响的数据条数只有两条，与批量插入一样，使用了mysql中的In关键字</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153331310.png" alt="image-20210129153331310"></p><h3 id="3-6-3、通过传入的map进行删除"><a href="#3-6-3、通过传入的map进行删除" class="headerlink" title="3.6.3、通过传入的map进行删除"></a>3.6.3、通过传入的map进行删除</h3><blockquote><p>与通过map进行查询类似，当有多个键值对时，使用and拼接</p></blockquote><ul><li>只有一个键值对时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;E&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.deleteByMap(map);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153341026.png" alt="image-20210129153341026"></p><ul><li>传入多个键值对时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByMaps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.deleteByMap(map);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153354773.png" alt="image-20210129153354773"></p><h2 id="3-7、配置逻辑删除"><a href="#3-7、配置逻辑删除" class="headerlink" title="3.7、配置逻辑删除"></a>3.7、配置逻辑删除</h2><blockquote><p>逻辑删除：在数据库中没有被移除，只是使用一个变量来使这一条记录失效</p><p>物理删除：从数据库中直接移除</p><p>管理员可以查看被删除的记录，类似于回收站</p></blockquote><h3 id="3-7-1、配置步骤"><a href="#3-7-1、配置步骤" class="headerlink" title="3.7.1、配置步骤"></a>3.7.1、配置步骤</h3><blockquote><p>在表中添加一个deleted字段，</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153422780.png" alt="image-20210129153422780"></p><blockquote><p>在实体类中添加一个deleted字段，并添加注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 逻辑删除字段</span></span><br><span class="line"><span class="comment"> * 添加一个逻辑删除注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure><blockquote><p>配置逻辑删除组件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置逻辑删除组件</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ISqlInjector <span class="title">sqlInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LogicSqlInjector();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在application.yml文件中配置</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>当deleted值为1时，证明该数据被逻辑删除</li><li>当deleted值为0时，证明该数据没有被逻辑删除</li></ul><h3 id="3-7-2、测试逻辑删除"><a href="#3-7-2、测试逻辑删除" class="headerlink" title="3.7.2、测试逻辑删除"></a>3.7.2、测试逻辑删除</h3><blockquote><p>先在数据库中新插入几条数据，以便后面的测试</p></blockquote><ul><li>逻辑删除id为3L的数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoginDeleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.deleteById(<span class="number">3L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：使用了update语句</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153433435.png" alt="image-20210129153433435"></p><h1 id="四、性能分析插件"><a href="#四、性能分析插件" class="headerlink" title="四、性能分析插件"></a>四、性能分析插件</h1><blockquote><p>我们在平时开发中，会遇到一些慢sql，mp提供了一个性能分析插件，如果超过指定时间，就停止运行</p></blockquote><h2 id="4-1、作用"><a href="#4-1、作用" class="headerlink" title="4.1、作用"></a>4.1、作用</h2><blockquote><p>性能分析拦截器，用于输出每条sql语句及其执行时间</p></blockquote><h2 id="4-2、使用"><a href="#4-2、使用" class="headerlink" title="4.2、使用"></a>4.2、使用</h2><blockquote><p>在application.yml中配置开发环境，将当前环境设置为dev</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><blockquote><p>在配置类中配置sql执行效率分析插件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * sql执行效率分析插件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Profile</span>(&#123;&quot;dev&quot;,&quot;test&quot;&#125;)表示此插件只在生产和测试环境下使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Profile(&#123;&quot;dev&quot;,&quot;test&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PerformanceInterceptor <span class="title">performanceInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PerformanceInterceptor performanceInterceptor = <span class="keyword">new</span> PerformanceInterceptor();</span><br><span class="line">    <span class="comment">//设置sql执行的最大时间，如果超过这个时间就不执行</span></span><br><span class="line">    performanceInterceptor.setMaxTime(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//设置格式化SQL语句（美化）</span></span><br><span class="line">    performanceInterceptor.setFormat(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> performanceInterceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3、测试"><a href="#4-3、测试" class="headerlink" title="4.3、测试"></a>4.3、测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateAndSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;芜湖&quot;</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;wuhu@qq.com&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">1222</span>);</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.updateById(user);</span><br><span class="line"></span><br><span class="line">    System.out.println(result);</span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    userList.forEach(System.out :: println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果–报告该sql超时</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153444986.png" alt="image-20210129153444986"></p><blockquote><p>将最大时间设置为100ms，再次测试，修改       performanceInterceptor.setMaxTime(100);</p></blockquote><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153458241.png" alt="image-20210129153458241"></p><h1 id="五、条件构造器Wrapper"><a href="#五、条件构造器Wrapper" class="headerlink" title="五、条件构造器Wrapper"></a>五、条件构造器Wrapper</h1><blockquote><p>Wrapper是一个接口，我们使用Wrapper的实现类：QueryWrapper来实现条件构造</p></blockquote><h2 id="5-1、QueryWrapper的一些方法"><a href="#5-1、QueryWrapper的一些方法" class="headerlink" title="5.1、QueryWrapper的一些方法"></a>5.1、QueryWrapper的一些方法</h2><h3 id="5-1-1、isNotNull-“列名”"><a href="#5-1-1、isNotNull-“列名”" class="headerlink" title="5.1.1、isNotNull(“列名”)"></a>5.1.1、isNotNull(“列名”)</h3><blockquote><p>这个字段的值不为空</p></blockquote><h3 id="5-1-2、ge-eq-ne-le-gt-lt-“列名”-值"><a href="#5-1-2、ge-eq-ne-le-gt-lt-“列名”-值" class="headerlink" title="5.1.2、ge/eq/ne/le/gt/lt(“列名”,值)"></a>5.1.2、ge/eq/ne/le/gt/lt(“列名”,值)</h3><blockquote><p>这个字段的值必须大于等于/等于/不等于/小于等于/严格大于/严格小于传入的值</p></blockquote><h3 id="5-1-3、between-“列名”-左边值-右边值"><a href="#5-1-3、between-“列名”-左边值-右边值" class="headerlink" title="5.1.3、between(“列名”,左边值,右边值)"></a>5.1.3、between(“列名”,左边值,右边值)</h3><blockquote><p>这个属性的值必须在左边值和右边值之间</p></blockquote><h3 id="5-1-4、notLike-“列名”-值"><a href="#5-1-4、notLike-“列名”-值" class="headerlink" title="5.1.4、notLike(“列名”,值)"></a>5.1.4、notLike(“列名”,值)</h3><blockquote><p>字段值 not like “%值%”</p></blockquote><h3 id="5-1-5、likeLeft-likeRight-“列名”-值"><a href="#5-1-5、likeLeft-likeRight-“列名”-值" class="headerlink" title="5.1.5、likeLeft/likeRight(“列名”,值)"></a>5.1.5、likeLeft/likeRight(“列名”,值)</h3><blockquote><p>字段 like “%值”/“值%”</p></blockquote><h3 id="5-1-6、in-notIn-“列名”-Object-…values"><a href="#5-1-6、in-notIn-“列名”-Object-…values" class="headerlink" title="5.1.6、in/notIn(“列名”,Object …values)"></a>5.1.6、in/notIn(“列名”,Object …values)</h3><blockquote><p>字段  in/notIn(v0,v1…vn)</p></blockquote><h3 id="5-1-7、inSql-noInSql-“列名”-sql语句"><a href="#5-1-7、inSql-noInSql-“列名”-sql语句" class="headerlink" title="5.1.7、inSql/noInSql(“列名”,sql语句)"></a>5.1.7、inSql/noInSql(“列名”,sql语句)</h3><blockquote><p>字段 in/notIn (sql语句)，例如 inSql/notInSql(“id”,select * from user where id &lt; 3)</p><p>等价于id in/notIn (select * from user where id &lt; 3)</p></blockquote><h3 id="5-1-8、分组排序"><a href="#5-1-8、分组排序" class="headerlink" title="5.1.8、分组排序"></a>5.1.8、分组排序</h3><blockquote><ul><li>groupBy(R… columns); // 等价于 GROUP BY 字段, …， 例: groupBy(“id”, “name”) —&gt; group by id,name</li><li>orderByAsc(R… columns); // 等价于 ORDER BY 字段, … ASC， 例: orderByAsc(“id”, “name”) —&gt; order by id ASC,name ASC</li><li>orderByDesc(R… columns); // 等价于 ORDER BY 字段, … DESC， 例: orderByDesc(“id”, “name”) —&gt; order by id DESC,name DESC</li><li>having(String sqlHaving, Object… params); // 等价于 HAVING ( sql语句 )， 例: having(“sum(age) &gt; {0}”, 11) —&gt; having sum(age) &gt; 11</li></ul></blockquote><h2 id="5-2、查询示例"><a href="#5-2、查询示例" class="headerlink" title="5.2、查询示例"></a>5.2、查询示例</h2><blockquote><p>查询name、email不为空，且年龄大于等于12岁的用户(.isNotNull()、.ge())</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 查询name、email不为空，且年龄大于等于12岁的用户(.isNotNull()、.ge())</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuestion01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper wrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">    wrapper.isNotNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    wrapper.isNotNull(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    wrapper.ge(<span class="string">&quot;age&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    List users = userMapper.selectList(wrapper);</span><br><span class="line">    users.forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>结果</p></li><li><p>sql语句为：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&gt;  Preparing: SELECT id,name,age,email,create_time,update_time,version,deleted FROM user WHERE deleted&#x3D;0 AND email IS NOT NULL AND name IS NOT NULL AND age &gt;&#x3D; ? </span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: 12(Integer)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153512076.png" alt="image-20210129153512076"></p><blockquote><p>查询name属性等于”小明”的用户</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 查询name属性等于&quot;小明&quot;的用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuestion02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper wrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">    List users = userMapper.selectList(wrapper);</span><br><span class="line">    users.forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153519861.png" alt="image-20210129153519861"></p><blockquote><p>查询年龄在10-30之间的<strong>用户个数</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 查询年龄在10-30之间的用户个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuestion03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper wrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">    wrapper.between(<span class="string">&quot;age&quot;</span>,<span class="number">10</span>,<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">int</span> count = userMapper.selectCount(wrapper);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153527524.png" alt="image-20210129153527524"></p><blockquote><p>查询id小于等于4且没被逻辑删除的用户</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 查询id小于等于4且没被逻辑删除的用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuestion04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper wrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">    String inSql = <span class="string">&quot;select id from user where id &lt;= 4&quot;</span>;</span><br><span class="line">    wrapper.inSql(<span class="string">&quot;id&quot;</span>,inSql);</span><br><span class="line">    List users = userMapper.selectList(wrapper);</span><br><span class="line">    users.forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>sql语句为：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT id,name,age,email,create_time,update_time,version,deleted FROM user WHERE deleted&#x3D;0 AND id IN (select id from user where id &lt;&#x3D; 4)</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153535669.png" alt="image-20210129153535669"></p><blockquote><p>通过id进行降序排序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 查询所有用户，并根据id进行降序排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuestion05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper wrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">    wrapper.orderByDesc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    List users = userMapper.selectList(wrapper);</span><br><span class="line">    users.forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153544738.png" alt="image-20210129153544738"></p><h1 id="六、代码生成器"><a href="#六、代码生成器" class="headerlink" title="六、代码生成器"></a>六、代码生成器</h1><h2 id="6-1、介绍"><a href="#6-1、介绍" class="headerlink" title="6.1、介绍"></a>6.1、介绍</h2><blockquote><p>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p></blockquote><h2 id="6-2、使用"><a href="#6-2、使用" class="headerlink" title="6.2、使用"></a>6.2、使用</h2><h3 id="6-2-1、引入依赖"><a href="#6-2-1、引入依赖" class="headerlink" title="6.2.1、引入依赖"></a>6.2.1、引入依赖</h3><blockquote><p>代码生成器需要使用模板引擎，这里使用velocity模板引擎</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>配置需要生成对于后台的数据库，这里以leyou_shop数据库的user表为例，生成后台代码</p></blockquote><h3 id="6-2-2、编写代码自动生成器CodeAutoCreator类"><a href="#6-2-2、编写代码自动生成器CodeAutoCreator类" class="headerlink" title="6.2.2、编写代码自动生成器CodeAutoCreator类"></a>6.2.2、编写代码自动生成器CodeAutoCreator类</h3><blockquote><p>这里以leyou_shop库的spu表为例</p></blockquote><ul><li>表结构如下</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153552969.png" alt="image-20210129153552969"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 蔡大头</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: CodeAutoGenerator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@projectName</span> mybatis-plus-blog</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/12/1016:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeAutoGenerator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">        <span class="comment">// 2、全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir(<span class="string">&quot;E:\\java\\blog\\src\\main\\java&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;蔡大头&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>); <span class="comment">//生成后是否打开资源管理器</span></span><br><span class="line">        gc.setFileOverride(<span class="keyword">false</span>); <span class="comment">//重新生成时文件是否覆盖</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);<span class="comment">//去掉Service接口的首字母I</span></span><br><span class="line">        gc.setIdType(IdType.AUTO); <span class="comment">//主键策略</span></span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);<span class="comment">//定义生成的实体类中日期类型</span></span><br><span class="line">        gc.setSwagger2(<span class="keyword">true</span>);<span class="comment">//开启Swagger2模式</span></span><br><span class="line"></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/leyou_shop?serverTimezone=UTC&quot;</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;tianxin1230.&quot;</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setParent(<span class="string">&quot;com.hzx&quot;</span>);</span><br><span class="line">        pc.setModuleName(<span class="string">&quot;mpblog&quot;</span>); <span class="comment">//模块名</span></span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setInclude(<span class="string">&quot;spu&quot;</span>);</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);<span class="comment">//数据库表映射到实体的命名策略</span></span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">&quot;_&quot;</span>); <span class="comment">//生成实体时去掉表前缀</span></span><br><span class="line"></span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);<span class="comment">//数据库表字段映射到实体的命名策略</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>); <span class="comment">// lombok 模型 @Accessors(chain = true) setter链式操作</span></span><br><span class="line"></span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>); <span class="comment">//restful api风格控制器</span></span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>); <span class="comment">//url中驼峰转连字符</span></span><br><span class="line"></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        <span class="comment">// 6、执行</span></span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3、测试及说明"><a href="#6-3、测试及说明" class="headerlink" title="6.3、测试及说明"></a>6.3、测试及说明</h2><blockquote><p>生成路径、主键策略</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153604973.png" alt="image-20210129153604973"></p><blockquote><p>设置包名和模块名</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153612043.png" alt="image-20210129153612043"></p><blockquote><p>设置要生成的表</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153620219.png" alt="image-20210129153620219"></p><blockquote><p>启动程序，查看结果</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153637898.png" alt="image-20210129153637898"></p><blockquote><p>Mybatis-plus只对mybatis做增强，不做修改，所以Mybatis有的功能，MP均能实现，对于一些复杂的查询，可以使用写xml文件的方式来完成。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 框架学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
            <tag> 👢Spring Boot </tag>
            
            <tag> 💎Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式学习总结（一）-单例模式</title>
      <link href="posts/1986796058.html"/>
      <url>posts/1986796058.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1、单例模式介绍"><a href="#1、单例模式介绍" class="headerlink" title="1、单例模式介绍"></a>1、单例模式介绍</h2><blockquote><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><p><strong>注意：</strong></p><ul><li>1、单例类只能有一个实例。</li><li>2、单例类必须自己创建自己的唯一实例。</li><li>3、单例类必须给所有其他对象提供这一实例。</li></ul><p>下面介绍几种单例模式的实现方法</p></blockquote><h2 id="2、饿汉式"><a href="#2、饿汉式" class="headerlink" title="2、饿汉式"></a>2、饿汉式</h2><blockquote><p>这种单例模式实现简单，且在多线程环境下保证了并发全，但缺点是无法实现懒加载，方法单例在类加载的时候就会被创建，可能会造成空间浪费，这种单例模式会被反射和序列化工具破坏。</p></blockquote><blockquote><p>实现思路</p></blockquote><ul><li>在类中new 一个静态类对象instance</li><li>私有化构造方法</li><li>编写一个静态方法用于返回第一步new的instance对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton01</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton01 instance = <span class="keyword">new</span> Singleton01();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton01</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton01 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个实现方法在高并发下线程安全，但可以被反射和序列化工具破坏，下面一一进行测试</p></blockquote><h3 id="2-1、使用反射破坏"><a href="#2-1、使用反射破坏" class="headerlink" title="2.1、使用反射破坏"></a>2.1、使用反射破坏</h3><ul><li>测试代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Singleton01.class;</span><br><span class="line">Constructor constructor = clazz.getDeclaredConstructor();</span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//使用反射获取的构造器新建的对象</span></span><br><span class="line">Singleton01 singleton01 = (Singleton01) constructor.newInstance();</span><br><span class="line"><span class="comment">//使用单例类方法获取的对象</span></span><br><span class="line">Singleton01 instance = getInstance();</span><br><span class="line"><span class="comment">//比较地址</span></span><br><span class="line">System.out.println(singleton01 == instance);</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129152932524.png" alt="image-20210129152932524"></p><h3 id="2-2、使用序列化工具进行破坏，下面给出序列化工具及演示代码"><a href="#2-2、使用序列化工具进行破坏，下面给出序列化工具及演示代码" class="headerlink" title="2.2、使用序列化工具进行破坏，下面给出序列化工具及演示代码"></a>2.2、使用序列化工具进行破坏，下面给出序列化工具及演示代码</h3><ul><li>序列化工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializationUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 序列化后的字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(Object obj) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">            out.writeObject(obj);</span><br><span class="line">            <span class="keyword">return</span> byteArrayOutputStream.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes 对象序列化后的字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 反序列化后的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == bytes) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">                ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(byteArrayInputStream);</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> in.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取单例对象并进行序列化</span></span><br><span class="line">Singleton01 instance = getInstance();</span><br><span class="line"><span class="keyword">byte</span>[] bytes = SerializationUtils.serialize(instance);</span><br><span class="line"><span class="comment">//进行反序列化，获取instance对象</span></span><br><span class="line">Singleton01 deserializeInstance = (Singleton01)SerializationUtils.deserialize(bytes);</span><br><span class="line"><span class="comment">//比较两个对象的地址</span></span><br><span class="line">System.out.println(instance);</span><br><span class="line">System.out.println(deserializeInstance);</span><br><span class="line">System.out.println(instance == deserializeInstance);</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129152944497.png" alt="image-20210129152944497"></p><h3 id="2-3、问题解决方案"><a href="#2-3、问题解决方案" class="headerlink" title="2.3、问题解决方案"></a>2.3、问题解决方案</h3><blockquote><p>对于反射，我们可以在私有的构造函数中做一些处理，当用户进入饿汉式单例模式的构造方法时，我们可以判断当前静态对象instance是否为空，如果不为空，直接抛出一个异常，让其他人不能用反射来破坏单例模式。</p></blockquote><ul><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>再次执行上面的测试代码，结果为</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/tianxin763882220/images/master/blog/20201208151900.png" alt="image-20201208151900669"></p><blockquote><p>由于类的静态成员的序列化问题，所以每次反序列化都会new一个类对象，我们可以写一个readReslove方法来时其序列化和反序列化使用的都是同一个instance对象。</p></blockquote><ul><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129152958851.png" alt="image-20210129152958851"></p><h2 id="3、饿汉式单例模式的改进–登记式"><a href="#3、饿汉式单例模式的改进–登记式" class="headerlink" title="3、饿汉式单例模式的改进–登记式"></a>3、饿汉式单例模式的改进–登记式</h2><blockquote><p>登记式单例模式采用了一个静态内部类来持有该类的单实例对象，在外部类被加载时，静态内部类不会被加载，即类的单例对象不会被创建，当用户第一次使用类的getInstance方法时，类的单实例才会被加载，这样既保证了线程安全，又起到了懒加载的效果。</p></blockquote><h3 id="3-1、登记式实现思路"><a href="#3-1、登记式实现思路" class="headerlink" title="3.1、登记式实现思路"></a>3.1、登记式实现思路</h3><ul><li>在类中添加一个静态内部类SingtonHolder，类中存放外部类的唯一实例instance</li><li>私有化构造器，在构造器中通过判断静态内部类中instance实例是否为空来决定要不要抛出异常。</li><li>在外部类中构建一个静态方法getInstance来返回类的单实例。</li><li>写一个readReslove方法来防止序列化破坏单例。</li></ul><h3 id="3-2、代码实现"><a href="#3-2、代码实现" class="headerlink" title="3.2、代码实现"></a>3.2、代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton02</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Singleton02 instance = <span class="keyword">new</span> Singleton02();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(SingletonHolder.instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton02 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>静态内部类的加载时机，我们可以在Sington2的构造函数中输出一段语句来判断静态内部类的加载时间。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;singleton.Singleton02&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-----------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">Singleton02 instance = getInstance();</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153010304.png" alt="image-20210129153010304"></p><ul><li>结论：静态内部类在外部类加载时不会被加载，而是在用户第一次调用getInstance方法时才加载。</li></ul><blockquote><p>小结：对于饿汉式，推荐使用登记式。</p></blockquote><h2 id="4、懒汉式和双检锁"><a href="#4、懒汉式和双检锁" class="headerlink" title="4、懒汉式和双检锁"></a>4、懒汉式和双检锁</h2><blockquote><p>懒汉式单例模式意味着在类加载时不创建类的单实例对象，而是当用户需要实例时才去创建对象，这种方法实现了懒加载，且实现简单，但不能保证多线程环境下的单例唯一性。</p></blockquote><h3 id="4-1、代码实现"><a href="#4-1、代码实现" class="headerlink" title="4.1、代码实现"></a>4.1、代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton03</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton03 instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton03</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Singleton03 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton03();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种单例模式存在许多问题，除了前面提到的可以用反射和序列化工具破坏外，这种单例模式在多线程并发环境下不能保证单例的唯一性，给出测试代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(getInstance());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：可以看到出现了两个对象，所以需要对这种模式进行改进</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129153022773.png" alt="image-20210129153022773"></p><h3 id="4-2、解决懒汉式在多线程并发下的线程安全问题"><a href="#4-2、解决懒汉式在多线程并发下的线程安全问题" class="headerlink" title="4.2、解决懒汉式在多线程并发下的线程安全问题"></a>4.2、解决懒汉式在多线程并发下的线程安全问题</h3><blockquote><p>在getInstance方法中添加一个synchronizd块锁定代码，就可以解决线程安全问题，下面给出代码实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton04 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (Singleton04.class) &#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton04();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这样就可以保证多线程下的线程安全问题，但这种直接加同步块的代码会影响程序的性能，所以我们可以通过引进双检锁模式的方法在保证线程安全的前提下尽可能地保证性能。</p></blockquote><h3 id="4-3、双检锁"><a href="#4-3、双检锁" class="headerlink" title="4.3、双检锁"></a>4.3、双检锁</h3><blockquote><p>同样对getInstance方法进行改造，在同步块外再次添加一个判断，即单例对象为空时，才进入同步块及以后代码，代码实现如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckLock <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (DoubleCheckLock.class) &#123;</span><br><span class="line">            <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> DoubleCheckLock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>假设AB同时进入第一个if判断，由于synchronized块的存在，AB有一个线程会进入同步块中，其他线程等待，进入同步块的线程判断当前单实例对象为空，于是会初始化对象，然后退出synchronized块，此时另外的线程进入代码块时，由于instance已经被初始化，所以会直接返回已经初始化的instance。之后的线程在进入synchronized块时会先进行一次判断，此时的instance已经不为空，所以直接返回instance。</p></blockquote><ul><li>可能遇到的问题</li></ul><blockquote><p>由于JVM机存在指令重排，同时初始化instance对象（instance = new DoubleCheckLock()）执行的操作如下</p><p>1 分配对象内存空间</p><p>2 初始化对象</p><p>3 instance指向1分配的空间</p><p>出现指令重排后，执行的操作如下</p><p>1 分配对象内存空间</p><p>2 instance指向1分配的空间</p><p>3 初始化对象</p><p>如果此时其他线程在指令重排的第2步就对instance进行判断，那么可能拿到一个空的instance对象，因为在指令排序的第2步操作后，instance指向的地址已经不为空。</p></blockquote><ul><li>解决方案：使用<strong>volatile</strong>关键字修饰instance变量</li></ul><blockquote><p>双检锁的完整实现代码如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheckLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> DoubleCheckLock instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 在构造方法中防止反射破坏单例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheckLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckLock <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DoubleCheckLock.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> DoubleCheckLock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 编写一个readResolve方法防止序列化破坏单例模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前类的单实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法学习（二）-字符串相关问题</title>
      <link href="posts/4173931752.html"/>
      <url>posts/4173931752.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1、String、StringBuffer与StringBuilder的区别"><a href="#1、String、StringBuffer与StringBuilder的区别" class="headerlink" title="1、String、StringBuffer与StringBuilder的区别"></a>1、String、StringBuffer与StringBuilder的区别</h2><h3 id="1-1、String类"><a href="#1-1、String类" class="headerlink" title="1.1、String类"></a>1.1、String类</h3><blockquote><p>分析源码可知，String对象的内容是存储在一个char数组中，且这个数组使用final修饰，这也是String对象不可变的原因。当进行字符串拼接时，虚拟机会新建一个字符串对象，然后将新的字符串对象赋值给原来的引用，而不是真的修改了原来字符串对象的值。</p><p>字符串重写了Object父类的equals方法。</p></blockquote><h3 id="1-2、StringBuffer类和StringBuilder类"><a href="#1-2、StringBuffer类和StringBuilder类" class="headerlink" title="1.2、StringBuffer类和StringBuilder类"></a>1.2、StringBuffer类和StringBuilder类</h3><blockquote><p>这两个类均继承于AbstractStringBuilder类，但分析源码可知StringBuffer的方法都添加了synchronized关键词进行修饰，所以StringBuffer是线程安全的，而没有使用synchronized修饰方法的StringBuilder是线程不安全的，但StringBuilder的速度要远远高于StringBuffer，所以在能保证线程安全的情况下，StringBuilder的优先级要高于StringBuffer。</p></blockquote><h3 id="1-3、总结"><a href="#1-3、总结" class="headerlink" title="1.3、总结"></a>1.3、总结</h3><ul><li>String是一个final修饰的类，所有的属性也是final的，所以String具有不可变性，也就是对字符串的操作，如拼接、剪切都会产生新的String对象。</li><li>StringBuffer本质是一个线程安全的可修改字符串序列。因为保证线程安全，所以会带来额外的性能消耗。</li><li>StringBuilder本质上和StringBuffer没有区别，但是StringBuilder去掉了线程安全部分提高了操作效率，是绝大部分情况下字符串拼接的首选。</li><li>如果确定拼接字符串会发生多次，并且长度可预计，那么可以在开始的时候指定合适的大小，避免数组扩容造成的开销。</li></ul><h2 id="2、找出字符串中出现最多次的字符和出现的次数"><a href="#2、找出字符串中出现最多次的字符和出现的次数" class="headerlink" title="2、找出字符串中出现最多次的字符和出现的次数"></a>2、找出字符串中出现最多次的字符和出现的次数</h2><blockquote><p>遍历字符串，并使用一个HashMap来存储出现字符及出现的次数，以字符为key，次数为value。解题思路如下</p></blockquote><ul><li><p>假定字符串中出现最多的字符maxCode为当前字符串的第一个元素，出现次数maxCount初始化为0</p></li><li><p>遍历字符串，判断当前字符是否在hashmap的key中，如果包含，令次数+1，否则将该字符为key，1为value放入hashmap中</p></li><li><p>判断maxCount和当前字符出现次数的关系，如果maxCount小于当前字符出现次数，就令maxCode = 当前字符，然后更新maxCode，最后返回maxCode和maxCount即可。</p></li></ul><blockquote><p>代码实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 找出字符串中出现最多次的字符和出现的次数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str 目标字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 以maxCode为键、maxCount为值的map</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Character, Integer&gt; <span class="title">findMostCodeAndCount</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> maxCode = str.charAt(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> maxCount = <span class="number">0</span>;</span><br><span class="line">    Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        Character currentCode = str.charAt(i);</span><br><span class="line">        Integer count = map.get(currentCode);</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="keyword">null</span>) &#123;</span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(currentCode, count);</span><br><span class="line">        <span class="keyword">if</span>(maxCount &lt; count) &#123;</span><br><span class="line">            maxCode = currentCode;</span><br><span class="line">            maxCount = count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;Character, Integer&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    result.put(maxCode,maxCount);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试代码及结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;abcacba&quot;</span>;</span><br><span class="line">Map result = findMostCodeAndCount(str);</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129152842664.png" alt="image-20210129152842664"></p><h2 id="3、找出字符串中第一次重复出现的字符"><a href="#3、找出字符串中第一次重复出现的字符" class="headerlink" title="3、找出字符串中第一次重复出现的字符"></a>3、找出字符串中第一次重复出现的字符</h2><blockquote><p>使用一个HashSet来解决问题，由于Set有不允许元素重复的性质，Set的add方法在添加重复值是会返回false，所以我们可以用这个性质来判断元素是否重复。</p></blockquote><blockquote><p>代码实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 找出字符串中第一次重复出现的字符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str 目标字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回第一次重复的字符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Character <span class="title">getFirstRepeat</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    Character result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        Character currentCode = str.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(!set.add(currentCode)) &#123;</span><br><span class="line">            result = currentCode;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试代码和结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;abcacba&quot;</span>;</span><br><span class="line">Character result = getFirstRepeat(str);</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129152855053.png" alt="image-20210129152855053"></p><h2 id="4、两个大数之和"><a href="#4、两个大数之和" class="headerlink" title="4、两个大数之和"></a>4、两个大数之和</h2><blockquote><p>题目描述：现在有两个数，位数均超过1000位，例如</p><ul><li><p>String a = “123343432…”</p></li><li><p>String b = “3974928374928…”</p></li></ul><p>这两个大数无法转换为Integer计算，所以我们使用两个数组来存储这两个数，然后进行计算。</p><p>解题思路如下</p></blockquote><ul><li>设这两个数中大的数的位数位m，则结果的最大位数位m+1</li><li>用一个int数组来存储结果</li></ul><blockquote><p>代码实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 编程两个大数之和</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> num1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> num2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sumOfBigNum</span><span class="params">(String num1,String num2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] largeArray = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">char</span>[] smallArray = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(num1.length() &gt;= num2.length()) &#123;</span><br><span class="line">        largeArray = num1.toCharArray();</span><br><span class="line">        smallArray = num2.toCharArray();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        largeArray = num2.toCharArray();</span><br><span class="line">        smallArray = num1.toCharArray();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[largeArray.length + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; largeArray.length; i++) &#123;</span><br><span class="line">        res[i] = largeArray[largeArray.length - i - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; smallArray.length; i++) &#123;</span><br><span class="line">        res[i] += smallArray[smallArray.length - i - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(res[i] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">            res[i + <span class="number">1</span>] += res[i] / <span class="number">10</span>;</span><br><span class="line">            res[i] %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = res.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        stringBuilder.append(res[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String result = stringBuilder.toString();</span><br><span class="line">    <span class="keyword">if</span>(result.startsWith(<span class="string">&quot;0&quot;</span>)) &#123;</span><br><span class="line">        result = result.substring(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试代码和结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String num1 = <span class="string">&quot;12345&quot;</span>;</span><br><span class="line">String num2 = <span class="string">&quot;56756&quot;</span>;</span><br><span class="line">Integer n1 = Integer.valueOf(num1);</span><br><span class="line">Integer n2 = Integer.valueOf(num2);</span><br><span class="line">Integer sum = n1 + n2;</span><br><span class="line">System.out.println(<span class="string">&quot;计算机计算结果为：&quot;</span> + sum);</span><br><span class="line">System.out.println(<span class="string">&quot;函数计算结果位：&quot;</span> + sumOfBigNum(num1,num2));</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129152910086.png" alt="image-20210129152910086"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法学习（一）--单链表相关算法</title>
      <link href="posts/3227196086.html"/>
      <url>posts/3227196086.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1、使用java实现单链表"><a href="#1、使用java实现单链表" class="headerlink" title="1、使用java实现单链表"></a>1、使用java实现单链表</h2><blockquote><p>建立Node节点类的代码如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    Integer data;</span><br><span class="line">    Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Integer data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;data=&quot;</span> + data +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>建立链表类并编写链表类的添加节点和遍历方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">    Node head;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 添加节点的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 待添加节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果当前头节点为空，那么将传入的节点作为头节点</span></span><br><span class="line">            <span class="keyword">this</span>.head = node;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//由于单链表的头节点不可移动，所以我们使用一个临时指针来辅助我们添加节点。</span></span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//退出循环时，temp节点指向链表最后一个节点，此时将传入节点挂在temp之后即可</span></span><br><span class="line">        temp.next = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 遍历链表的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空，无法遍历！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、编写代码实现单链表的反转"><a href="#2、编写代码实现单链表的反转" class="headerlink" title="2、编写代码实现单链表的反转"></a>2、编写代码实现单链表的反转</h2><blockquote><p>这里使用<strong>递归</strong>来完成单链表的反转，这个算法的思路大体如下</p></blockquote><ul><li>假设现在有一条单链表：1-2-3-4-NULL，在每次进入倒置函数reverse之前，需要对传入的节点进行判断，当传入的节点为空或者传入节点的next指针域为空时，证明该链表不需要反转，直接返回该节点。</li><li>当传入节点的指针域不为空时，将该节点的下一个节点的next域指向自己，同时将该节点的next指针域置为空，这样就形成了局部意义上的链表节点反转，由于我们使用了递归，并设置了递归退出条件（当前传入节点为空或者当前传入节点的next指针域为空），所以我们可以使用这个思路，完成对链表的反转</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129152444803.png" alt="image-20210129152444803"></p><blockquote><p>实现代码如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">reverse</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//如果进入这个if块中，证明当前head与其之后结点形成的链表不需要反转</span></span><br><span class="line">        <span class="comment">//例如1-2-3-4中的4不需要反转，直接返回该节点即可</span></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果链表长度大于等于2，进行递归</span></span><br><span class="line">    Node reverseNode = reverse(head.next);</span><br><span class="line">    <span class="comment">//将当前节点下一个节点的next指针域指向自己</span></span><br><span class="line">    head.next.next = head;</span><br><span class="line">    <span class="comment">//将当前节点的next指针域置空</span></span><br><span class="line">    head.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> reverseNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建一个链表：1-2-3-4-5，测试代码与结果如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LinkedList linkedList = <span class="keyword">new</span> LinkedList();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    linkedList.addNode(<span class="keyword">new</span> Node(i + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;反转前:&quot;</span>);</span><br><span class="line">linkedList.list();</span><br><span class="line">LinkedList reverseList = <span class="keyword">new</span> LinkedList(reverse(linkedList.head));</span><br><span class="line">System.out.println(<span class="string">&quot;反转后:&quot;</span>);</span><br><span class="line">reverseList.list();</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129152457748.png" alt="image-20210129152457748"></p><h2 id="3、将两个有序单链表合并为一个有序单链表"><a href="#3、将两个有序单链表合并为一个有序单链表" class="headerlink" title="3、将两个有序单链表合并为一个有序单链表"></a>3、将两个有序单链表合并为一个有序单链表</h2><blockquote><p>将A链表：1-2-3-null与B链表2-3-6-null合并为一张有序链表，解题思路如下</p></blockquote><ul><li>新建一个链表temp，然后使用指针遍历AB链表，对每一次遍历出来的节点的data值进行比较，将data值较小的节点从原链表中摘除，然后加到temp链表中，直到有一条链表被摘空。</li><li>此时如果A链表被摘空，那么将B链表剩余的节点挂在temp节点的最后面，由于B链表和temp链表本来就是有序的，所以得出的结果仍然是一个有序列表，反之亦然。</li></ul><blockquote><p>代码实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 合并两个有序链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list1 链表1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list2 链表2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LinkedList <span class="title">mergeTwoList</span><span class="params">(LinkedList list1,LinkedList list2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个</span></span><br><span class="line">    LinkedList temp = <span class="keyword">new</span> LinkedList(<span class="keyword">new</span> Node(Integer.MIN_VALUE));</span><br><span class="line">    Node cur = temp.head;</span><br><span class="line">    <span class="keyword">while</span>(list1.head != <span class="keyword">null</span> &amp;&amp; list2.head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(list1.head.data &lt; list2.head.data) &#123;</span><br><span class="line">            cur.next = list1.head;</span><br><span class="line">            list1.head = list1.head.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur.next = list2.head;</span><br><span class="line">            list2.head = list2.head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//每一次循环后都需要将cur后移</span></span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//退出循环时，至少有一个链表为空</span></span><br><span class="line">    <span class="comment">//如果是第一个链表为空，那么将cur.next指向第二个链表的头节点，由于第二个链表本身就是有序的，所以合并后仍然有序</span></span><br><span class="line">    <span class="keyword">if</span>(list1.head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        cur.next = list2.head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(list2.head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        cur.next = list1.head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//由于temp的第一个节点为MIN_VALUE，为无效节点，所以返回下一个</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LinkedList(temp.head.next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试代码及结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">LinkedList list1 = <span class="keyword">new</span> LinkedList();</span><br><span class="line">list1.addNode(<span class="keyword">new</span> Node(<span class="number">1</span>));</span><br><span class="line">list1.addNode(<span class="keyword">new</span> Node(<span class="number">2</span>));</span><br><span class="line">list1.addNode(<span class="keyword">new</span> Node(<span class="number">4</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;链表1为:&quot;</span>);</span><br><span class="line">list1.list();</span><br><span class="line"></span><br><span class="line">LinkedList list2 = <span class="keyword">new</span> LinkedList();</span><br><span class="line">list2.addNode(<span class="keyword">new</span> Node(<span class="number">1</span>));</span><br><span class="line">list2.addNode(<span class="keyword">new</span> Node(<span class="number">3</span>));</span><br><span class="line">list2.addNode(<span class="keyword">new</span> Node(<span class="number">4</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;链表2为:&quot;</span>);</span><br><span class="line">list2.list();</span><br><span class="line"></span><br><span class="line">LinkedList result = mergeTwoList(list1,list2);</span><br><span class="line">System.out.println(<span class="string">&quot;合并结果为:&quot;</span>);</span><br><span class="line">result.list();</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129152513991.png" alt="image-20210129152513991"></p><h2 id="4、返回链表中倒数第K个结点"><a href="#4、返回链表中倒数第K个结点" class="headerlink" title="4、返回链表中倒数第K个结点"></a>4、返回链表中倒数第K个结点</h2><blockquote><p>返回链表倒数第K个结点，结题思路如下</p></blockquote><ul><li>创建两个指针before和after，并将其指向链表头节点head</li><li>先让after结点前进k步，如果在此过程中after结点已经走出链表的范围（即移动过程中after已为空），那么证明输入的k不合法，此时返回null。</li><li>完成上一步的操作后，进行循环并使before和after同时进行移动，直到after为空时退出循环，此时before指向的元素即为链表的倒数第k个结点。</li></ul><blockquote><p>代码实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 获取链表的倒数第k个结点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">getKthFromEnd</span><span class="params">(LinkedList list,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(list.head == <span class="keyword">null</span> || list == <span class="keyword">null</span> || k &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node before = list.head;</span><br><span class="line">    Node after = list.head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; k;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(after == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        after = after.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(after != <span class="keyword">null</span>) &#123;</span><br><span class="line">        before = before.next;</span><br><span class="line">        after = after.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> before;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试代码以及结果，这里的链表使用上面合并链表的结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LinkedList result = mergeTwoList(list1,list2);</span><br><span class="line">System.out.println(<span class="string">&quot;合并结果为:&quot;</span>);</span><br><span class="line">result.list();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;倒数第3个结点值为:&quot;</span> + getKthFromEnd(result,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/sutianxin/my-hexo-blog-photo/raw/master/image-20210129152527059.png" alt="image-20210129152527059"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ☕Java </tag>
            
            <tag> 💻后端学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
